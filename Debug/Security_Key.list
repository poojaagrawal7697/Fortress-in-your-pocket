
Security_Key.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097bc  080097bc  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c4  080097c4  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  080097cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          00000c80  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dec  20000dec  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013c8c  00000000  00000000  000201df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000392a  00000000  00000000  00033e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001030  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c21  00000000  00000000  000387c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247f5  00000000  00000000  000393e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016092  00000000  00000000  0005dbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c95dc  00000000  00000000  00073c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048e4  00000000  00000000  0013d24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00141b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095ec 	.word	0x080095ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	080095ec 	.word	0x080095ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <send_command>:
extern uint8_t data;
extern USB_OPERATIONS operation;
#define FINGERPRINT_UART &huart4

static void send_command(Packet pkt)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	463b      	mov	r3, r7
 8000574:	e883 0003 	stmia.w	r3, {r0, r1}
	pkt.start_byte = 0xF5;
 8000578:	23f5      	movs	r3, #245	; 0xf5
 800057a:	703b      	strb	r3, [r7, #0]
	pkt.end_byte = 0xF5;
 800057c:	23f5      	movs	r3, #245	; 0xf5
 800057e:	71fb      	strb	r3, [r7, #7]
    pkt.checksum = calculate_checksum(pkt);
 8000580:	463b      	mov	r3, r7
 8000582:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000586:	f000 f88b 	bl	80006a0 <calculate_checksum>
 800058a:	4603      	mov	r3, r0
 800058c:	71bb      	strb	r3, [r7, #6]
    printf("Send data = %d\r\n", pkt.parameter[0]);
 800058e:	78bb      	ldrb	r3, [r7, #2]
 8000590:	4619      	mov	r1, r3
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <send_command+0x44>)
 8000594:	f008 f95a 	bl	800884c <iprintf>
    HAL_UART_Transmit(FINGERPRINT_UART, (uint8_t*)&pkt, 8, 2000);
 8000598:	4639      	mov	r1, r7
 800059a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800059e:	2208      	movs	r2, #8
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <send_command+0x48>)
 80005a2:	f003 f9b7 	bl	8003914 <HAL_UART_Transmit>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	08009604 	.word	0x08009604
 80005b4:	200001a4 	.word	0x200001a4

080005b8 <RecevieAck>:

static Packet RecevieAck()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	Packet receive;
	uint8_t i=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	75fb      	strb	r3, [r7, #23]
	printf("In Receive %d\r\n", receive_flag);
 80005c4:	4b2d      	ldr	r3, [pc, #180]	; (800067c <RecevieAck+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	482d      	ldr	r0, [pc, #180]	; (8000680 <RecevieAck+0xc8>)
 80005cc:	f008 f93e 	bl	800884c <iprintf>
	while(i<20 && receive_flag!=8)
 80005d0:	e016      	b.n	8000600 <RecevieAck+0x48>
	{
		receive_flag = 0;
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <RecevieAck+0xc4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
		printf("Waiting %d %x\r\n", receive_flag, data);
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <RecevieAck+0xc4>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <RecevieAck+0xcc>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4828      	ldr	r0, [pc, #160]	; (8000688 <RecevieAck+0xd0>)
 80005e6:	f008 f931 	bl	800884c <iprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4827      	ldr	r0, [pc, #156]	; (800068c <RecevieAck+0xd4>)
 80005f0:	f001 fa2b 	bl	8001a4a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f000 feab 	bl	8001350 <HAL_Delay>
		i++;
 80005fa:	7dfb      	ldrb	r3, [r7, #23]
 80005fc:	3301      	adds	r3, #1
 80005fe:	75fb      	strb	r3, [r7, #23]
	while(i<20 && receive_flag!=8)
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	2b13      	cmp	r3, #19
 8000604:	d803      	bhi.n	800060e <RecevieAck+0x56>
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <RecevieAck+0xc4>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b08      	cmp	r3, #8
 800060c:	d1e1      	bne.n	80005d2 <RecevieAck+0x1a>
	}

	receive = *(Packet*)receive_buff;
 800060e:	4a20      	ldr	r2, [pc, #128]	; (8000690 <RecevieAck+0xd8>)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	6810      	ldr	r0, [r2, #0]
 8000616:	6851      	ldr	r1, [r2, #4]
 8000618:	c303      	stmia	r3!, {r0, r1}

	memset(receive_buff, 0, sizeof(receive_buff));
 800061a:	2208      	movs	r2, #8
 800061c:	2100      	movs	r1, #0
 800061e:	481c      	ldr	r0, [pc, #112]	; (8000690 <RecevieAck+0xd8>)
 8000620:	f008 fa5a 	bl	8008ad8 <memset>

	printf("Received = %x %x ", receive.start_byte, receive.command);
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	4619      	mov	r1, r3
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	461a      	mov	r2, r3
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <RecevieAck+0xdc>)
 800062e:	f008 f90d 	bl	800884c <iprintf>
	for(uint8_t i=0; i<4;  ++i)
 8000632:	2300      	movs	r3, #0
 8000634:	75bb      	strb	r3, [r7, #22]
 8000636:	e00b      	b.n	8000650 <RecevieAck+0x98>
	{
		printf("%x ", receive.parameter[i]);
 8000638:	7dbb      	ldrb	r3, [r7, #22]
 800063a:	3318      	adds	r3, #24
 800063c:	443b      	add	r3, r7
 800063e:	f813 3c0a 	ldrb.w	r3, [r3, #-10]
 8000642:	4619      	mov	r1, r3
 8000644:	4814      	ldr	r0, [pc, #80]	; (8000698 <RecevieAck+0xe0>)
 8000646:	f008 f901 	bl	800884c <iprintf>
	for(uint8_t i=0; i<4;  ++i)
 800064a:	7dbb      	ldrb	r3, [r7, #22]
 800064c:	3301      	adds	r3, #1
 800064e:	75bb      	strb	r3, [r7, #22]
 8000650:	7dbb      	ldrb	r3, [r7, #22]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d9f0      	bls.n	8000638 <RecevieAck+0x80>
	}
	printf("%x %x\r\n", receive.checksum, receive.end_byte);
 8000656:	7cbb      	ldrb	r3, [r7, #18]
 8000658:	4619      	mov	r1, r3
 800065a:	7cfb      	ldrb	r3, [r7, #19]
 800065c:	461a      	mov	r2, r3
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <RecevieAck+0xe4>)
 8000660:	f008 f8f4 	bl	800884c <iprintf>


	return receive;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	461a      	mov	r2, r3
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	cb03      	ldmia	r3!, {r0, r1}
 800066e:	6010      	str	r0, [r2, #0]
 8000670:	6051      	str	r1, [r2, #4]
}
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000190 	.word	0x20000190
 8000680:	08009618 	.word	0x08009618
 8000684:	20000234 	.word	0x20000234
 8000688:	08009628 	.word	0x08009628
 800068c:	40020c00 	.word	0x40020c00
 8000690:	20000188 	.word	0x20000188
 8000694:	08009638 	.word	0x08009638
 8000698:	0800964c 	.word	0x0800964c
 800069c:	08009650 	.word	0x08009650

080006a0 <calculate_checksum>:

uint8_t calculate_checksum(Packet pkt)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	463b      	mov	r3, r7
 80006a8:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t checksum =pkt.command;
 80006ac:	787b      	ldrb	r3, [r7, #1]
 80006ae:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 4; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e009      	b.n	80006ca <calculate_checksum+0x2a>
    {
        checksum = pkt.parameter[i] ^ checksum; // CheckSum is calculated using XOR
 80006b6:	1cba      	adds	r2, r7, #2
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4413      	add	r3, r2
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	4053      	eors	r3, r2
 80006c2:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 4; i++)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	ddf2      	ble.n	80006b6 <calculate_checksum+0x16>
    }
    return checksum;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <Open_Fingerprint_Module>:

void Open_Fingerprint_Module(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
    Packet open_cmd = {.command = OPEN, .parameter = {0}};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	707b      	strb	r3, [r7, #1]
    send_command(open_cmd);
 80006f0:	463b      	mov	r3, r7
 80006f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f6:	f7ff ff39 	bl	800056c <send_command>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <Is_Finger_Pressed>:
    Packet led_cmd = {.command = LED_CONTROL, .parameter = {state}, 0, 0xF5};
    send_command(led_cmd);
}

uint8_t Is_Finger_Pressed(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
    Packet is_press_cmd = {.command = IS_FINGER_PRESS, .parameter = {0}};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	23b5      	movs	r3, #181	; 0xb5
 8000714:	727b      	strb	r3, [r7, #9]
    send_command(is_press_cmd);
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800071e:	f7ff ff25 	bl	800056c <send_command>

    Packet response = RecevieAck();
 8000722:	463b      	mov	r3, r7
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff47 	bl	80005b8 <RecevieAck>
    return response.parameter[0];
 800072a:	78bb      	ldrb	r3, [r7, #2]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Enroll_Fingerprint>:

uint8_t Enroll_Fingerprint(uint8_t ID)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	printf("Enrol FingerPrint\r\n");
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <Enroll_Fingerprint+0x4c>)
 8000740:	f008 f8ea 	bl	8008918 <puts>
    Packet enroll_cmd = {.command = ENROLL, .parameter = {0, ID}};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	2301      	movs	r3, #1
 8000750:	747b      	strb	r3, [r7, #17]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	74fb      	strb	r3, [r7, #19]
    send_command(enroll_cmd);
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800075e:	f7ff ff05 	bl	800056c <send_command>

    HAL_Delay(1000);
 8000762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000766:	f000 fdf3 	bl	8001350 <HAL_Delay>

    Packet receive;
    receive = RecevieAck();
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff22 	bl	80005b8 <RecevieAck>

    return receive.parameter[0];
 8000774:	7abb      	ldrb	r3, [r7, #10]

}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08009658 	.word	0x08009658

08000784 <Delete_Fingerprint_ID>:

void Delete_Fingerprint_ID(uint8_t ID)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    Packet delete_cmd = {.command = DELETE_ID, .parameter = {ID}};
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	2304      	movs	r3, #4
 800079a:	727b      	strb	r3, [r7, #9]
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	72bb      	strb	r3, [r7, #10]
    send_command(delete_cmd);
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007a8:	f7ff fee0 	bl	800056c <send_command>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Delete_All_Fingerprints>:

void Delete_All_Fingerprints(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
    Packet delete_all_cmd = {.command =DELETE_ALL, .parameter = {0}};
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	2305      	movs	r3, #5
 80007c6:	727b      	strb	r3, [r7, #9]
    send_command(delete_all_cmd);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d0:	f7ff fecc 	bl	800056c <send_command>

    RecevieAck();
 80007d4:	463b      	mov	r3, r7
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff feee 	bl	80005b8 <RecevieAck>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <Identify_Fingerprint>:
    Packet response = RecevieAck();
	return response.parameter[1];
}

uint8_t Identify_Fingerprint(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
	uint16_t counter = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	82fb      	strh	r3, [r7, #22]

	// wait for the finger to be pressed
	while(++counter<300 && Is_Finger_Pressed() == 0);
 80007ee:	bf00      	nop
 80007f0:	8afb      	ldrh	r3, [r7, #22]
 80007f2:	3301      	adds	r3, #1
 80007f4:	82fb      	strh	r3, [r7, #22]
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007fc:	d204      	bcs.n	8000808 <Identify_Fingerprint+0x24>
 80007fe:	f7ff ff80 	bl	8000702 <Is_Finger_Pressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f3      	beq.n	80007f0 <Identify_Fingerprint+0xc>

	if(counter > 300)
 8000808:	8afb      	ldrh	r3, [r7, #22]
 800080a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800080e:	d901      	bls.n	8000814 <Identify_Fingerprint+0x30>
	{
		return 0;
 8000810:	2300      	movs	r3, #0
 8000812:	e016      	b.n	8000842 <Identify_Fingerprint+0x5e>
	}

	Is_Finger_Pressed();
 8000814:	f7ff ff75 	bl	8000702 <Is_Finger_Pressed>

    Packet identify_cmd = {.command =IDENTIFY, .parameter = {0}};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	230c      	movs	r3, #12
 8000824:	737b      	strb	r3, [r7, #13]
    send_command(identify_cmd);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800082e:	f7ff fe9d 	bl	800056c <send_command>

    Packet response = RecevieAck();
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff febf 	bl	80005b8 <RecevieAck>
    operation = NO_ACTION;
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <Identify_Fingerprint+0x68>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	return response.parameter[1];
 8000840:	79fb      	ldrb	r3, [r7, #7]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000027c 	.word	0x2000027c

08000850 <Get_EntryID>:

uint8_t Get_EntryID(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
    Packet get_entry_id_cmd = {.command =GET_ENTRY_ID, .parameter = {0}};
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	230d      	movs	r3, #13
 8000862:	727b      	strb	r3, [r7, #9]
    send_command(get_entry_id_cmd);
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800086c:	f7ff fe7e 	bl	800056c <send_command>
    HAL_Delay(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f000 fd6c 	bl	8001350 <HAL_Delay>
    Packet response = RecevieAck();
 8000878:	463b      	mov	r3, r7
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe9c 	bl	80005b8 <RecevieAck>
    printf("Return %x %x\r\n", response.parameter[0], response.parameter[1]);
 8000880:	78bb      	ldrb	r3, [r7, #2]
 8000882:	4619      	mov	r1, r3
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	461a      	mov	r2, r3
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <Get_EntryID+0x48>)
 800088a:	f007 ffdf 	bl	800884c <iprintf>
	return response.parameter[1];
 800088e:	78fb      	ldrb	r3, [r7, #3]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	0800966c 	.word	0x0800966c

0800089c <Enroll_Cancel>:

void Enroll_Cancel(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
    Packet enroll_cancel_cmd = {.command =ENROLL_CANCEL, .parameter = {0}};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	2392      	movs	r3, #146	; 0x92
 80008ac:	707b      	strb	r3, [r7, #1]
    enroll_cancel_cmd.checksum = calculate_checksum(enroll_cancel_cmd); // Ensure the checksum is correctly calculated
 80008ae:	463b      	mov	r3, r7
 80008b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008b4:	f7ff fef4 	bl	80006a0 <calculate_checksum>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71bb      	strb	r3, [r7, #6]
    send_command(enroll_cancel_cmd);
 80008bc:	463b      	mov	r3, r7
 80008be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008c2:	f7ff fe53 	bl	800056c <send_command>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 fcca 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f824 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f8f4 	bl	8000ac8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008e0:	f007 fa4a 	bl	8007d78 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80008e4:	f000 f89c 	bl	8000a20 <MX_UART4_Init>
  MX_UART5_Init();
 80008e8:	f000 f8c4 	bl	8000a74 <MX_UART5_Init>
  MX_RNG_Init();
 80008ec:	f000 f884 	bl	80009f8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  Open_Fingerprint_Module();
 80008f0:	f7ff fef5 	bl	80006de <Open_Fingerprint_Module>
  HAL_UART_Receive_IT(&huart5, (uint8_t*)&data, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	4907      	ldr	r1, [pc, #28]	; (8000914 <main+0x44>)
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <main+0x48>)
 80008fa:	f003 f896 	bl	8003a2a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  printf("Operation = %d\r\n", operation);
	  Operations[operation]();
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <main+0x4c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <main+0x50>)
 8000906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090a:	4798      	blx	r3
	  HAL_Delay(50);
 800090c:	2032      	movs	r0, #50	; 0x32
 800090e:	f000 fd1f 	bl	8001350 <HAL_Delay>
	  Operations[operation]();
 8000912:	e7f4      	b.n	80008fe <main+0x2e>
 8000914:	20000234 	.word	0x20000234
 8000918:	200001ec 	.word	0x200001ec
 800091c:	2000027c 	.word	0x2000027c
 8000920:	08009778 	.word	0x08009778

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	; 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f008 f8d0 	bl	8008ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <SystemClock_Config+0xcc>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <SystemClock_Config+0xd0>)
 800096e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000998:	23a8      	movs	r3, #168	; 0xa8
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a0:	2307      	movs	r3, #7
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 faa1 	bl	8002ef0 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b4:	f000 f944 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2105      	movs	r1, #5
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fd02 	bl	80033e0 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009e2:	f000 f92d 	bl	8000c40 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	; 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_RNG_Init+0x20>)
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <MX_RNG_Init+0x24>)
 8000a00:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_RNG_Init+0x20>)
 8000a04:	f002 ff0c 	bl	8003820 <HAL_RNG_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000a0e:	f000 f917 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000194 	.word	0x20000194
 8000a1c:	50060800 	.word	0x50060800

08000a20 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_UART4_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_UART4_Init+0x4c>)
 8000a58:	f002 ff0c 	bl	8003874 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f8ed 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001a4 	.word	0x200001a4
 8000a70:	40004c00 	.word	0x40004c00

08000a74 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MX_UART5_Init+0x50>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_UART5_Init+0x4c>)
 8000aac:	f002 fee2 	bl	8003874 <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ab6:	f000 f8c3 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001ec 	.word	0x200001ec
 8000ac4:	40005000 	.word	0x40005000

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a25      	ldr	r2, [pc, #148]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_GPIO_Init+0xd4>)
 8000b56:	f000 ff5f 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b6e:	f000 fdb7 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_GPIO_Init+0xd4>)
 8000b8c:	f000 fda8 	bl	80016e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <_write>:

/*
 * To redirect write to uart4
 */
int _write(int file, char *ptr, int len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
#ifdef DEBUG //this is defined if we are using DEBUG build configuration
	HAL_UART_Transmit(&huart5, (uint8_t*)ptr, len, 100);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	2364      	movs	r3, #100	; 0x64
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <_write+0x24>)
 8000bba:	f002 feab 	bl	8003914 <HAL_UART_Transmit>
	return len;
 8000bbe:	687b      	ldr	r3, [r7, #4]
#else //if not defined don't send any data
	return 0;
#endif
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200001ec 	.word	0x200001ec

08000bcc <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(receive_flag == 8)
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_UART_RxCpltCallback+0x64>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d102      	bne.n	8000be2 <HAL_UART_RxCpltCallback+0x16>
	{
		receive_flag = 0;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_UART_RxCpltCallback+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
	}
//	printf("In interrupt %d %x\r\n", receive_flag, data);
	HAL_UART_Receive_IT(huart, (uint8_t*)&data, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	4913      	ldr	r1, [pc, #76]	; (8000c34 <HAL_UART_RxCpltCallback+0x68>)
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f002 ff1f 	bl	8003a2a <HAL_UART_Receive_IT>
	if((receive_flag == 0 || receive_flag == 7) && data!=0xF5)
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_UART_RxCpltCallback+0x64>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_UART_RxCpltCallback+0x30>
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_UART_RxCpltCallback+0x64>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b07      	cmp	r3, #7
 8000bfa:	d109      	bne.n	8000c10 <HAL_UART_RxCpltCallback+0x44>
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_UART_RxCpltCallback+0x68>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2bf5      	cmp	r3, #245	; 0xf5
 8000c02:	d005      	beq.n	8000c10 <HAL_UART_RxCpltCallback+0x44>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <HAL_UART_RxCpltCallback+0x6c>)
 8000c0a:	f000 ff1e 	bl	8001a4a <HAL_GPIO_TogglePin>
		return;
 8000c0e:	e00c      	b.n	8000c2a <HAL_UART_RxCpltCallback+0x5e>
	}

	receive_buff[receive_flag] = data;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HAL_UART_RxCpltCallback+0x64>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <HAL_UART_RxCpltCallback+0x68>)
 8000c18:	7819      	ldrb	r1, [r3, #0]
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_UART_RxCpltCallback+0x70>)
 8000c1c:	5499      	strb	r1, [r3, r2]
	receive_flag += 1;
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <HAL_UART_RxCpltCallback+0x64>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_UART_RxCpltCallback+0x64>)
 8000c28:	701a      	strb	r2, [r3, #0]
}
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000190 	.word	0x20000190
 8000c34:	20000234 	.word	0x20000234
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	20000188 	.word	0x20000188

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_RNG_MspInit+0x3c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_RNG_MspInit+0x40>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_RNG_MspInit+0x40>)
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	6353      	str	r3, [r2, #52]	; 0x34
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_RNG_MspInit+0x40>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	50060800 	.word	0x50060800
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a46      	ldr	r2, [pc, #280]	; (8000e18 <HAL_UART_MspInit+0x138>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12d      	bne.n	8000d5e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a3d      	ldr	r2, [pc, #244]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4832      	ldr	r0, [pc, #200]	; (8000e20 <HAL_UART_MspInit+0x140>)
 8000d58:	f000 fcc2 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d5c:	e057      	b.n	8000e0e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==UART5)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <HAL_UART_MspInit+0x144>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d152      	bne.n	8000e0e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a2a      	ldr	r2, [pc, #168]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_UART_MspInit+0x13c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0x140>)
 8000dda:	f000 fc81 	bl	80016e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dde:	2304      	movs	r3, #4
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dee:	2308      	movs	r3, #8
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <HAL_UART_MspInit+0x148>)
 8000dfa:	f000 fc71 	bl	80016e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2035      	movs	r0, #53	; 0x35
 8000e04:	f000 fba3 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e08:	2035      	movs	r0, #53	; 0x35
 8000e0a:	f000 fbbc 	bl	8001586 <HAL_NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3730      	adds	r7, #48	; 0x30
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004c00 	.word	0x40004c00
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40005000 	.word	0x40005000
 8000e28:	40020c00 	.word	0x40020c00

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 fa4a 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <UART5_IRQHandler+0x10>)
 8000e86:	f002 fdf5 	bl	8003a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001ec 	.word	0x200001ec

08000e94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <OTG_FS_IRQHandler+0x10>)
 8000e9a:	f000 ff34 	bl	8001d06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000764 	.word	0x20000764

08000ea8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00a      	b.n	8000ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eba:	f3af 8000 	nop.w
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	b2ca      	uxtb	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf0      	blt.n	8000eba <_read+0x12>
	}

return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_isatty>:

int _isatty(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f007 fdfa 	bl	8008b74 <__errno>
 8000f80:	4603      	mov	r3, r0
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20020000 	.word	0x20020000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	20000238 	.word	0x20000238
 8000fb4:	20000df0 	.word	0x20000df0

08000fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <Send_to_Host>:

/*
 * Send the report to Host device
 */
static inline void Send_to_Host(Report report)
{
 8000fdc:	b084      	sub	sp, #16
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	f107 0c08 	add.w	ip, r7, #8
 8000fe6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	send_report((uint8_t*)&report, sizeof(Report));
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	f107 0008 	add.w	r0, r7, #8
 8000ff0:	f006 ff3a 	bl	8007e68 <send_report>
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ffc:	b004      	add	sp, #16
 8000ffe:	4770      	bx	lr

08001000 <no_action>:

/*
 * Don't do any action and wait for change of state of 'operation'
 */
void no_action()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	printf("In no operation\r\n");
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <no_action+0x18>)
 8001006:	f007 fc87 	bl	8008918 <puts>
	HAL_Delay(300);
 800100a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800100e:	f000 f99f 	bl	8001350 <HAL_Delay>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	08009690 	.word	0x08009690

0800101c <Encode_String>:

void Encode_String()
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b09e      	sub	sp, #120	; 0x78
 8001020:	af0c      	add	r7, sp, #48	; 0x30
	Report string_report = { .report_id = ENCODE_STRING};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2240      	movs	r2, #64	; 0x40
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f007 fd55 	bl	8008ad8 <memset>
 800102e:	2301      	movs	r3, #1
 8001030:	713b      	strb	r3, [r7, #4]
	printf("Handle_Signed_String\r\n");
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <Encode_String+0x74>)
 8001034:	f007 fc70 	bl	8008918 <puts>
	for(int i=0; i<19; ++i)
 8001038:	2300      	movs	r3, #0
 800103a:	647b      	str	r3, [r7, #68]	; 0x44
 800103c:	e00e      	b.n	800105c <Encode_String+0x40>
	{
		string_report.data[i] = STRING[i]+KEY;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <Encode_String+0x78>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	330a      	adds	r3, #10
 800104a:	b2d9      	uxtb	r1, r3
 800104c:	1dba      	adds	r2, r7, #6
 800104e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001050:	4413      	add	r3, r2
 8001052:	460a      	mov	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<19; ++i)
 8001056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001058:	3301      	adds	r3, #1
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
 800105c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800105e:	2b12      	cmp	r3, #18
 8001060:	dded      	ble.n	800103e <Encode_String+0x22>
	}
	Send_to_Host(string_report);
 8001062:	466d      	mov	r5, sp
 8001064:	f107 0414 	add.w	r4, r7, #20
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001070:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001074:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107c:	f7ff ffae 	bl	8000fdc <Send_to_Host>
	operation = NO_ACTION;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <Encode_String+0x7c>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	3748      	adds	r7, #72	; 0x48
 800108a:	46bd      	mov	sp, r7
 800108c:	bdb0      	pop	{r4, r5, r7, pc}
 800108e:	bf00      	nop
 8001090:	080096a4 	.word	0x080096a4
 8001094:	20000004 	.word	0x20000004
 8001098:	2000027c 	.word	0x2000027c

0800109c <HandleFingerprint>:

/*
 * To handle FingerPrint COMMANDs
 */
void HandleFingerprint()
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b09c      	sub	sp, #112	; 0x70
 80010a0:	af0c      	add	r7, sp, #48	; 0x30
	printf("Inside HandleFingerprint %d %x\r\n", IN_.parameter, IN_.data[0]);
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <HandleFingerprint+0xec>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <HandleFingerprint+0xec>)
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4837      	ldr	r0, [pc, #220]	; (800118c <HandleFingerprint+0xf0>)
 80010b0:	f007 fbcc 	bl	800884c <iprintf>
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	Report Out=  {.report_id = IN_.report_id, .parameter = IN_.parameter, .data = {0}};
 80010b4:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HandleFingerprint+0xec>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	703b      	strb	r3, [r7, #0]
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <HandleFingerprint+0xec>)
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	707b      	strb	r3, [r7, #1]
 80010c0:	4a33      	ldr	r2, [pc, #204]	; (8001190 <HandleFingerprint+0xf4>)
 80010c2:	1cbb      	adds	r3, r7, #2
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	801a      	strh	r2, [r3, #0]
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	223c      	movs	r2, #60	; 0x3c
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 fd02 	bl	8008ad8 <memset>

	switch(IN_.parameter)
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HandleFingerprint+0xec>)
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	3b02      	subs	r3, #2
 80010da:	2b05      	cmp	r3, #5
 80010dc:	d831      	bhi.n	8001142 <HandleFingerprint+0xa6>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <HandleFingerprint+0x48>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	080010fd 	.word	0x080010fd
 80010e8:	08001107 	.word	0x08001107
 80010ec:	08001111 	.word	0x08001111
 80010f0:	0800112b 	.word	0x0800112b
 80010f4:	08001131 	.word	0x08001131
 80010f8:	0800113d 	.word	0x0800113d
	{
	case F_IDENTITFY:
		Out.data[0] = Identify_Fingerprint();
 80010fc:	f7ff fb72 	bl	80007e4 <Identify_Fingerprint>
 8001100:	4603      	mov	r3, r0
 8001102:	70bb      	strb	r3, [r7, #2]
		break;
 8001104:	e01d      	b.n	8001142 <HandleFingerprint+0xa6>
	case F_NEWID:
		Out.data[0] = Get_EntryID();
 8001106:	f7ff fba3 	bl	8000850 <Get_EntryID>
 800110a:	4603      	mov	r3, r0
 800110c:	70bb      	strb	r3, [r7, #2]
		break;
 800110e:	e018      	b.n	8001142 <HandleFingerprint+0xa6>
	case F_ENROLL:
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001110:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001114:	481f      	ldr	r0, [pc, #124]	; (8001194 <HandleFingerprint+0xf8>)
 8001116:	f000 fc98 	bl	8001a4a <HAL_GPIO_TogglePin>
		Out.data[0] = Enroll_Fingerprint(IN_.data[0]);
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HandleFingerprint+0xec>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb08 	bl	8000734 <Enroll_Fingerprint>
 8001124:	4603      	mov	r3, r0
 8001126:	70bb      	strb	r3, [r7, #2]
		break;
 8001128:	e00b      	b.n	8001142 <HandleFingerprint+0xa6>
	case F_ENROLL_C:
		Enroll_Cancel();
 800112a:	f7ff fbb7 	bl	800089c <Enroll_Cancel>
		break;
 800112e:	e008      	b.n	8001142 <HandleFingerprint+0xa6>
	case F_DELETE:
		Delete_Fingerprint_ID(IN_.data[0]);
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HandleFingerprint+0xec>)
 8001132:	789b      	ldrb	r3, [r3, #2]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fb25 	bl	8000784 <Delete_Fingerprint_ID>
		break;
 800113a:	e002      	b.n	8001142 <HandleFingerprint+0xa6>
	case F_DEL_ALL:
		Delete_All_Fingerprints();
 800113c:	f7ff fb3a 	bl	80007b4 <Delete_All_Fingerprints>
		break;
 8001140:	bf00      	nop
	case HOST_TO_DEV:
	case DEV_TO_HOST:
	}
	Send_to_Host(Out);
 8001142:	466d      	mov	r5, sp
 8001144:	f107 0410 	add.w	r4, r7, #16
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001150:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001154:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001158:	463b      	mov	r3, r7
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	f7ff ff3e 	bl	8000fdc <Send_to_Host>
	printf("%x %x \r\n",Out.parameter, Out.data[0]);
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	4619      	mov	r1, r3
 8001164:	78bb      	ldrb	r3, [r7, #2]
 8001166:	461a      	mov	r2, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <HandleFingerprint+0xfc>)
 800116a:	f007 fb6f 	bl	800884c <iprintf>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001172:	4808      	ldr	r0, [pc, #32]	; (8001194 <HandleFingerprint+0xf8>)
 8001174:	f000 fc69 	bl	8001a4a <HAL_GPIO_TogglePin>
	operation = NO_ACTION;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HandleFingerprint+0x100>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	3740      	adds	r7, #64	; 0x40
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	2000023c 	.word	0x2000023c
 800118c:	080096bc 	.word	0x080096bc
 8001190:	080096ec 	.word	0x080096ec
 8001194:	40020c00 	.word	0x40020c00
 8001198:	080096e0 	.word	0x080096e0
 800119c:	2000027c 	.word	0x2000027c

080011a0 <Send_Status>:

/*
 * Send status of device to HOST
 */
void Send_Status()
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b09e      	sub	sp, #120	; 0x78
 80011a4:	af0c      	add	r7, sp, #48	; 0x30
	printf("Inside Send_Status\r\n");
 80011a6:	481a      	ldr	r0, [pc, #104]	; (8001210 <Send_Status+0x70>)
 80011a8:	f007 fbb6 	bl	8008918 <puts>
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	Report report = { .report_id = STATUS_CHECK, .data = "Co"};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2240      	movs	r2, #64	; 0x40
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 fc90 	bl	8008ad8 <memset>
 80011b8:	2303      	movs	r3, #3
 80011ba:	713b      	strb	r3, [r7, #4]
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <Send_Status+0x74>)
 80011be:	1dbb      	adds	r3, r7, #6
 80011c0:	8811      	ldrh	r1, [r2, #0]
 80011c2:	7892      	ldrb	r2, [r2, #2]
 80011c4:	8019      	strh	r1, [r3, #0]
 80011c6:	709a      	strb	r2, [r3, #2]
 80011c8:	f107 0309 	add.w	r3, r7, #9
 80011cc:	223b      	movs	r2, #59	; 0x3b
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f007 fc81 	bl	8008ad8 <memset>
	uint16_t i = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	while(i<20)
 80011dc:	e00e      	b.n	80011fc <Send_Status+0x5c>
		Send_to_Host(report);
 80011de:	466d      	mov	r5, sp
 80011e0:	f107 0414 	add.w	r4, r7, #20
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f8:	f7ff fef0 	bl	8000fdc <Send_to_Host>
	while(i<20)
 80011fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001200:	2b13      	cmp	r3, #19
 8001202:	d9ec      	bls.n	80011de <Send_Status+0x3e>
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3748      	adds	r7, #72	; 0x48
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}
 800120e:	bf00      	nop
 8001210:	080096f0 	.word	0x080096f0
 8001214:	08009704 	.word	0x08009704

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800121c:	f7ff fecc 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001222:	490d      	ldr	r1, [pc, #52]	; (8001258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001238:	4c0a      	ldr	r4, [pc, #40]	; (8001264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f007 fc9b 	bl	8008b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff fb41 	bl	80008d0 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 800125c:	080097cc 	.word	0x080097cc
  ldr r2, =_sbss
 8001260:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001264:	20000dec 	.word	0x20000dec

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f94f 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fcd4 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f967 	bl	80015a2 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f92f 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000280 	.word	0x20000280

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000280 	.word	0x20000280

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000000c 	.word	0x2000000c

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff3e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff31 	bl	80013fc <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa2 	bl	80014f4 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff feb6 	bl	8001338 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d008      	beq.n	80015ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e052      	b.n	8001692 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0216 	bic.w	r2, r2, #22
 80015fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800160a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d103      	bne.n	800161c <HAL_DMA_Abort+0x62>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0208 	bic.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163c:	e013      	b.n	8001666 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800163e:	f7ff fe7b 	bl	8001338 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b05      	cmp	r3, #5
 800164a:	d90c      	bls.n	8001666 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e015      	b.n	8001692 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e4      	bne.n	800163e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d004      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e00c      	b.n	80016d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2205      	movs	r2, #5
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e16b      	b.n	80019d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 815a 	bne.w	80019ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	2b02      	cmp	r3, #2
 8001730:	d130      	bne.n	8001794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80b4 	beq.w	80019ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b60      	ldr	r3, [pc, #384]	; (80019ec <HAL_GPIO_Init+0x30c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a5f      	ldr	r2, [pc, #380]	; (80019ec <HAL_GPIO_Init+0x30c>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_GPIO_Init+0x30c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a5b      	ldr	r2, [pc, #364]	; (80019f0 <HAL_GPIO_Init+0x310>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_GPIO_Init+0x314>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d02b      	beq.n	8001906 <HAL_GPIO_Init+0x226>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x318>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d025      	beq.n	8001902 <HAL_GPIO_Init+0x222>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a50      	ldr	r2, [pc, #320]	; (80019fc <HAL_GPIO_Init+0x31c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01f      	beq.n	80018fe <HAL_GPIO_Init+0x21e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4f      	ldr	r2, [pc, #316]	; (8001a00 <HAL_GPIO_Init+0x320>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0x21a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <HAL_GPIO_Init+0x324>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0x216>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x328>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00d      	beq.n	80018f2 <HAL_GPIO_Init+0x212>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_GPIO_Init+0x32c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x20e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <HAL_GPIO_Init+0x330>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_GPIO_Init+0x20a>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00e      	b.n	8001908 <HAL_GPIO_Init+0x228>
 80018ea:	2308      	movs	r3, #8
 80018ec:	e00c      	b.n	8001908 <HAL_GPIO_Init+0x228>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e00a      	b.n	8001908 <HAL_GPIO_Init+0x228>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x228>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x228>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x228>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x228>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x228>
 8001906:	2300      	movs	r3, #0
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x310>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_GPIO_Init+0x334>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194a:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <HAL_GPIO_Init+0x334>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_GPIO_Init+0x334>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_GPIO_Init+0x334>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <HAL_GPIO_Init+0x334>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_GPIO_Init+0x334>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_GPIO_Init+0x334>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c8:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <HAL_GPIO_Init+0x334>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	f67f ae90 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40021400 	.word	0x40021400
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40021c00 	.word	0x40021c00
 8001a14:	40013c00 	.word	0x40013c00

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a34:	e003      	b.n	8001a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5c:	887a      	ldrh	r2, [r7, #2]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	041a      	lsls	r2, r3, #16
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af02      	add	r7, sp, #8
 8001a84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e101      	b.n	8001c94 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f006 fafc 	bl	80080a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001abe:	d102      	bne.n	8001ac6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 f83f 	bl	8004b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7c1a      	ldrb	r2, [r3, #16]
 8001ad8:	f88d 2000 	strb.w	r2, [sp]
 8001adc:	3304      	adds	r3, #4
 8001ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae0:	f002 ff1e 	bl	8004920 <USB_CoreInit>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0ce      	b.n	8001c94 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 f837 	bl	8004b70 <USB_SetCurrentMode>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0bf      	b.n	8001c94 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e04a      	b.n	8001bb0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3315      	adds	r3, #21
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3314      	adds	r3, #20
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	b298      	uxth	r0, r3
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	332e      	adds	r3, #46	; 0x2e
 8001b56:	4602      	mov	r2, r0
 8001b58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3318      	adds	r3, #24
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	331c      	adds	r3, #28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	3320      	adds	r3, #32
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3324      	adds	r3, #36	; 0x24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	3301      	adds	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	791b      	ldrb	r3, [r3, #4]
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3af      	bcc.n	8001b1a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e044      	b.n	8001c4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	791b      	ldrb	r3, [r3, #4]
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d3b5      	bcc.n	8001bc0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7c1a      	ldrb	r2, [r3, #16]
 8001c5c:	f88d 2000 	strb.w	r2, [sp]
 8001c60:	3304      	adds	r3, #4
 8001c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c64:	f002 ffd0 	bl	8004c08 <USB_DevInit>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00c      	b.n	8001c94 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 f814 	bl	8005cba <USB_DevDisconnect>

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_PCD_Start+0x1c>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e022      	b.n	8001cfe <HAL_PCD_Start+0x62>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 ff21 	bl	8004b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 ffc2 	bl	8005c78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d06:	b590      	push	{r4, r7, lr}
 8001d08:	b08d      	sub	sp, #52	; 0x34
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f004 f880 	bl	8005e22 <USB_GetMode>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 848c 	bne.w	8002642 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 ffe4 	bl	8005cfc <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8482 	beq.w	8002640 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 ffd1 	bl	8005cfc <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d107      	bne.n	8001d74 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f002 0202 	and.w	r2, r2, #2
 8001d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 ffbf 	bl	8005cfc <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d161      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0210 	bic.w	r2, r2, #16
 8001d96:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	0c5b      	lsrs	r3, r3, #17
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d124      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d035      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	6a38      	ldr	r0, [r7, #32]
 8001de4:	f003 fdf6 	bl	80059d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001df4:	441a      	add	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e06:	441a      	add	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	e016      	b.n	8001e3c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	0c5b      	lsrs	r3, r3, #17
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d110      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e20:	2208      	movs	r2, #8
 8001e22:	4619      	mov	r1, r3
 8001e24:	6a38      	ldr	r0, [r7, #32]
 8001e26:	f003 fdd5 	bl	80059d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e36:	441a      	add	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0210 	orr.w	r2, r2, #16
 8001e4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 ff53 	bl	8005cfc <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e60:	f040 80a7 	bne.w	8001fb2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 ff58 	bl	8005d22 <USB_ReadDevAllOutEpInterrupt>
 8001e72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e74:	e099      	b.n	8001faa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 808e 	beq.w	8001f9e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 ff7c 	bl	8005d8a <USB_ReadDevOutEPInterrupt>
 8001e92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2301      	movs	r3, #1
 8001eae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fe8a 	bl	8002bcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 ff60 	bl	8002d9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d030      	beq.n	8001f64 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d109      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f20:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	78db      	ldrb	r3, [r3, #3]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2200      	movs	r2, #0
 8001f44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f006 f9bf 	bl	80082d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2302      	movs	r3, #2
 8001f62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f47f af62 	bne.w	8001e76 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fea0 	bl	8005cfc <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fc6:	f040 80db 	bne.w	8002180 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fec1 	bl	8005d56 <USB_ReadDevAllInEpInterrupt>
 8001fd4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fda:	e0cd      	b.n	8002178 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80c2 	beq.w	800216c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fee7 	bl	8005dc6 <USB_ReadDevInEPInterrupt>
 8001ff8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d057      	beq.n	80020b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	2201      	movs	r2, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	69f9      	ldr	r1, [r7, #28]
 8002020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002024:	4013      	ands	r3, r2
 8002026:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002034:	461a      	mov	r2, r3
 8002036:	2301      	movs	r3, #1
 8002038:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	799b      	ldrb	r3, [r3, #6]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d132      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3320      	adds	r3, #32
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4403      	add	r3, r0
 8002062:	331c      	adds	r3, #28
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4419      	add	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4403      	add	r3, r0
 8002076:	3320      	adds	r3, #32
 8002078:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d113      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x3a2>
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3324      	adds	r3, #36	; 0x24
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80020a0:	461a      	mov	r2, r3
 80020a2:	2101      	movs	r1, #1
 80020a4:	f003 feee 	bl	8005e84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	4619      	mov	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f006 f889 	bl	80081c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ca:	461a      	mov	r2, r3
 80020cc:	2308      	movs	r3, #8
 80020ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e6:	461a      	mov	r2, r3
 80020e8:	2310      	movs	r3, #16
 80020ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002102:	461a      	mov	r2, r3
 8002104:	2340      	movs	r3, #64	; 0x40
 8002106:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d023      	beq.n	800215a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002114:	6a38      	ldr	r0, [r7, #32]
 8002116:	f002 fedb 	bl	8004ed0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	3310      	adds	r3, #16
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	78db      	ldrb	r3, [r3, #3]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4619      	mov	r1, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f006 f8d6 	bl	80082f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002154:	461a      	mov	r2, r3
 8002156:	2302      	movs	r3, #2
 8002158:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fca3 	bl	8002ab2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3301      	adds	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f af2e 	bne.w	8001fdc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fdb9 	bl	8005cfc <USB_ReadInterrupts>
 800218a:	4603      	mov	r3, r0
 800218c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002194:	d122      	bne.n	80021dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021bc:	2100      	movs	r1, #0
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fe8a 	bl	8002ed8 <HAL_PCDEx_LPM_Callback>
 80021c4:	e002      	b.n	80021cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f006 f874 	bl	80082b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fd8b 	bl	8005cfc <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f0:	d112      	bne.n	8002218 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d102      	bne.n	8002208 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f006 f830 	bl	8008268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002216:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fd6d 	bl	8005cfc <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	f040 80b7 	bne.w	800239e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2110      	movs	r1, #16
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fe40 	bl	8004ed0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002254:	e046      	b.n	80022e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002262:	461a      	mov	r2, r3
 8002264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002268:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227a:	0151      	lsls	r1, r2, #5
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	440a      	add	r2, r1
 8002280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002288:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800229c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	0151      	lsls	r1, r2, #5
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	440a      	add	r2, r1
 80022b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ce:	0151      	lsls	r1, r2, #5
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	440a      	add	r2, r1
 80022d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	3301      	adds	r3, #1
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	791b      	ldrb	r3, [r3, #4]
 80022e8:	461a      	mov	r2, r3
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d3b2      	bcc.n	8002256 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002302:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7bdb      	ldrb	r3, [r3, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d016      	beq.n	800233a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231c:	f043 030b 	orr.w	r3, r3, #11
 8002320:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002332:	f043 030b 	orr.w	r3, r3, #11
 8002336:	6453      	str	r3, [r2, #68]	; 0x44
 8002338:	e015      	b.n	8002366 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800234c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002350:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002360:	f043 030b 	orr.w	r3, r3, #11
 8002364:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002374:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002378:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002388:	461a      	mov	r2, r3
 800238a:	f003 fd7b 	bl	8005e84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800239c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fcaa 	bl	8005cfc <USB_ReadInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	d123      	bne.n	80023fc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 fd40 	bl	8005e3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 fdfd 	bl	8004fc2 <USB_GetDevSpeed>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681c      	ldr	r4, [r3, #0]
 80023d4:	f001 f9f0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80023d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023de:	461a      	mov	r2, r3
 80023e0:	4620      	mov	r0, r4
 80023e2:	f002 fb01 	bl	80049e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f005 ff15 	bl	8008216 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fc7b 	bl	8005cfc <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b08      	cmp	r3, #8
 800240e:	d10a      	bne.n	8002426 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f005 fef2 	bl	80081fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f002 0208 	and.w	r2, r2, #8
 8002424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fc66 	bl	8005cfc <USB_ReadInterrupts>
 8002430:	4603      	mov	r3, r0
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b80      	cmp	r3, #128	; 0x80
 8002438:	d123      	bne.n	8002482 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002446:	2301      	movs	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	e014      	b.n	8002476 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 faf0 	bl	8002a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	3301      	adds	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	791b      	ldrb	r3, [r3, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	4293      	cmp	r3, r2
 8002480:	d3e4      	bcc.n	800244c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 fc38 	bl	8005cfc <USB_ReadInterrupts>
 800248c:	4603      	mov	r3, r0
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002496:	d13c      	bne.n	8002512 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002498:	2301      	movs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
 800249c:	e02b      	b.n	80024f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3318      	adds	r3, #24
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d115      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da12      	bge.n	80024f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3317      	adds	r3, #23
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fab0 	bl	8002a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3301      	adds	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	4293      	cmp	r3, r2
 8002500:	d3cd      	bcc.n	800249e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fbf0 	bl	8005cfc <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002526:	d156      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002528:	2301      	movs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
 800252c:	e045      	b.n	80025ba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12e      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002556:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	da2b      	bge.n	80025b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002568:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800256c:	429a      	cmp	r2, r3
 800256e:	d121      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b0:	6053      	str	r3, [r2, #4]
            break;
 80025b2:	e008      	b.n	80025c6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	3301      	adds	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	791b      	ldrb	r3, [r3, #4]
 80025be:	461a      	mov	r2, r3
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d3b3      	bcc.n	800252e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fb8e 	bl	8005cfc <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d10a      	bne.n	8002602 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f005 fe93 	bl	8008318 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fb78 	bl	8005cfc <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d115      	bne.n	8002642 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f005 fe83 	bl	8008334 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e000      	b.n	8002642 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002640:	bf00      	nop
    }
  }
}
 8002642:	3734      	adds	r7, #52	; 0x34
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}

08002648 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_PCD_SetAddress+0x1a>
 800265e:	2302      	movs	r3, #2
 8002660:	e012      	b.n	8002688 <HAL_PCD_SetAddress+0x40>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fad7 	bl	8005c2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	70fb      	strb	r3, [r7, #3]
 80026a2:	460b      	mov	r3, r1
 80026a4:	803b      	strh	r3, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da0f      	bge.n	80026d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 020f 	and.w	r2, r3, #15
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	3310      	adds	r3, #16
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	705a      	strb	r2, [r3, #1]
 80026d4:	e00f      	b.n	80026f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002702:	883a      	ldrh	r2, [r7, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	78ba      	ldrb	r2, [r7, #2]
 800270c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002720:	78bb      	ldrb	r3, [r7, #2]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d102      	bne.n	800272c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_PCD_EP_Open+0xaa>
 8002736:	2302      	movs	r3, #2
 8002738:	e00e      	b.n	8002758 <HAL_PCD_EP_Open+0xc8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fc5f 	bl	800500c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002756:	7afb      	ldrb	r3, [r7, #11]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800276c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002770:	2b00      	cmp	r3, #0
 8002772:	da0f      	bge.n	8002794 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 020f 	and.w	r2, r3, #15
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	3310      	adds	r3, #16
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	3304      	adds	r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	705a      	strb	r2, [r3, #1]
 8002792:	e00f      	b.n	80027b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_PCD_EP_Close+0x6e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00e      	b.n	80027ec <HAL_PCD_EP_Close+0x8c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fc9d 	bl	800511c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	460b      	mov	r3, r1
 8002802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	f003 020f 	and.w	r2, r3, #15
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2200      	movs	r2, #0
 8002834:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	b2da      	uxtb	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	799b      	ldrb	r3, [r3, #6]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	799b      	ldrb	r3, [r3, #6]
 8002858:	461a      	mov	r2, r3
 800285a:	6979      	ldr	r1, [r7, #20]
 800285c:	f002 fd3a 	bl	80052d4 <USB_EPStartXfer>

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	460b      	mov	r3, r1
 8002878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800287a:	7afb      	ldrb	r3, [r7, #11]
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	3310      	adds	r3, #16
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	3304      	adds	r3, #4
 8002890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	799b      	ldrb	r3, [r3, #6]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	799b      	ldrb	r3, [r3, #6]
 80028cc:	461a      	mov	r2, r3
 80028ce:	6979      	ldr	r1, [r7, #20]
 80028d0:	f002 fd00 	bl	80052d4 <USB_EPStartXfer>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	7912      	ldrb	r2, [r2, #4]
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e04f      	b.n	800299c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002900:	2b00      	cmp	r3, #0
 8002902:	da0f      	bge.n	8002924 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	3310      	adds	r3, #16
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	3304      	adds	r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	705a      	strb	r2, [r3, #1]
 8002922:	e00d      	b.n	8002940 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	3304      	adds	r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_PCD_EP_SetStall+0x82>
 800295c:	2302      	movs	r3, #2
 800295e:	e01d      	b.n	800299c <HAL_PCD_EP_SetStall+0xbe>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	4618      	mov	r0, r3
 8002970:	f003 f888 	bl	8005a84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7999      	ldrb	r1, [r3, #6]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800298c:	461a      	mov	r2, r3
 800298e:	f003 fa79 	bl	8005e84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	7912      	ldrb	r2, [r2, #4]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e042      	b.n	8002a48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da0f      	bge.n	80029ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3310      	adds	r3, #16
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	705a      	strb	r2, [r3, #1]
 80029e8:	e00f      	b.n	8002a0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 020f 	and.w	r2, r3, #15
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_EP_ClrStall+0x86>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e00e      	b.n	8002a48 <HAL_PCD_EP_ClrStall+0xa4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 f891 	bl	8005b60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da0c      	bge.n	8002a7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3310      	adds	r3, #16
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e00c      	b.n	8002a98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 feb0 	bl	8005804 <USB_EPStopXfer>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b08a      	sub	sp, #40	; 0x28
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d901      	bls.n	8002aea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06b      	b.n	8002bc2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d902      	bls.n	8002b06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3303      	adds	r3, #3
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b0e:	e02a      	b.n	8002b66 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d902      	bls.n	8002b2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3303      	adds	r3, #3
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68d9      	ldr	r1, [r3, #12]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4603      	mov	r3, r0
 8002b48:	6978      	ldr	r0, [r7, #20]
 8002b4a:	f002 ff05 	bl	8005958 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	441a      	add	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d809      	bhi.n	8002b90 <PCD_WriteEmptyTxFifo+0xde>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d203      	bcs.n	8002b90 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1bf      	bne.n	8002b10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d811      	bhi.n	8002bc0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	6939      	ldr	r1, [r7, #16]
 8002bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	333c      	adds	r3, #60	; 0x3c
 8002be4:	3304      	adds	r3, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	799b      	ldrb	r3, [r3, #6]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d17b      	bne.n	8002cfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4a61      	ldr	r2, [pc, #388]	; (8002d94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	f240 80b9 	bls.w	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80b3 	beq.w	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c34:	6093      	str	r3, [r2, #8]
 8002c36:	e0a7      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2320      	movs	r3, #32
 8002c52:	6093      	str	r3, [r2, #8]
 8002c54:	e098      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 8093 	bne.w	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d90f      	bls.n	8002c8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c80:	461a      	mov	r2, r3
 8002c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c86:	6093      	str	r3, [r2, #8]
 8002c88:	e07e      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	0159      	lsls	r1, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	1ad2      	subs	r2, r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d114      	bne.n	8002cec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	f003 f8d4 	bl	8005e84 <USB_EP0_OutStart>
 8002cdc:	e006      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	441a      	add	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f005 fa4c 	bl	8008190 <HAL_PCD_DataOutStageCallback>
 8002cf8:	e046      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d124      	bne.n	8002d4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d1e:	6093      	str	r3, [r2, #8]
 8002d20:	e032      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f005 fa23 	bl	8008190 <HAL_PCD_DataOutStageCallback>
 8002d4a:	e01d      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d74:	461a      	mov	r2, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	f003 f884 	bl	8005e84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f005 fa04 	bl	8008190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	4f54300a 	.word	0x4f54300a
 8002d98:	4f54310a 	.word	0x4f54310a

08002d9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	333c      	adds	r3, #60	; 0x3c
 8002db4:	3304      	adds	r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d90e      	bls.n	8002df0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f005 f9bb 	bl	800816c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d90c      	bls.n	8002e18 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	799b      	ldrb	r3, [r3, #6]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e10:	461a      	mov	r2, r3
 8002e12:	2101      	movs	r1, #1
 8002e14:	f003 f836 	bl	8005e84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	4f54300a 	.word	0x4f54300a

08002e28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
 8002e34:	4613      	mov	r3, r2
 8002e36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d107      	bne.n	8002e56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e46:	883b      	ldrh	r3, [r7, #0]
 8002e48:	0419      	lsls	r1, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	e028      	b.n	8002ea8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e00d      	b.n	8002e86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	3340      	adds	r3, #64	; 0x40
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	3301      	adds	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d3ec      	bcc.n	8002e6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e90:	883b      	ldrh	r3, [r7, #0]
 8002e92:	0418      	lsls	r0, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4302      	orrs	r2, r0
 8002ea0:	3340      	adds	r3, #64	; 0x40
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e267      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d075      	beq.n	8002ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0e:	4b88      	ldr	r3, [pc, #544]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b85      	ldr	r3, [pc, #532]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b82      	ldr	r3, [pc, #520]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b7e      	ldr	r3, [pc, #504]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d157      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e242      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x74>
 8002f56:	4b76      	ldr	r3, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a75      	ldr	r2, [pc, #468]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b70      	ldr	r3, [pc, #448]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6f      	ldr	r2, [pc, #444]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6c      	ldr	r2, [pc, #432]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f88:	4b69      	ldr	r3, [pc, #420]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a68      	ldr	r2, [pc, #416]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe f9c6 	bl	8001338 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe f9c2 	bl	8001338 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e207      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f9b2 	bl	8001338 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe f9ae 	bl	8001338 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1f3      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b51      	ldr	r3, [pc, #324]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003006:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b44      	ldr	r3, [pc, #272]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1c7      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4937      	ldr	r1, [pc, #220]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_OscConfig+0x244>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe f967 	bl	8001338 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe f963 	bl	8001338 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1a8      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4925      	ldr	r1, [pc, #148]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_OscConfig+0x244>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe f946 	bl	8001338 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe f942 	bl	8001338 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e187      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d036      	beq.n	8003148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0x248>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe f926 	bl	8001338 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fe f922 	bl	8001338 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e167      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x200>
 800310e:	e01b      	b.n	8003148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_OscConfig+0x248>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fe f90f 	bl	8001338 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	e00e      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311e:	f7fe f90b 	bl	8001338 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d907      	bls.n	800313c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e150      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
 8003130:	40023800 	.word	0x40023800
 8003134:	42470000 	.word	0x42470000
 8003138:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ea      	bne.n	800311e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8097 	beq.w	8003284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b81      	ldr	r3, [pc, #516]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a7c      	ldr	r2, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b7a      	ldr	r3, [pc, #488]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b77      	ldr	r3, [pc, #476]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003192:	4b74      	ldr	r3, [pc, #464]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a73      	ldr	r2, [pc, #460]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fe f8cb 	bl	8001338 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a6:	f7fe f8c7 	bl	8001338 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e10c      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x2ea>
 80031cc:	4b64      	ldr	r3, [pc, #400]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	e01c      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x30c>
 80031e2:	4b5f      	ldr	r3, [pc, #380]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a5e      	ldr	r2, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a5b      	ldr	r2, [pc, #364]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031fc:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a54      	ldr	r2, [pc, #336]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 0304 	bic.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe f88c 	bl	8001338 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe f888 	bl	8001338 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0cb      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <HAL_RCC_OscConfig+0x334>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fe f876 	bl	8001338 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fe f872 	bl	8001338 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0b5      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003266:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ee      	bne.n	8003250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a1 	beq.w	80033d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800328e:	4b34      	ldr	r3, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b08      	cmp	r3, #8
 8003298:	d05c      	beq.n	8003354 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d141      	bne.n	8003326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe f846 	bl	8001338 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe f842 	bl	8001338 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e087      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	491b      	ldr	r1, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe f81b 	bl	8001338 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe f817 	bl	8001338 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e05c      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x416>
 8003324:	e054      	b.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe f804 	bl	8001338 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe f800 	bl	8001338 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e045      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
 8003352:	e03d      	b.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e038      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000
 8003368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x4ec>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d028      	beq.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d121      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d11a      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d111      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0cc      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b68      	ldr	r3, [pc, #416]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d90c      	bls.n	800341c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b8      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a58      	ldr	r2, [pc, #352]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800343e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b50      	ldr	r3, [pc, #320]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	494d      	ldr	r1, [pc, #308]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d044      	beq.n	8003500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d119      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d003      	beq.n	800349e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ae:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e067      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4934      	ldr	r1, [pc, #208]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d0:	f7fd ff32 	bl	8001338 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d8:	f7fd ff2e 	bl	8001338 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e04f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 020c 	and.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1eb      	bne.n	80034d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d20c      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e032      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4916      	ldr	r1, [pc, #88]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003566:	f000 f821 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490a      	ldr	r1, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fe92 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023c00 	.word	0x40023c00
 800359c:	40023800 	.word	0x40023800
 80035a0:	08009760 	.word	0x08009760
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000008 	.word	0x20000008

080035ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b0:	b094      	sub	sp, #80	; 0x50
 80035b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	647b      	str	r3, [r7, #68]	; 0x44
 80035b8:	2300      	movs	r3, #0
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035bc:	2300      	movs	r3, #0
 80035be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c4:	4b79      	ldr	r3, [pc, #484]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d00d      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x40>
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	f200 80e1 	bhi.w	8003798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x34>
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035de:	e0db      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b73      	ldr	r3, [pc, #460]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035e4:	e0db      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e6:	4b73      	ldr	r3, [pc, #460]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80035e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ea:	e0d8      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ec:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f6:	4b6d      	ldr	r3, [pc, #436]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003602:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	2200      	movs	r2, #0
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
 800360c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
 8003616:	2300      	movs	r3, #0
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
 800361a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	0159      	lsls	r1, r3, #5
 800362c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003630:	0150      	lsls	r0, r2, #5
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4621      	mov	r1, r4
 8003638:	1a51      	subs	r1, r2, r1
 800363a:	6139      	str	r1, [r7, #16]
 800363c:	4629      	mov	r1, r5
 800363e:	eb63 0301 	sbc.w	r3, r3, r1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003650:	4659      	mov	r1, fp
 8003652:	018b      	lsls	r3, r1, #6
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800365a:	4651      	mov	r1, sl
 800365c:	018a      	lsls	r2, r1, #6
 800365e:	4651      	mov	r1, sl
 8003660:	ebb2 0801 	subs.w	r8, r2, r1
 8003664:	4659      	mov	r1, fp
 8003666:	eb63 0901 	sbc.w	r9, r3, r1
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800367a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800367e:	4690      	mov	r8, r2
 8003680:	4699      	mov	r9, r3
 8003682:	4623      	mov	r3, r4
 8003684:	eb18 0303 	adds.w	r3, r8, r3
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	462b      	mov	r3, r5
 800368c:	eb49 0303 	adc.w	r3, r9, r3
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800369e:	4629      	mov	r1, r5
 80036a0:	024b      	lsls	r3, r1, #9
 80036a2:	4621      	mov	r1, r4
 80036a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036a8:	4621      	mov	r1, r4
 80036aa:	024a      	lsls	r2, r1, #9
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	2200      	movs	r2, #0
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036bc:	f7fc fdd8 	bl	8000270 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4613      	mov	r3, r2
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c8:	e058      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	099b      	lsrs	r3, r3, #6
 80036d0:	2200      	movs	r2, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	4611      	mov	r1, r2
 80036d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	2300      	movs	r3, #0
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036e4:	4642      	mov	r2, r8
 80036e6:	464b      	mov	r3, r9
 80036e8:	f04f 0000 	mov.w	r0, #0
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	0159      	lsls	r1, r3, #5
 80036f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f6:	0150      	lsls	r0, r2, #5
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4641      	mov	r1, r8
 80036fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003702:	4649      	mov	r1, r9
 8003704:	eb63 0b01 	sbc.w	fp, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800371c:	ebb2 040a 	subs.w	r4, r2, sl
 8003720:	eb63 050b 	sbc.w	r5, r3, fp
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	00eb      	lsls	r3, r5, #3
 800372e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003732:	00e2      	lsls	r2, r4, #3
 8003734:	4614      	mov	r4, r2
 8003736:	461d      	mov	r5, r3
 8003738:	4643      	mov	r3, r8
 800373a:	18e3      	adds	r3, r4, r3
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	464b      	mov	r3, r9
 8003740:	eb45 0303 	adc.w	r3, r5, r3
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003752:	4629      	mov	r1, r5
 8003754:	028b      	lsls	r3, r1, #10
 8003756:	4621      	mov	r1, r4
 8003758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800375c:	4621      	mov	r1, r4
 800375e:	028a      	lsls	r2, r1, #10
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003766:	2200      	movs	r2, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	61fa      	str	r2, [r7, #28]
 800376c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003770:	f7fc fd7e 	bl	8000270 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4613      	mov	r3, r2
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_GetSysClockFreq+0x200>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	3301      	adds	r3, #1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800378c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800378e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003796:	e002      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800379c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3750      	adds	r7, #80	; 0x50
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	007a1200 	.word	0x007a1200

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_GetHCLKFreq+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000000 	.word	0x20000000

080037d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08009770 	.word	0x08009770

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037fc:	f7ff ffdc 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0b5b      	lsrs	r3, r3, #13
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	08009770 	.word	0x08009770

08003820 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e01c      	b.n	800386c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	795b      	ldrb	r3, [r3, #5]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fa2a 	bl	8000c9c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0204 	orr.w	r2, r2, #4
 800385c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e042      	b.n	800390c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fa20 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	; 0x24
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fdbd 	bl	8004438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	d175      	bne.n	8003a20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_UART_Transmit+0x2c>
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e06e      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2221      	movs	r2, #33	; 0x21
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003952:	f7fd fcf1 	bl	8001338 <HAL_GetTick>
 8003956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d108      	bne.n	8003980 <HAL_UART_Transmit+0x6c>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003988:	e02e      	b.n	80039e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb1f 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03a      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	3302      	adds	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e007      	b.n	80039da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1cb      	bne.n	800398a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2140      	movs	r1, #64	; 0x40
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 faeb 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d112      	bne.n	8003a6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Receive_IT+0x26>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e00b      	b.n	8003a6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fb12 	bl	800408a <UART_Start_Receive_IT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	e000      	b.n	8003a6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b0ba      	sub	sp, #232	; 0xe8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_UART_IRQHandler+0x66>
 8003ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fbf2 	bl	80042bc <UART_Receive_IT>
      return;
 8003ad8:	e25b      	b.n	8003f92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80de 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x22c>
 8003ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80d1 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xae>
 8003b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xd2>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xf6>
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d011      	beq.n	8003b9a <HAL_UART_IRQHandler+0x126>
 8003b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f043 0208 	orr.w	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 81f2 	beq.w	8003f88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x14e>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fb7d 	bl	80042bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_UART_IRQHandler+0x17a>
 8003be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d04f      	beq.n	8003c8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa85 	bl	80040fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d141      	bne.n	8003c86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1d9      	bne.n	8003c02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d013      	beq.n	8003c7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	4a7e      	ldr	r2, [pc, #504]	; (8003e54 <HAL_UART_IRQHandler+0x3e0>)
 8003c5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fd19 	bl	800169a <HAL_DMA_Abort_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d016      	beq.n	8003c9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e00e      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f994 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	e00a      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f990 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	e006      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f98c 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c9a:	e175      	b.n	8003f88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	bf00      	nop
    return;
 8003c9e:	e173      	b.n	8003f88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 814f 	bne.w	8003f48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8148 	beq.w	8003f48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8141 	beq.w	8003f48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	f040 80b6 	bne.w	8003e58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8145 	beq.w	8003f8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	f080 813e 	bcs.w	8003f8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	f000 8088 	beq.w	8003e36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1d9      	bne.n	8003d26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e1      	bne.n	8003d72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3314      	adds	r3, #20
 8003dce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e3      	bne.n	8003dae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e06:	f023 0310 	bic.w	r3, r3, #16
 8003e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e18:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e3      	bne.n	8003df4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd fbc2 	bl	80015ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f8b7 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e52:	e09b      	b.n	8003f8c <HAL_UART_IRQHandler+0x518>
 8003e54:	080041c5 	.word	0x080041c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 808e 	beq.w	8003f90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8089 	beq.w	8003f90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ea2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ea4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e3      	bne.n	8003e7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3314      	adds	r3, #20
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eda:	633a      	str	r2, [r7, #48]	; 0x30
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e3      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0310 	bic.w	r3, r3, #16
 8003f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f20:	61fa      	str	r2, [r7, #28]
 8003f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e3      	bne.n	8003efc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f83d 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f46:	e023      	b.n	8003f90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_UART_IRQHandler+0x4f4>
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f943 	bl	80041ec <UART_Transmit_IT>
    return;
 8003f66:	e014      	b.n	8003f92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <HAL_UART_IRQHandler+0x51e>
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f983 	bl	800428c <UART_EndTransmit_IT>
    return;
 8003f86:	e004      	b.n	8003f92 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f88:	bf00      	nop
 8003f8a:	e002      	b.n	8003f92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f90:	bf00      	nop
  }
}
 8003f92:	37e8      	adds	r7, #232	; 0xe8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	e03b      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d037      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fd f9a1 	bl	8001338 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	6a3a      	ldr	r2, [r7, #32]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <UART_WaitOnFlagUntilTimeout+0x30>
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03a      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d023      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d020      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d01d      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b08      	cmp	r3, #8
 8004032:	d116      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f857 	bl	80040fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2208      	movs	r2, #8
 8004054:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00f      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0b4      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	4613      	mov	r3, r2
 8004096:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2222      	movs	r2, #34	; 0x22
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0220 	orr.w	r2, r2, #32
 80040ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040fe:	b480      	push	{r7}
 8004100:	b095      	sub	sp, #84	; 0x54
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004126:	643a      	str	r2, [r7, #64]	; 0x40
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800412c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e5      	bne.n	8004106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3314      	adds	r3, #20
 8004140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	61fb      	str	r3, [r7, #28]
   return(result);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800415a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	2b01      	cmp	r3, #1
 8004174:	d119      	bne.n	80041aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	60bb      	str	r3, [r7, #8]
   return(result);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0310 	bic.w	r3, r3, #16
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004196:	61ba      	str	r2, [r7, #24]
 8004198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	613b      	str	r3, [r7, #16]
   return(result);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e5      	bne.n	8004176 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041b8:	bf00      	nop
 80041ba:	3754      	adds	r7, #84	; 0x54
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff fee4 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b21      	cmp	r3, #33	; 0x21
 80041fe:	d13e      	bne.n	800427e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004208:	d114      	bne.n	8004234 <UART_Transmit_IT+0x48>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d110      	bne.n	8004234 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004226:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	1c9a      	adds	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]
 8004232:	e008      	b.n	8004246 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	1c59      	adds	r1, r3, #1
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6211      	str	r1, [r2, #32]
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29b      	uxth	r3, r3
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4619      	mov	r1, r3
 8004254:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004268:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004278:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fe73 	bl	8003f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b22      	cmp	r3, #34	; 0x22
 80042ce:	f040 80ae 	bne.w	800442e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d117      	bne.n	800430c <UART_Receive_IT+0x50>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d113      	bne.n	800430c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	1c9a      	adds	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
 800430a:	e026      	b.n	800435a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d007      	beq.n	8004330 <UART_Receive_IT+0x74>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <UART_Receive_IT+0x82>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	e008      	b.n	8004350 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434a:	b2da      	uxtb	r2, r3
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4619      	mov	r1, r3
 8004368:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800436a:	2b00      	cmp	r3, #0
 800436c:	d15d      	bne.n	800442a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0220 	bic.w	r2, r2, #32
 800437c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800438c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d135      	bne.n	8004420 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f023 0310 	bic.w	r3, r3, #16
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	623a      	str	r2, [r7, #32]
 80043dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	69f9      	ldr	r1, [r7, #28]
 80043e0:	6a3a      	ldr	r2, [r7, #32]
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e5      	bne.n	80043ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d10a      	bne.n	8004412 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fdd1 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
 800441e:	e002      	b.n	8004426 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc fbd3 	bl	8000bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e002      	b.n	8004430 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3730      	adds	r7, #48	; 0x30
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b0c0      	sub	sp, #256	; 0x100
 800443e:	af00      	add	r7, sp, #0
 8004440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	68d9      	ldr	r1, [r3, #12]
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	ea40 0301 	orr.w	r3, r0, r1
 8004460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004490:	f021 010c 	bic.w	r1, r1, #12
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800449e:	430b      	orrs	r3, r1
 80044a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b2:	6999      	ldr	r1, [r3, #24]
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	ea40 0301 	orr.w	r3, r0, r1
 80044be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b8f      	ldr	r3, [pc, #572]	; (8004704 <UART_SetConfig+0x2cc>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d005      	beq.n	80044d8 <UART_SetConfig+0xa0>
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <UART_SetConfig+0x2d0>)
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d104      	bne.n	80044e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff f98e 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80044dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044e0:	e003      	b.n	80044ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044e2:	f7ff f975 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 80044e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	f040 810c 	bne.w	8004710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	1891      	adds	r1, r2, r2
 8004510:	65b9      	str	r1, [r7, #88]	; 0x58
 8004512:	415b      	adcs	r3, r3
 8004514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800451a:	4621      	mov	r1, r4
 800451c:	eb12 0801 	adds.w	r8, r2, r1
 8004520:	4629      	mov	r1, r5
 8004522:	eb43 0901 	adc.w	r9, r3, r1
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800453a:	4690      	mov	r8, r2
 800453c:	4699      	mov	r9, r3
 800453e:	4623      	mov	r3, r4
 8004540:	eb18 0303 	adds.w	r3, r8, r3
 8004544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004548:	462b      	mov	r3, r5
 800454a:	eb49 0303 	adc.w	r3, r9, r3
 800454e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800455e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004566:	460b      	mov	r3, r1
 8004568:	18db      	adds	r3, r3, r3
 800456a:	653b      	str	r3, [r7, #80]	; 0x50
 800456c:	4613      	mov	r3, r2
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	657b      	str	r3, [r7, #84]	; 0x54
 8004574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800457c:	f7fb fe78 	bl	8000270 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4b61      	ldr	r3, [pc, #388]	; (800470c <UART_SetConfig+0x2d4>)
 8004586:	fba3 2302 	umull	r2, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	011c      	lsls	r4, r3, #4
 800458e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800459c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80045a8:	415b      	adcs	r3, r3
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045b0:	4641      	mov	r1, r8
 80045b2:	eb12 0a01 	adds.w	sl, r2, r1
 80045b6:	4649      	mov	r1, r9
 80045b8:	eb43 0b01 	adc.w	fp, r3, r1
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d0:	4692      	mov	sl, r2
 80045d2:	469b      	mov	fp, r3
 80045d4:	4643      	mov	r3, r8
 80045d6:	eb1a 0303 	adds.w	r3, sl, r3
 80045da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045de:	464b      	mov	r3, r9
 80045e0:	eb4b 0303 	adc.w	r3, fp, r3
 80045e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045fc:	460b      	mov	r3, r1
 80045fe:	18db      	adds	r3, r3, r3
 8004600:	643b      	str	r3, [r7, #64]	; 0x40
 8004602:	4613      	mov	r3, r2
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	647b      	str	r3, [r7, #68]	; 0x44
 800460a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800460e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004612:	f7fb fe2d 	bl	8000270 <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4611      	mov	r1, r2
 800461c:	4b3b      	ldr	r3, [pc, #236]	; (800470c <UART_SetConfig+0x2d4>)
 800461e:	fba3 2301 	umull	r2, r3, r3, r1
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2264      	movs	r2, #100	; 0x64
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	1acb      	subs	r3, r1, r3
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <UART_SetConfig+0x2d4>)
 8004634:	fba3 2302 	umull	r2, r3, r3, r2
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004640:	441c      	add	r4, r3
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800464c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	63b9      	str	r1, [r7, #56]	; 0x38
 800465c:	415b      	adcs	r3, r3
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004664:	4641      	mov	r1, r8
 8004666:	1851      	adds	r1, r2, r1
 8004668:	6339      	str	r1, [r7, #48]	; 0x30
 800466a:	4649      	mov	r1, r9
 800466c:	414b      	adcs	r3, r1
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800467c:	4659      	mov	r1, fp
 800467e:	00cb      	lsls	r3, r1, #3
 8004680:	4651      	mov	r1, sl
 8004682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004686:	4651      	mov	r1, sl
 8004688:	00ca      	lsls	r2, r1, #3
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	4603      	mov	r3, r0
 8004690:	4642      	mov	r2, r8
 8004692:	189b      	adds	r3, r3, r2
 8004694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004698:	464b      	mov	r3, r9
 800469a:	460a      	mov	r2, r1
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046b8:	460b      	mov	r3, r1
 80046ba:	18db      	adds	r3, r3, r3
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046be:	4613      	mov	r3, r2
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046ce:	f7fb fdcf 	bl	8000270 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <UART_SetConfig+0x2d4>)
 80046d8:	fba3 1302 	umull	r1, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	2164      	movs	r1, #100	; 0x64
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	3332      	adds	r3, #50	; 0x32
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <UART_SetConfig+0x2d4>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f003 0207 	and.w	r2, r3, #7
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4422      	add	r2, r4
 80046fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004700:	e106      	b.n	8004910 <UART_SetConfig+0x4d8>
 8004702:	bf00      	nop
 8004704:	40011000 	.word	0x40011000
 8004708:	40011400 	.word	0x40011400
 800470c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800471a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800471e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004722:	4642      	mov	r2, r8
 8004724:	464b      	mov	r3, r9
 8004726:	1891      	adds	r1, r2, r2
 8004728:	6239      	str	r1, [r7, #32]
 800472a:	415b      	adcs	r3, r3
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004732:	4641      	mov	r1, r8
 8004734:	1854      	adds	r4, r2, r1
 8004736:	4649      	mov	r1, r9
 8004738:	eb43 0501 	adc.w	r5, r3, r1
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	00eb      	lsls	r3, r5, #3
 8004746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474a:	00e2      	lsls	r2, r4, #3
 800474c:	4614      	mov	r4, r2
 800474e:	461d      	mov	r5, r3
 8004750:	4643      	mov	r3, r8
 8004752:	18e3      	adds	r3, r4, r3
 8004754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004758:	464b      	mov	r3, r9
 800475a:	eb45 0303 	adc.w	r3, r5, r3
 800475e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800476e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800477e:	4629      	mov	r1, r5
 8004780:	008b      	lsls	r3, r1, #2
 8004782:	4621      	mov	r1, r4
 8004784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004788:	4621      	mov	r1, r4
 800478a:	008a      	lsls	r2, r1, #2
 800478c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004790:	f7fb fd6e 	bl	8000270 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4b60      	ldr	r3, [pc, #384]	; (800491c <UART_SetConfig+0x4e4>)
 800479a:	fba3 2302 	umull	r2, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	011c      	lsls	r4, r3, #4
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	61b9      	str	r1, [r7, #24]
 80047bc:	415b      	adcs	r3, r3
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6139      	str	r1, [r7, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	67bb      	str	r3, [r7, #120]	; 0x78
 800480e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800481c:	4649      	mov	r1, r9
 800481e:	008b      	lsls	r3, r1, #2
 8004820:	4641      	mov	r1, r8
 8004822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004826:	4641      	mov	r1, r8
 8004828:	008a      	lsls	r2, r1, #2
 800482a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800482e:	f7fb fd1f 	bl	8000270 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4611      	mov	r1, r2
 8004838:	4b38      	ldr	r3, [pc, #224]	; (800491c <UART_SetConfig+0x4e4>)
 800483a:	fba3 2301 	umull	r2, r3, r3, r1
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	2264      	movs	r2, #100	; 0x64
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	1acb      	subs	r3, r1, r3
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	3332      	adds	r3, #50	; 0x32
 800484c:	4a33      	ldr	r2, [pc, #204]	; (800491c <UART_SetConfig+0x4e4>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	441c      	add	r4, r3
 800485a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485e:	2200      	movs	r2, #0
 8004860:	673b      	str	r3, [r7, #112]	; 0x70
 8004862:	677a      	str	r2, [r7, #116]	; 0x74
 8004864:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	1891      	adds	r1, r2, r2
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	415b      	adcs	r3, r3
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004878:	4641      	mov	r1, r8
 800487a:	1851      	adds	r1, r2, r1
 800487c:	6039      	str	r1, [r7, #0]
 800487e:	4649      	mov	r1, r9
 8004880:	414b      	adcs	r3, r1
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004890:	4659      	mov	r1, fp
 8004892:	00cb      	lsls	r3, r1, #3
 8004894:	4651      	mov	r1, sl
 8004896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489a:	4651      	mov	r1, sl
 800489c:	00ca      	lsls	r2, r1, #3
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	4642      	mov	r2, r8
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048aa:	464b      	mov	r3, r9
 80048ac:	460a      	mov	r2, r1
 80048ae:	eb42 0303 	adc.w	r3, r2, r3
 80048b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	663b      	str	r3, [r7, #96]	; 0x60
 80048be:	667a      	str	r2, [r7, #100]	; 0x64
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048cc:	4649      	mov	r1, r9
 80048ce:	008b      	lsls	r3, r1, #2
 80048d0:	4641      	mov	r1, r8
 80048d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d6:	4641      	mov	r1, r8
 80048d8:	008a      	lsls	r2, r1, #2
 80048da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048de:	f7fb fcc7 	bl	8000270 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <UART_SetConfig+0x4e4>)
 80048e8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	2164      	movs	r1, #100	; 0x64
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	3332      	adds	r3, #50	; 0x32
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <UART_SetConfig+0x4e4>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	f003 020f 	and.w	r2, r3, #15
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4422      	add	r2, r4
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004916:	46bd      	mov	sp, r7
 8004918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491c:	51eb851f 	.word	0x51eb851f

08004920 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004920:	b084      	sub	sp, #16
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	f107 001c 	add.w	r0, r7, #28
 800492e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004932:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004936:	2b01      	cmp	r3, #1
 8004938:	d123      	bne.n	8004982 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800494e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f001 fae2 	bl	8005f40 <USB_CoreReset>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e01b      	b.n	80049ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f001 fad6 	bl	8005f40 <USB_CoreReset>
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004998:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
 80049ac:	e005      	b.n	80049ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049ba:	7fbb      	ldrb	r3, [r7, #30]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10b      	bne.n	80049d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f043 0206 	orr.w	r2, r3, #6
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049e4:	b004      	add	sp, #16
 80049e6:	4770      	bx	lr

080049e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d165      	bne.n	8004ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a41      	ldr	r2, [pc, #260]	; (8004b04 <USB_SetTurnaroundTime+0x11c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d906      	bls.n	8004a12 <USB_SetTurnaroundTime+0x2a>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a40      	ldr	r2, [pc, #256]	; (8004b08 <USB_SetTurnaroundTime+0x120>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d202      	bcs.n	8004a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a0c:	230f      	movs	r3, #15
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e062      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4a3c      	ldr	r2, [pc, #240]	; (8004b08 <USB_SetTurnaroundTime+0x120>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d306      	bcc.n	8004a28 <USB_SetTurnaroundTime+0x40>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a3b      	ldr	r2, [pc, #236]	; (8004b0c <USB_SetTurnaroundTime+0x124>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d202      	bcs.n	8004a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a22:	230e      	movs	r3, #14
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e057      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <USB_SetTurnaroundTime+0x124>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d306      	bcc.n	8004a3e <USB_SetTurnaroundTime+0x56>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a37      	ldr	r2, [pc, #220]	; (8004b10 <USB_SetTurnaroundTime+0x128>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d202      	bcs.n	8004a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a38:	230d      	movs	r3, #13
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e04c      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4a33      	ldr	r2, [pc, #204]	; (8004b10 <USB_SetTurnaroundTime+0x128>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d306      	bcc.n	8004a54 <USB_SetTurnaroundTime+0x6c>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <USB_SetTurnaroundTime+0x12c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d802      	bhi.n	8004a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a4e:	230c      	movs	r3, #12
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e041      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <USB_SetTurnaroundTime+0x12c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d906      	bls.n	8004a6a <USB_SetTurnaroundTime+0x82>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4a2e      	ldr	r2, [pc, #184]	; (8004b18 <USB_SetTurnaroundTime+0x130>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d802      	bhi.n	8004a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a64:	230b      	movs	r3, #11
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e036      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <USB_SetTurnaroundTime+0x130>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d906      	bls.n	8004a80 <USB_SetTurnaroundTime+0x98>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <USB_SetTurnaroundTime+0x134>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d802      	bhi.n	8004a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a7a:	230a      	movs	r3, #10
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e02b      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a26      	ldr	r2, [pc, #152]	; (8004b1c <USB_SetTurnaroundTime+0x134>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d906      	bls.n	8004a96 <USB_SetTurnaroundTime+0xae>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <USB_SetTurnaroundTime+0x138>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d202      	bcs.n	8004a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a90:	2309      	movs	r3, #9
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e020      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <USB_SetTurnaroundTime+0x138>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d306      	bcc.n	8004aac <USB_SetTurnaroundTime+0xc4>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <USB_SetTurnaroundTime+0x13c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d802      	bhi.n	8004aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e015      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <USB_SetTurnaroundTime+0x13c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d906      	bls.n	8004ac2 <USB_SetTurnaroundTime+0xda>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <USB_SetTurnaroundTime+0x140>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d202      	bcs.n	8004ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004abc:	2307      	movs	r3, #7
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e00a      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e007      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ace:	2309      	movs	r3, #9
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e001      	b.n	8004ad8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ad4:	2309      	movs	r3, #9
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	00d8acbf 	.word	0x00d8acbf
 8004b08:	00e4e1c0 	.word	0x00e4e1c0
 8004b0c:	00f42400 	.word	0x00f42400
 8004b10:	01067380 	.word	0x01067380
 8004b14:	011a499f 	.word	0x011a499f
 8004b18:	01312cff 	.word	0x01312cff
 8004b1c:	014ca43f 	.word	0x014ca43f
 8004b20:	016e3600 	.word	0x016e3600
 8004b24:	01a6ab1f 	.word	0x01a6ab1f
 8004b28:	01e84800 	.word	0x01e84800

08004b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f043 0201 	orr.w	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d115      	bne.n	8004bbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b9e:	200a      	movs	r0, #10
 8004ba0:	f7fc fbd6 	bl	8001350 <HAL_Delay>
      ms += 10U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	330a      	adds	r3, #10
 8004ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f001 f939 	bl	8005e22 <USB_GetMode>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d01e      	beq.n	8004bf4 <USB_SetCurrentMode+0x84>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2bc7      	cmp	r3, #199	; 0xc7
 8004bba:	d9f0      	bls.n	8004b9e <USB_SetCurrentMode+0x2e>
 8004bbc:	e01a      	b.n	8004bf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d115      	bne.n	8004bf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bd0:	200a      	movs	r0, #10
 8004bd2:	f7fc fbbd 	bl	8001350 <HAL_Delay>
      ms += 10U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	330a      	adds	r3, #10
 8004bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f001 f920 	bl	8005e22 <USB_GetMode>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <USB_SetCurrentMode+0x84>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2bc7      	cmp	r3, #199	; 0xc7
 8004bec:	d9f0      	bls.n	8004bd0 <USB_SetCurrentMode+0x60>
 8004bee:	e001      	b.n	8004bf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e005      	b.n	8004c00 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2bc8      	cmp	r3, #200	; 0xc8
 8004bf8:	d101      	bne.n	8004bfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c08:	b084      	sub	sp, #16
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b086      	sub	sp, #24
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e009      	b.n	8004c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3340      	adds	r3, #64	; 0x40
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	2200      	movs	r2, #0
 8004c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0e      	cmp	r3, #14
 8004c40:	d9f2      	bls.n	8004c28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11c      	bne.n	8004c84 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
 8004c82:	e00b      	b.n	8004c9c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ca8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10d      	bne.n	8004ccc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f968 	bl	8004f90 <USB_SetDevSpeed>
 8004cc0:	e008      	b.n	8004cd4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f963 	bl	8004f90 <USB_SetDevSpeed>
 8004cca:	e003      	b.n	8004cd4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ccc:	2103      	movs	r1, #3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f95e 	bl	8004f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cd4:	2110      	movs	r1, #16
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8fa 	bl	8004ed0 <USB_FlushTxFifo>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f924 	bl	8004f34 <USB_FlushRxFifo>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d14:	461a      	mov	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	e043      	b.n	8004da8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d36:	d118      	bne.n	8004d6a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e013      	b.n	8004d7c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	461a      	mov	r2, r3
 8004d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e008      	b.n	8004d7c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	461a      	mov	r2, r3
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3301      	adds	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004dac:	461a      	mov	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d3b5      	bcc.n	8004d20 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	e043      	b.n	8004e42 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd0:	d118      	bne.n	8004e04 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	461a      	mov	r2, r3
 8004de6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	e013      	b.n	8004e16 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e008      	b.n	8004e16 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	461a      	mov	r2, r3
 8004e12:	2300      	movs	r3, #0
 8004e14:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	461a      	mov	r2, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e34:	461a      	mov	r2, r3
 8004e36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e46:	461a      	mov	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d3b5      	bcc.n	8004dba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e60:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e6e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f043 0210 	orr.w	r2, r3, #16
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <USB_DevInit+0x2c4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f043 0208 	orr.w	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ea4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d107      	bne.n	8004ebc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ec8:	b004      	add	sp, #16
 8004eca:	4770      	bx	lr
 8004ecc:	803c3800 	.word	0x803c3800

08004ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004eea:	d901      	bls.n	8004ef0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e01b      	b.n	8004f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	daf2      	bge.n	8004ede <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	019b      	lsls	r3, r3, #6
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f14:	d901      	bls.n	8004f1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e006      	b.n	8004f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d0f0      	beq.n	8004f08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f4c:	d901      	bls.n	8004f52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e018      	b.n	8004f84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	daf2      	bge.n	8004f40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2210      	movs	r2, #16
 8004f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f70:	d901      	bls.n	8004f76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e006      	b.n	8004f84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d0f0      	beq.n	8004f64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0306 	and.w	r3, r3, #6
 8004fda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
 8004fe6:	e00a      	b.n	8004ffe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d002      	beq.n	8004ff4 <USB_GetDevSpeed+0x32>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b06      	cmp	r3, #6
 8004ff2:	d102      	bne.n	8004ffa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
 8004ff8:	e001      	b.n	8004ffe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ffa:	230f      	movs	r3, #15
 8004ffc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d13a      	bne.n	800509e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	2101      	movs	r1, #1
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	b29b      	uxth	r3, r3
 8005040:	68f9      	ldr	r1, [r7, #12]
 8005042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005046:	4313      	orrs	r3, r2
 8005048:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d155      	bne.n	800510c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	791b      	ldrb	r3, [r3, #4]
 800507a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800507c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	059b      	lsls	r3, r3, #22
 8005082:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005084:	4313      	orrs	r3, r2
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e036      	b.n	800510c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	2101      	movs	r1, #1
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050bc:	4313      	orrs	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d11a      	bne.n	800510c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	791b      	ldrb	r3, [r3, #4]
 80050f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050f2:	430b      	orrs	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d161      	bne.n	80051fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514e:	d11f      	bne.n	8005190 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800516e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800518e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b0:	4013      	ands	r3, r2
 80051b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	2101      	movs	r1, #1
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d4:	4013      	ands	r3, r2
 80051d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	0159      	lsls	r1, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	440b      	add	r3, r1
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	4619      	mov	r1, r3
 80051f4:	4b35      	ldr	r3, [pc, #212]	; (80052cc <USB_DeactivateEndpoint+0x1b0>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
 80051fa:	e060      	b.n	80052be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005212:	d11f      	bne.n	8005254 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005232:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005252:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	43db      	mvns	r3, r3
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005274:	4013      	ands	r3, r2
 8005276:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	43db      	mvns	r3, r3
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005298:	4013      	ands	r3, r2
 800529a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	0159      	lsls	r1, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	4619      	mov	r1, r3
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <USB_DeactivateEndpoint+0x1b4>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	ec337800 	.word	0xec337800
 80052d0:	eff37800 	.word	0xeff37800

080052d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 817a 	bne.w	80055ea <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d132      	bne.n	8005364 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800531c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	0cdb      	lsrs	r3, r3, #19
 800535e:	04db      	lsls	r3, r3, #19
 8005360:	6113      	str	r3, [r2, #16]
 8005362:	e092      	b.n	800548a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	0cdb      	lsrs	r3, r3, #19
 8005380:	04db      	lsls	r3, r3, #19
 8005382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11a      	bne.n	80053e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d903      	bls.n	80053c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053e0:	6113      	str	r3, [r2, #16]
 80053e2:	e01b      	b.n	800541c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6919      	ldr	r1, [r3, #16]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	440b      	add	r3, r1
 80053fc:	1e59      	subs	r1, r3, #1
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	fbb1 f3f3 	udiv	r3, r1, r3
 8005406:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005408:	4ba2      	ldr	r3, [pc, #648]	; (8005694 <USB_EPStartXfer+0x3c0>)
 800540a:	400b      	ands	r3, r1
 800540c:	69b9      	ldr	r1, [r7, #24]
 800540e:	0148      	lsls	r0, r1, #5
 8005410:	69f9      	ldr	r1, [r7, #28]
 8005412:	4401      	add	r1, r0
 8005414:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005418:	4313      	orrs	r3, r2
 800541a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005432:	69b9      	ldr	r1, [r7, #24]
 8005434:	0148      	lsls	r0, r1, #5
 8005436:	69f9      	ldr	r1, [r7, #28]
 8005438:	4401      	add	r1, r0
 800543a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800543e:	4313      	orrs	r3, r2
 8005440:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d11f      	bne.n	800548a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005464:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005468:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005488:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d14b      	bne.n	8005528 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	461a      	mov	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	791b      	ldrb	r3, [r3, #4]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d128      	bne.n	8005506 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d110      	bne.n	80054e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e00f      	b.n	8005506 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e165      	b.n	80057f4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005546:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	791b      	ldrb	r3, [r3, #4]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d015      	beq.n	800557c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 814d 	beq.w	80057f4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	2101      	movs	r1, #1
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	69f9      	ldr	r1, [r7, #28]
 8005572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005576:	4313      	orrs	r3, r2
 8005578:	634b      	str	r3, [r1, #52]	; 0x34
 800557a:	e13b      	b.n	80057f4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d110      	bne.n	80055ae <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e00f      	b.n	80055ce <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	68d9      	ldr	r1, [r3, #12]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	b298      	uxth	r0, r3
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	4603      	mov	r3, r0
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f9b8 	bl	8005958 <USB_WritePacket>
 80055e8:	e104      	b.n	80057f4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005604:	0cdb      	lsrs	r3, r3, #19
 8005606:	04db      	lsls	r3, r3, #19
 8005608:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800562c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d131      	bne.n	8005698 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005662:	69b9      	ldr	r1, [r7, #24]
 8005664:	0148      	lsls	r0, r1, #5
 8005666:	69f9      	ldr	r1, [r7, #28]
 8005668:	4401      	add	r1, r0
 800566a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005690:	6113      	str	r3, [r2, #16]
 8005692:	e061      	b.n	8005758 <USB_EPStartXfer+0x484>
 8005694:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d123      	bne.n	80056e8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b6:	69b9      	ldr	r1, [r7, #24]
 80056b8:	0148      	lsls	r0, r1, #5
 80056ba:	69f9      	ldr	r1, [r7, #28]
 80056bc:	4401      	add	r1, r0
 80056be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056c2:	4313      	orrs	r3, r2
 80056c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056e4:	6113      	str	r3, [r2, #16]
 80056e6:	e037      	b.n	8005758 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	8afa      	ldrh	r2, [r7, #22]
 8005704:	fb03 f202 	mul.w	r2, r3, r2
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	8afb      	ldrh	r3, [r7, #22]
 800571c:	04d9      	lsls	r1, r3, #19
 800571e:	4b38      	ldr	r3, [pc, #224]	; (8005800 <USB_EPStartXfer+0x52c>)
 8005720:	400b      	ands	r3, r1
 8005722:	69b9      	ldr	r1, [r7, #24]
 8005724:	0148      	lsls	r0, r1, #5
 8005726:	69f9      	ldr	r1, [r7, #28]
 8005728:	4401      	add	r1, r0
 800572a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800572e:	4313      	orrs	r3, r2
 8005730:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005748:	69b9      	ldr	r1, [r7, #24]
 800574a:	0148      	lsls	r0, r1, #5
 800574c:	69f9      	ldr	r1, [r7, #28]
 800574e:	4401      	add	r1, r0
 8005750:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005754:	4313      	orrs	r3, r2
 8005756:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10d      	bne.n	800577a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	68d9      	ldr	r1, [r3, #12]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	460a      	mov	r2, r1
 8005778:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	791b      	ldrb	r3, [r3, #4]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d128      	bne.n	80057d4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d110      	bne.n	80057b4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e00f      	b.n	80057d4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	1ff80000 	.word	0x1ff80000

08005804 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d14a      	bne.n	80058b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800583a:	f040 8086 	bne.w	800594a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005860:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005884:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005892:	4293      	cmp	r3, r2
 8005894:	d902      	bls.n	800589c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
          break;
 800589a:	e056      	b.n	800594a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b4:	d0e7      	beq.n	8005886 <USB_EPStopXfer+0x82>
 80058b6:	e048      	b.n	800594a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d0:	d13b      	bne.n	800594a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005918:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3301      	adds	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f242 7210 	movw	r2, #10000	; 0x2710
 8005926:	4293      	cmp	r3, r2
 8005928:	d902      	bls.n	8005930 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	75fb      	strb	r3, [r7, #23]
          break;
 800592e:	e00c      	b.n	800594a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005948:	d0e7      	beq.n	800591a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005958:	b480      	push	{r7}
 800595a:	b089      	sub	sp, #36	; 0x24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	4611      	mov	r1, r2
 8005964:	461a      	mov	r2, r3
 8005966:	460b      	mov	r3, r1
 8005968:	71fb      	strb	r3, [r7, #7]
 800596a:	4613      	mov	r3, r2
 800596c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	d123      	bne.n	80059c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800597e:	88bb      	ldrh	r3, [r7, #4]
 8005980:	3303      	adds	r3, #3
 8005982:	089b      	lsrs	r3, r3, #2
 8005984:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	e018      	b.n	80059be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	031a      	lsls	r2, r3, #12
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005998:	461a      	mov	r2, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	3301      	adds	r3, #1
 80059a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	3301      	adds	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	3301      	adds	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d3e2      	bcc.n	800598c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3724      	adds	r7, #36	; 0x24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b08b      	sub	sp, #44	; 0x2c
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	e014      	b.n	8005a2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	3301      	adds	r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	3301      	adds	r3, #1
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	3301      	adds	r3, #1
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	3301      	adds	r3, #1
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d3e6      	bcc.n	8005a00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a32:	8bfb      	ldrh	r3, [r7, #30]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01e      	beq.n	8005a76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a42:	461a      	mov	r2, r3
 8005a44:	f107 0310 	add.w	r3, r7, #16
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	701a      	strb	r2, [r3, #0]
      i++;
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	3301      	adds	r3, #1
 8005a62:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	3301      	adds	r3, #1
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a6a:	8bfb      	ldrh	r3, [r7, #30]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a70:	8bfb      	ldrh	r3, [r7, #30]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ea      	bne.n	8005a4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	372c      	adds	r7, #44	; 0x2c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d12c      	bne.n	8005afa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	db12      	blt.n	8005ad8 <USB_EPSetStall+0x54>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00f      	beq.n	8005ad8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	e02b      	b.n	8005b52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	db12      	blt.n	8005b32 <USB_EPSetStall+0xae>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00f      	beq.n	8005b32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d128      	bne.n	8005bce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d003      	beq.n	8005bac <USB_EPClearStall+0x4c>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	791b      	ldrb	r3, [r3, #4]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d138      	bne.n	8005c1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e027      	b.n	8005c1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	791b      	ldrb	r3, [r3, #4]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d003      	beq.n	8005bfe <USB_EPClearStall+0x9e>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d10f      	bne.n	8005c1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c60:	68f9      	ldr	r1, [r7, #12]
 8005c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c66:	4313      	orrs	r3, r2
 8005c68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca6:	f023 0302 	bic.w	r3, r3, #2
 8005caa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cd4:	f023 0303 	bic.w	r3, r3, #3
 8005cd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce8:	f043 0302 	orr.w	r3, r3, #2
 8005cec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d14:	68fb      	ldr	r3, [r7, #12]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	0c1b      	lsrs	r3, r3, #16
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	4013      	ands	r3, r2
 8005d78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	b29b      	uxth	r3, r3
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005db8:	68bb      	ldr	r3, [r7, #8]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	fa22 f303 	lsr.w	r3, r2, r3
 8005df6:	01db      	lsls	r3, r3, #7
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4013      	ands	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e14:	68bb      	ldr	r3, [r7, #8]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e5c:	f023 0307 	bic.w	r3, r3, #7
 8005e60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	333c      	adds	r3, #60	; 0x3c
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4a26      	ldr	r2, [pc, #152]	; (8005f3c <USB_EP0_OutStart+0xb8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d90a      	bls.n	8005ebe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb8:	d101      	bne.n	8005ebe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e037      	b.n	8005f2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eec:	f043 0318 	orr.w	r3, r3, #24
 8005ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10f      	bne.n	8005f2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	4f54300a 	.word	0x4f54300a

08005f40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f58:	d901      	bls.n	8005f5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e01b      	b.n	8005f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	daf2      	bge.n	8005f4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f043 0201 	orr.w	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f82:	d901      	bls.n	8005f88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e006      	b.n	8005f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d0f0      	beq.n	8005f76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005fb0:	2054      	movs	r0, #84	; 0x54
 8005fb2:	f002 fb45 	bl	8008640 <USBD_static_malloc>
 8005fb6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	32b0      	adds	r2, #176	; 0xb0
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e08b      	b.n	80060ea <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	32b0      	adds	r2, #176	; 0xb0
 8005fdc:	68f9      	ldr	r1, [r7, #12]
 8005fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	32b0      	adds	r2, #176	; 0xb0
 8005fec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7c1b      	ldrb	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d11b      	bne.n	8006036 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ffe:	4b3d      	ldr	r3, [pc, #244]	; (80060f4 <USBD_CUSTOM_HID_Init+0x150>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	f003 020f 	and.w	r2, r3, #15
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	3326      	adds	r3, #38	; 0x26
 8006014:	2205      	movs	r2, #5
 8006016:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006018:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <USBD_CUSTOM_HID_Init+0x154>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 020f 	and.w	r2, r3, #15
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006030:	2205      	movs	r2, #5
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	e01a      	b.n	800606c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <USBD_CUSTOM_HID_Init+0x150>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3326      	adds	r3, #38	; 0x26
 800604c:	2205      	movs	r2, #5
 800604e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006050:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <USBD_CUSTOM_HID_Init+0x154>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006068:	2205      	movs	r2, #5
 800606a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <USBD_CUSTOM_HID_Init+0x150>)
 800606e:	7819      	ldrb	r1, [r3, #0]
 8006070:	2340      	movs	r3, #64	; 0x40
 8006072:	2203      	movs	r2, #3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f002 f9d2 	bl	800841e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800607a:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <USBD_CUSTOM_HID_Init+0x150>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 020f 	and.w	r2, r3, #15
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	3324      	adds	r3, #36	; 0x24
 8006090:	2201      	movs	r2, #1
 8006092:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006094:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <USBD_CUSTOM_HID_Init+0x154>)
 8006096:	7819      	ldrb	r1, [r3, #0]
 8006098:	2340      	movs	r3, #64	; 0x40
 800609a:	2203      	movs	r2, #3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f002 f9be 	bl	800841e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <USBD_CUSTOM_HID_Init+0x154>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 020f 	and.w	r2, r3, #15
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060ba:	2201      	movs	r2, #1
 80060bc:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	33b0      	adds	r3, #176	; 0xb0
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80060da:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <USBD_CUSTOM_HID_Init+0x154>)
 80060dc:	7819      	ldrb	r1, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	2340      	movs	r3, #64	; 0x40
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f002 fa8a 	bl	80085fc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000096 	.word	0x20000096
 80060f8:	20000097 	.word	0x20000097

080060fc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006108:	4b37      	ldr	r3, [pc, #220]	; (80061e8 <USBD_CUSTOM_HID_DeInit+0xec>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f002 f9ab 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006114:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	3324      	adds	r3, #36	; 0x24
 800612a:	2200      	movs	r2, #0
 800612c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800612e:	4b2e      	ldr	r3, [pc, #184]	; (80061e8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	f003 020f 	and.w	r2, r3, #15
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	3326      	adds	r3, #38	; 0x26
 8006144:	2200      	movs	r2, #0
 8006146:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006148:	4b28      	ldr	r3, [pc, #160]	; (80061ec <USBD_CUSTOM_HID_DeInit+0xf0>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f002 f98b 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006154:	4b25      	ldr	r3, [pc, #148]	; (80061ec <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 020f 	and.w	r2, r3, #15
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800616c:	2200      	movs	r2, #0
 800616e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006170:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006188:	2200      	movs	r2, #0
 800618a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	32b0      	adds	r2, #176	; 0xb0
 8006196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01f      	beq.n	80061de <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	33b0      	adds	r3, #176	; 0xb0
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	32b0      	adds	r2, #176	; 0xb0
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f002 fa4b 	bl	800865c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	32b0      	adds	r2, #176	; 0xb0
 80061d0:	2100      	movs	r1, #0
 80061d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000096 	.word	0x20000096
 80061ec:	20000097 	.word	0x20000097

080061f0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	32b0      	adds	r2, #176	; 0xb0
 8006204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006208:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006220:	2303      	movs	r3, #3
 8006222:	e0f8      	b.n	8006416 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800622c:	2b00      	cmp	r3, #0
 800622e:	d056      	beq.n	80062de <USBD_CUSTOM_HID_Setup+0xee>
 8006230:	2b20      	cmp	r3, #32
 8006232:	f040 80e8 	bne.w	8006406 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	3b02      	subs	r3, #2
 800623c:	2b09      	cmp	r3, #9
 800623e:	d846      	bhi.n	80062ce <USBD_CUSTOM_HID_Setup+0xde>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <USBD_CUSTOM_HID_Setup+0x58>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	080062a1 	.word	0x080062a1
 800624c:	0800627f 	.word	0x0800627f
 8006250:	080062cf 	.word	0x080062cf
 8006254:	080062cf 	.word	0x080062cf
 8006258:	080062cf 	.word	0x080062cf
 800625c:	080062cf 	.word	0x080062cf
 8006260:	080062cf 	.word	0x080062cf
 8006264:	080062b1 	.word	0x080062b1
 8006268:	0800628f 	.word	0x0800628f
 800626c:	08006271 	.word	0x08006271
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	885b      	ldrh	r3, [r3, #2]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800627c:	e02e      	b.n	80062dc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	3340      	adds	r3, #64	; 0x40
 8006282:	2201      	movs	r2, #1
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 fcf6 	bl	8007c78 <USBD_CtlSendData>
          break;
 800628c:	e026      	b.n	80062dc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	885b      	ldrh	r3, [r3, #2]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	b2db      	uxtb	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800629e:	e01d      	b.n	80062dc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3344      	adds	r3, #68	; 0x44
 80062a4:	2201      	movs	r2, #1
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 fce5 	bl	8007c78 <USBD_CtlSendData>
          break;
 80062ae:	e015      	b.n	80062dc <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2201      	movs	r2, #1
 80062b4:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80062b6:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	88db      	ldrh	r3, [r3, #6]
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	bf28      	it	cs
 80062c0:	2340      	movcs	r3, #64	; 0x40
 80062c2:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80062c4:	461a      	mov	r2, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fd02 	bl	8007cd0 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80062cc:	e006      	b.n	80062dc <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fc60 	bl	8007b96 <USBD_CtlError>
          ret = USBD_FAIL;
 80062d6:	2303      	movs	r3, #3
 80062d8:	75fb      	strb	r3, [r7, #23]
          break;
 80062da:	bf00      	nop
      }
      break;
 80062dc:	e09a      	b.n	8006414 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	785b      	ldrb	r3, [r3, #1]
 80062e2:	2b0b      	cmp	r3, #11
 80062e4:	f200 8086 	bhi.w	80063f4 <USBD_CUSTOM_HID_Setup+0x204>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <USBD_CUSTOM_HID_Setup+0x100>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	08006321 	.word	0x08006321
 80062f4:	08006403 	.word	0x08006403
 80062f8:	080063f5 	.word	0x080063f5
 80062fc:	080063f5 	.word	0x080063f5
 8006300:	080063f5 	.word	0x080063f5
 8006304:	080063f5 	.word	0x080063f5
 8006308:	0800634b 	.word	0x0800634b
 800630c:	080063f5 	.word	0x080063f5
 8006310:	080063f5 	.word	0x080063f5
 8006314:	080063f5 	.word	0x080063f5
 8006318:	080063a3 	.word	0x080063a3
 800631c:	080063cd 	.word	0x080063cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b03      	cmp	r3, #3
 800632a:	d107      	bne.n	800633c <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800632c:	f107 030e 	add.w	r3, r7, #14
 8006330:	2202      	movs	r2, #2
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fc9f 	bl	8007c78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800633a:	e063      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fc29 	bl	8007b96 <USBD_CtlError>
            ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	75fb      	strb	r3, [r7, #23]
          break;
 8006348:	e05c      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	885b      	ldrh	r3, [r3, #2]
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b22      	cmp	r3, #34	; 0x22
 8006354:	d110      	bne.n	8006378 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	88db      	ldrh	r3, [r3, #6]
 800635a:	2b15      	cmp	r3, #21
 800635c:	bf28      	it	cs
 800635e:	2315      	movcs	r3, #21
 8006360:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	33b0      	adds	r3, #176	; 0xb0
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	e00d      	b.n	8006394 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	885b      	ldrh	r3, [r3, #2]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b21      	cmp	r3, #33	; 0x21
 8006382:	d107      	bne.n	8006394 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006384:	4b26      	ldr	r3, [pc, #152]	; (8006420 <USBD_CUSTOM_HID_Setup+0x230>)
 8006386:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	88db      	ldrh	r3, [r3, #6]
 800638c:	2b09      	cmp	r3, #9
 800638e:	bf28      	it	cs
 8006390:	2309      	movcs	r3, #9
 8006392:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006394:	8bfb      	ldrh	r3, [r7, #30]
 8006396:	461a      	mov	r2, r3
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 fc6c 	bl	8007c78 <USBD_CtlSendData>
          break;
 80063a0:	e030      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d107      	bne.n	80063be <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3348      	adds	r3, #72	; 0x48
 80063b2:	2201      	movs	r2, #1
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fc5e 	bl	8007c78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063bc:	e022      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fbe8 	bl	8007b96 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c6:	2303      	movs	r3, #3
 80063c8:	75fb      	strb	r3, [r7, #23]
          break;
 80063ca:	e01b      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d106      	bne.n	80063e6 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	885b      	ldrh	r3, [r3, #2]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063e4:	e00e      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fbd4 	bl	8007b96 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ee:	2303      	movs	r3, #3
 80063f0:	75fb      	strb	r3, [r7, #23]
          break;
 80063f2:	e007      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fbcd 	bl	8007b96 <USBD_CtlError>
          ret = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	75fb      	strb	r3, [r7, #23]
          break;
 8006400:	e000      	b.n	8006404 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006402:	bf00      	nop
      }
      break;
 8006404:	e006      	b.n	8006414 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 fbc4 	bl	8007b96 <USBD_CtlError>
      ret = USBD_FAIL;
 800640e:	2303      	movs	r3, #3
 8006410:	75fb      	strb	r3, [r7, #23]
      break;
 8006412:	bf00      	nop
  }
  return (uint8_t)ret;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000080 	.word	0x20000080

08006424 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	32b0      	adds	r2, #176	; 0xb0
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006448:	2303      	movs	r3, #3
 800644a:	e019      	b.n	8006480 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b03      	cmp	r3, #3
 8006456:	d112      	bne.n	800647e <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <USBD_CUSTOM_HID_SendReport+0x64>)
 800646c:	7819      	ldrb	r1, [r3, #0]
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f002 f8a1 	bl	80085ba <USBD_LL_Transmit>
 8006478:	e001      	b.n	800647e <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000096 	.word	0x20000096

0800648c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006494:	2181      	movs	r1, #129	; 0x81
 8006496:	4815      	ldr	r0, [pc, #84]	; (80064ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006498:	f000 fd45 	bl	8006f26 <USBD_GetEpDesc>
 800649c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800649e:	2101      	movs	r1, #1
 80064a0:	4812      	ldr	r0, [pc, #72]	; (80064ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80064a2:	f000 fd40 	bl	8006f26 <USBD_GetEpDesc>
 80064a6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b6:	711a      	strb	r2, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2205      	movs	r2, #5
 80064c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d0:	711a      	strb	r2, [r3, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2205      	movs	r2, #5
 80064da:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2237      	movs	r2, #55	; 0x37
 80064e0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80064e2:	4b02      	ldr	r3, [pc, #8]	; (80064ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000048 	.word	0x20000048

080064f0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80064f8:	2181      	movs	r1, #129	; 0x81
 80064fa:	4815      	ldr	r0, [pc, #84]	; (8006550 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80064fc:	f000 fd13 	bl	8006f26 <USBD_GetEpDesc>
 8006500:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006502:	2101      	movs	r1, #1
 8006504:	4812      	ldr	r0, [pc, #72]	; (8006550 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006506:	f000 fd0e 	bl	8006f26 <USBD_GetEpDesc>
 800650a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800651a:	711a      	strb	r2, [r3, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2205      	movs	r2, #5
 8006524:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006534:	711a      	strb	r2, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2205      	movs	r2, #5
 800653e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2237      	movs	r2, #55	; 0x37
 8006544:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006546:	4b02      	ldr	r3, [pc, #8]	; (8006550 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000048 	.word	0x20000048

08006554 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800655c:	2181      	movs	r1, #129	; 0x81
 800655e:	4815      	ldr	r0, [pc, #84]	; (80065b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006560:	f000 fce1 	bl	8006f26 <USBD_GetEpDesc>
 8006564:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006566:	2101      	movs	r1, #1
 8006568:	4812      	ldr	r0, [pc, #72]	; (80065b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800656a:	f000 fcdc 	bl	8006f26 <USBD_GetEpDesc>
 800656e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657e:	711a      	strb	r2, [r3, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2205      	movs	r2, #5
 8006588:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006598:	711a      	strb	r2, [r3, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2205      	movs	r2, #5
 80065a2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2237      	movs	r2, #55	; 0x37
 80065a8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80065aa:	4b02      	ldr	r3, [pc, #8]	; (80065b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000048 	.word	0x20000048

080065b8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32b0      	adds	r2, #176	; 0xb0
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	; 0xb0
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	e037      	b.n	800667a <USBD_CUSTOM_HID_DataOut+0x92>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	32b0      	adds	r2, #176	; 0xb0
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	60fb      	str	r3, [r7, #12]

  operation = hhid->Report_buf[0];
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	4b19      	ldr	r3, [pc, #100]	; (8006684 <USBD_CUSTOM_HID_DataOut+0x9c>)
 8006620:	701a      	strb	r2, [r3, #0]

	if(operation!=NO_ACTION)
 8006622:	4b18      	ldr	r3, [pc, #96]	; (8006684 <USBD_CUSTOM_HID_DataOut+0x9c>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d017      	beq.n	800665a <USBD_CUSTOM_HID_DataOut+0x72>
	{
	  printf("Received on USB\r\n");
 800662a:	4817      	ldr	r0, [pc, #92]	; (8006688 <USBD_CUSTOM_HID_DataOut+0xa0>)
 800662c:	f002 f974 	bl	8008918 <puts>
	  IN_ = *(Report*) hhid->Report_buf;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a16      	ldr	r2, [pc, #88]	; (800668c <USBD_CUSTOM_HID_DataOut+0xa4>)
 8006634:	4610      	mov	r0, r2
 8006636:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800663a:	4602      	mov	r2, r0
 800663c:	4619      	mov	r1, r3
 800663e:	f8d1 c000 	ldr.w	ip, [r1]
 8006642:	684e      	ldr	r6, [r1, #4]
 8006644:	688d      	ldr	r5, [r1, #8]
 8006646:	68c9      	ldr	r1, [r1, #12]
 8006648:	f8c2 c000 	str.w	ip, [r2]
 800664c:	6056      	str	r6, [r2, #4]
 800664e:	6095      	str	r5, [r2, #8]
 8006650:	60d1      	str	r1, [r2, #12]
 8006652:	3310      	adds	r3, #16
 8006654:	3010      	adds	r0, #16
 8006656:	42a3      	cmp	r3, r4
 8006658:	d1ef      	bne.n	800663a <USBD_CUSTOM_HID_DataOut+0x52>
	}

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	33b0      	adds	r3, #176	; 0xb0
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	7810      	ldrb	r0, [r2, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	7852      	ldrb	r2, [r2, #1]
 8006674:	4611      	mov	r1, r2
 8006676:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006682:	bf00      	nop
 8006684:	2000027c 	.word	0x2000027c
 8006688:	08009708 	.word	0x08009708
 800668c:	2000023c 	.word	0x2000023c

08006690 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	32b0      	adds	r2, #176	; 0xb0
 80066a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e00f      	b.n	80066ce <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	32b0      	adds	r2, #176	; 0xb0
 80066b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80066c0:	7819      	ldrb	r1, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 ff98 	bl	80085fc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000097 	.word	0x20000097

080066dc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32b0      	adds	r2, #176	; 0xb0
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e016      	b.n	800672c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d111      	bne.n	800672a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	33b0      	adds	r3, #176	; 0xb0
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	7810      	ldrb	r0, [r2, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	7852      	ldrb	r2, [r2, #1]
 8006720:	4611      	mov	r1, r2
 8006722:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	220a      	movs	r2, #10
 8006740:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006742:	4b03      	ldr	r3, [pc, #12]	; (8006750 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	2000008c 	.word	0x2000008c

08006754 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	e009      	b.n	800677c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	33b0      	adds	r3, #176	; 0xb0
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	e01f      	b.n	80067e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	79fa      	ldrb	r2, [r7, #7]
 80067d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f001 fdbb 	bl	8008350 <USBD_LL_Init>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e025      	b.n	800684c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	32ae      	adds	r2, #174	; 0xae
 8006812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00f      	beq.n	800683c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	32ae      	adds	r2, #174	; 0xae
 8006826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	f107 020e 	add.w	r2, r7, #14
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
 8006834:	4602      	mov	r2, r0
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fdc3 	bl	80083e8 <USBD_LL_Start>
 8006862:	4603      	mov	r3, r0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006874:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4611      	mov	r1, r2
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	4611      	mov	r1, r2
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	4618      	mov	r0, r3
 8006902:	f001 f90e 	bl	8007b22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	2b02      	cmp	r3, #2
 8006928:	d01a      	beq.n	8006960 <USBD_LL_SetupStage+0x72>
 800692a:	2b02      	cmp	r3, #2
 800692c:	d822      	bhi.n	8006974 <USBD_LL_SetupStage+0x86>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <USBD_LL_SetupStage+0x4a>
 8006932:	2b01      	cmp	r3, #1
 8006934:	d00a      	beq.n	800694c <USBD_LL_SetupStage+0x5e>
 8006936:	e01d      	b.n	8006974 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fb65 	bl	8007010 <USBD_StdDevReq>
 8006946:	4603      	mov	r3, r0
 8006948:	73fb      	strb	r3, [r7, #15]
      break;
 800694a:	e020      	b.n	800698e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fbcd 	bl	80070f4 <USBD_StdItfReq>
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]
      break;
 800695e:	e016      	b.n	800698e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc2f 	bl	80071cc <USBD_StdEPReq>
 800696e:	4603      	mov	r3, r0
 8006970:	73fb      	strb	r3, [r7, #15]
      break;
 8006972:	e00c      	b.n	800698e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800697a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800697e:	b2db      	uxtb	r3, r3
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fd90 	bl	80084a8 <USBD_LL_StallEP>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
      break;
 800698c:	bf00      	nop
  }

  return ret;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	460b      	mov	r3, r1
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d16e      	bne.n	8006a8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069be:	2b03      	cmp	r3, #3
 80069c0:	f040 8098 	bne.w	8006af4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d913      	bls.n	80069f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	1ad2      	subs	r2, r2, r3
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	bf28      	it	cs
 80069ea:	4613      	movcs	r3, r2
 80069ec:	461a      	mov	r2, r3
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 f98a 	bl	8007d0a <USBD_CtlContinueRx>
 80069f6:	e07d      	b.n	8006af4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d014      	beq.n	8006a30 <USBD_LL_DataOutStage+0x98>
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d81d      	bhi.n	8006a46 <USBD_LL_DataOutStage+0xae>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <USBD_LL_DataOutStage+0x7c>
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d003      	beq.n	8006a1a <USBD_LL_DataOutStage+0x82>
 8006a12:	e018      	b.n	8006a46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75bb      	strb	r3, [r7, #22]
            break;
 8006a18:	e018      	b.n	8006a4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	4619      	mov	r1, r3
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fa64 	bl	8006ef2 <USBD_CoreFindIF>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a2e:	e00d      	b.n	8006a4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	4619      	mov	r1, r3
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 fa66 	bl	8006f0c <USBD_CoreFindEP>
 8006a40:	4603      	mov	r3, r0
 8006a42:	75bb      	strb	r3, [r7, #22]
            break;
 8006a44:	e002      	b.n	8006a4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75bb      	strb	r3, [r7, #22]
            break;
 8006a4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a4c:	7dbb      	ldrb	r3, [r7, #22]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d119      	bne.n	8006a86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d113      	bne.n	8006a86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a5e:	7dba      	ldrb	r2, [r7, #22]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	32ae      	adds	r2, #174	; 0xae
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a6e:	7dba      	ldrb	r2, [r7, #22]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a76:	7dba      	ldrb	r2, [r7, #22]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	32ae      	adds	r2, #174	; 0xae
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f001 f950 	bl	8007d2c <USBD_CtlSendStatus>
 8006a8c:	e032      	b.n	8006af4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	4619      	mov	r1, r3
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fa37 	bl	8006f0c <USBD_CoreFindEP>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aa2:	7dbb      	ldrb	r3, [r7, #22]
 8006aa4:	2bff      	cmp	r3, #255	; 0xff
 8006aa6:	d025      	beq.n	8006af4 <USBD_LL_DataOutStage+0x15c>
 8006aa8:	7dbb      	ldrb	r3, [r7, #22]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d122      	bne.n	8006af4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d117      	bne.n	8006aea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006aba:	7dba      	ldrb	r2, [r7, #22]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	32ae      	adds	r2, #174	; 0xae
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00f      	beq.n	8006aea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006aca:	7dba      	ldrb	r2, [r7, #22]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ad2:	7dba      	ldrb	r2, [r7, #22]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	32ae      	adds	r2, #174	; 0xae
 8006ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	7afa      	ldrb	r2, [r7, #11]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	4798      	blx	r3
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	e000      	b.n	8006af6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	460b      	mov	r3, r1
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d16f      	bne.n	8006bf2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3314      	adds	r3, #20
 8006b16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d15a      	bne.n	8006bd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d914      	bls.n	8006b58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	1ad2      	subs	r2, r2, r3
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f001 f8b2 	bl	8007cae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2100      	movs	r1, #0
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f001 fd53 	bl	80085fc <USBD_LL_PrepareReceive>
 8006b56:	e03f      	b.n	8006bd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d11c      	bne.n	8006b9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d316      	bcc.n	8006b9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20f      	bcs.n	8006b9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2100      	movs	r1, #0
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f001 f893 	bl	8007cae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b90:	2300      	movs	r3, #0
 8006b92:	2200      	movs	r2, #0
 8006b94:	2100      	movs	r1, #0
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f001 fd30 	bl	80085fc <USBD_LL_PrepareReceive>
 8006b9c:	e01c      	b.n	8006bd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d10f      	bne.n	8006bca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bca:	2180      	movs	r1, #128	; 0x80
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 fc6b 	bl	80084a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 f8bd 	bl	8007d52 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d03a      	beq.n	8006c58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff fe42 	bl	800686c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bf0:	e032      	b.n	8006c58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f985 	bl	8006f0c <USBD_CoreFindEP>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	2bff      	cmp	r3, #255	; 0xff
 8006c0a:	d025      	beq.n	8006c58 <USBD_LL_DataInStage+0x15a>
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d122      	bne.n	8006c58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d11c      	bne.n	8006c58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c1e:	7dfa      	ldrb	r2, [r7, #23]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	32ae      	adds	r2, #174	; 0xae
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d014      	beq.n	8006c58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c2e:	7dfa      	ldrb	r2, [r7, #23]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c36:	7dfa      	ldrb	r2, [r7, #23]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	32ae      	adds	r2, #174	; 0xae
 8006c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	7afa      	ldrb	r2, [r7, #11]
 8006c44:	4611      	mov	r1, r2
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	4798      	blx	r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c54:	7dbb      	ldrb	r3, [r7, #22]
 8006c56:	e000      	b.n	8006c5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d014      	beq.n	8006cc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6852      	ldr	r2, [r2, #4]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	4611      	mov	r1, r2
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cc8:	2340      	movs	r3, #64	; 0x40
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fba5 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2240      	movs	r2, #64	; 0x40
 8006ce0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2180      	movs	r1, #128	; 0x80
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fb97 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2240      	movs	r2, #64	; 0x40
 8006cfa:	621a      	str	r2, [r3, #32]

  return ret;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	78fa      	ldrb	r2, [r7, #3]
 8006d16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d006      	beq.n	8006d48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d106      	bne.n	8006d80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d110      	bne.n	8006dc4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	32ae      	adds	r2, #174	; 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e01c      	b.n	8006e2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d115      	bne.n	8006e28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	32ae      	adds	r2, #174	; 0xae
 8006e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32ae      	adds	r2, #174	; 0xae
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	4611      	mov	r1, r2
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	32ae      	adds	r2, #174	; 0xae
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e01c      	b.n	8006e8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d115      	bne.n	8006e8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	32ae      	adds	r2, #174	; 0xae
 8006e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	32ae      	adds	r2, #174	; 0xae
 8006e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	4611      	mov	r1, r2
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00e      	beq.n	8006ee8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6852      	ldr	r2, [r2, #4]
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	4611      	mov	r1, r2
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006efe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	885b      	ldrh	r3, [r3, #2]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d920      	bls.n	8006f90 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f56:	e013      	b.n	8006f80 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f58:	f107 030a 	add.w	r3, r7, #10
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6978      	ldr	r0, [r7, #20]
 8006f60:	f000 f81b 	bl	8006f9a <USBD_GetNextDesc>
 8006f64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	d108      	bne.n	8006f80 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	789b      	ldrb	r3, [r3, #2]
 8006f76:	78fa      	ldrb	r2, [r7, #3]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d008      	beq.n	8006f8e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	885b      	ldrh	r3, [r3, #2]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	897b      	ldrh	r3, [r7, #10]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d8e5      	bhi.n	8006f58 <USBD_GetEpDesc+0x32>
 8006f8c:	e000      	b.n	8006f90 <USBD_GetEpDesc+0x6a>
          break;
 8006f8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f90:	693b      	ldr	r3, [r7, #16]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	881a      	ldrh	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ff2:	8a3b      	ldrh	r3, [r7, #16]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	b21a      	sxth	r2, r3
 8006ff8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	b21b      	sxth	r3, r3
 8007000:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007002:	89fb      	ldrh	r3, [r7, #14]
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d005      	beq.n	8007036 <USBD_StdDevReq+0x26>
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d857      	bhi.n	80070de <USBD_StdDevReq+0xce>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <USBD_StdDevReq+0x42>
 8007032:	2b20      	cmp	r3, #32
 8007034:	d153      	bne.n	80070de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	32ae      	adds	r2, #174	; 0xae
 8007040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
      break;
 8007050:	e04a      	b.n	80070e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	2b09      	cmp	r3, #9
 8007058:	d83b      	bhi.n	80070d2 <USBD_StdDevReq+0xc2>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <USBD_StdDevReq+0x50>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	080070b5 	.word	0x080070b5
 8007064:	080070c9 	.word	0x080070c9
 8007068:	080070d3 	.word	0x080070d3
 800706c:	080070bf 	.word	0x080070bf
 8007070:	080070d3 	.word	0x080070d3
 8007074:	08007093 	.word	0x08007093
 8007078:	08007089 	.word	0x08007089
 800707c:	080070d3 	.word	0x080070d3
 8007080:	080070ab 	.word	0x080070ab
 8007084:	0800709d 	.word	0x0800709d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa3c 	bl	8007508 <USBD_GetDescriptor>
          break;
 8007090:	e024      	b.n	80070dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fba1 	bl	80077dc <USBD_SetAddress>
          break;
 800709a:	e01f      	b.n	80070dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fbe0 	bl	8007864 <USBD_SetConfig>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
          break;
 80070a8:	e018      	b.n	80070dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fc83 	bl	80079b8 <USBD_GetConfig>
          break;
 80070b2:	e013      	b.n	80070dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fcb4 	bl	8007a24 <USBD_GetStatus>
          break;
 80070bc:	e00e      	b.n	80070dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fce3 	bl	8007a8c <USBD_SetFeature>
          break;
 80070c6:	e009      	b.n	80070dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fd07 	bl	8007ade <USBD_ClrFeature>
          break;
 80070d0:	e004      	b.n	80070dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fd5e 	bl	8007b96 <USBD_CtlError>
          break;
 80070da:	bf00      	nop
      }
      break;
 80070dc:	e004      	b.n	80070e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fd58 	bl	8007b96 <USBD_CtlError>
      break;
 80070e6:	bf00      	nop
  }

  return ret;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop

080070f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d005      	beq.n	800711a <USBD_StdItfReq+0x26>
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d852      	bhi.n	80071b8 <USBD_StdItfReq+0xc4>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <USBD_StdItfReq+0x26>
 8007116:	2b20      	cmp	r3, #32
 8007118:	d14e      	bne.n	80071b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007120:	b2db      	uxtb	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	2b02      	cmp	r3, #2
 8007126:	d840      	bhi.n	80071aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	889b      	ldrh	r3, [r3, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b01      	cmp	r3, #1
 8007130:	d836      	bhi.n	80071a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	889b      	ldrh	r3, [r3, #4]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fed9 	bl	8006ef2 <USBD_CoreFindIF>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2bff      	cmp	r3, #255	; 0xff
 8007148:	d01d      	beq.n	8007186 <USBD_StdItfReq+0x92>
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11a      	bne.n	8007186 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007150:	7bba      	ldrb	r2, [r7, #14]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32ae      	adds	r2, #174	; 0xae
 8007156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00f      	beq.n	8007180 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007160:	7bba      	ldrb	r2, [r7, #14]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007168:	7bba      	ldrb	r2, [r7, #14]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32ae      	adds	r2, #174	; 0xae
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800717e:	e004      	b.n	800718a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007180:	2303      	movs	r3, #3
 8007182:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007184:	e001      	b.n	800718a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	88db      	ldrh	r3, [r3, #6]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d110      	bne.n	80071b4 <USBD_StdItfReq+0xc0>
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10d      	bne.n	80071b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fdc7 	bl	8007d2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800719e:	e009      	b.n	80071b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fcf7 	bl	8007b96 <USBD_CtlError>
          break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fcf2 	bl	8007b96 <USBD_CtlError>
          break;
 80071b2:	e000      	b.n	80071b6 <USBD_StdItfReq+0xc2>
          break;
 80071b4:	bf00      	nop
      }
      break;
 80071b6:	e004      	b.n	80071c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fceb 	bl	8007b96 <USBD_CtlError>
      break;
 80071c0:	bf00      	nop
  }

  return ret;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	889b      	ldrh	r3, [r3, #4]
 80071de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	d007      	beq.n	80071fc <USBD_StdEPReq+0x30>
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	f200 817f 	bhi.w	80074f0 <USBD_StdEPReq+0x324>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d02a      	beq.n	800724c <USBD_StdEPReq+0x80>
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	f040 817a 	bne.w	80074f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fe83 	bl	8006f0c <USBD_CoreFindEP>
 8007206:	4603      	mov	r3, r0
 8007208:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800720a:	7b7b      	ldrb	r3, [r7, #13]
 800720c:	2bff      	cmp	r3, #255	; 0xff
 800720e:	f000 8174 	beq.w	80074fa <USBD_StdEPReq+0x32e>
 8007212:	7b7b      	ldrb	r3, [r7, #13]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 8170 	bne.w	80074fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800721a:	7b7a      	ldrb	r2, [r7, #13]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007222:	7b7a      	ldrb	r2, [r7, #13]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	32ae      	adds	r2, #174	; 0xae
 8007228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 8163 	beq.w	80074fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007234:	7b7a      	ldrb	r2, [r7, #13]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32ae      	adds	r2, #174	; 0xae
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800724a:	e156      	b.n	80074fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d008      	beq.n	8007266 <USBD_StdEPReq+0x9a>
 8007254:	2b03      	cmp	r3, #3
 8007256:	f300 8145 	bgt.w	80074e4 <USBD_StdEPReq+0x318>
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 809b 	beq.w	8007396 <USBD_StdEPReq+0x1ca>
 8007260:	2b01      	cmp	r3, #1
 8007262:	d03c      	beq.n	80072de <USBD_StdEPReq+0x112>
 8007264:	e13e      	b.n	80074e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d002      	beq.n	8007278 <USBD_StdEPReq+0xac>
 8007272:	2b03      	cmp	r3, #3
 8007274:	d016      	beq.n	80072a4 <USBD_StdEPReq+0xd8>
 8007276:	e02c      	b.n	80072d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <USBD_StdEPReq+0xce>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d00a      	beq.n	800729a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f90d 	bl	80084a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f909 	bl	80084a8 <USBD_LL_StallEP>
 8007296:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007298:	e020      	b.n	80072dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc7a 	bl	8007b96 <USBD_CtlError>
              break;
 80072a2:	e01b      	b.n	80072dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10e      	bne.n	80072ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <USBD_StdEPReq+0xfe>
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b80      	cmp	r3, #128	; 0x80
 80072b6:	d008      	beq.n	80072ca <USBD_StdEPReq+0xfe>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	88db      	ldrh	r3, [r3, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f8ef 	bl	80084a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fd2e 	bl	8007d2c <USBD_CtlSendStatus>

              break;
 80072d0:	e004      	b.n	80072dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fc5e 	bl	8007b96 <USBD_CtlError>
              break;
 80072da:	bf00      	nop
          }
          break;
 80072dc:	e107      	b.n	80074ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d002      	beq.n	80072f0 <USBD_StdEPReq+0x124>
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d016      	beq.n	800731c <USBD_StdEPReq+0x150>
 80072ee:	e04b      	b.n	8007388 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <USBD_StdEPReq+0x146>
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b80      	cmp	r3, #128	; 0x80
 80072fa:	d00a      	beq.n	8007312 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f8d1 	bl	80084a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f8cd 	bl	80084a8 <USBD_LL_StallEP>
 800730e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007310:	e040      	b.n	8007394 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc3e 	bl	8007b96 <USBD_CtlError>
              break;
 800731a:	e03b      	b.n	8007394 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	885b      	ldrh	r3, [r3, #2]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d136      	bne.n	8007392 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 f8d7 	bl	80084e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fcf7 	bl	8007d2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fde2 	bl	8006f0c <USBD_CoreFindEP>
 8007348:	4603      	mov	r3, r0
 800734a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800734c:	7b7b      	ldrb	r3, [r7, #13]
 800734e:	2bff      	cmp	r3, #255	; 0xff
 8007350:	d01f      	beq.n	8007392 <USBD_StdEPReq+0x1c6>
 8007352:	7b7b      	ldrb	r3, [r7, #13]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11c      	bne.n	8007392 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007358:	7b7a      	ldrb	r2, [r7, #13]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007360:	7b7a      	ldrb	r2, [r7, #13]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	32ae      	adds	r2, #174	; 0xae
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d010      	beq.n	8007392 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007370:	7b7a      	ldrb	r2, [r7, #13]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	32ae      	adds	r2, #174	; 0xae
 8007376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007386:	e004      	b.n	8007392 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fc03 	bl	8007b96 <USBD_CtlError>
              break;
 8007390:	e000      	b.n	8007394 <USBD_StdEPReq+0x1c8>
              break;
 8007392:	bf00      	nop
          }
          break;
 8007394:	e0ab      	b.n	80074ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d002      	beq.n	80073a8 <USBD_StdEPReq+0x1dc>
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d032      	beq.n	800740c <USBD_StdEPReq+0x240>
 80073a6:	e097      	b.n	80074d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <USBD_StdEPReq+0x1f2>
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b80      	cmp	r3, #128	; 0x80
 80073b2:	d004      	beq.n	80073be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fbed 	bl	8007b96 <USBD_CtlError>
                break;
 80073bc:	e091      	b.n	80074e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da0b      	bge.n	80073de <USBD_StdEPReq+0x212>
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	3310      	adds	r3, #16
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	4413      	add	r3, r2
 80073da:	3304      	adds	r3, #4
 80073dc:	e00b      	b.n	80073f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	3304      	adds	r3, #4
 80073f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2202      	movs	r2, #2
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fc37 	bl	8007c78 <USBD_CtlSendData>
              break;
 800740a:	e06a      	b.n	80074e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800740c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007410:	2b00      	cmp	r3, #0
 8007412:	da11      	bge.n	8007438 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	f003 020f 	and.w	r2, r3, #15
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	3324      	adds	r3, #36	; 0x24
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d117      	bne.n	800745e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fbb0 	bl	8007b96 <USBD_CtlError>
                  break;
 8007436:	e054      	b.n	80074e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	f003 020f 	and.w	r2, r3, #15
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fb9d 	bl	8007b96 <USBD_CtlError>
                  break;
 800745c:	e041      	b.n	80074e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800745e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007462:	2b00      	cmp	r3, #0
 8007464:	da0b      	bge.n	800747e <USBD_StdEPReq+0x2b2>
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	3310      	adds	r3, #16
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	3304      	adds	r3, #4
 800747c:	e00b      	b.n	8007496 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	4413      	add	r3, r2
 8007494:	3304      	adds	r3, #4
 8007496:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <USBD_StdEPReq+0x2d8>
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d103      	bne.n	80074ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e00e      	b.n	80074ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f837 	bl	8008524 <USBD_LL_IsStallEP>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e002      	b.n	80074ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2202      	movs	r2, #2
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fbd1 	bl	8007c78 <USBD_CtlSendData>
              break;
 80074d6:	e004      	b.n	80074e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fb5b 	bl	8007b96 <USBD_CtlError>
              break;
 80074e0:	bf00      	nop
          }
          break;
 80074e2:	e004      	b.n	80074ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fb55 	bl	8007b96 <USBD_CtlError>
          break;
 80074ec:	bf00      	nop
      }
      break;
 80074ee:	e005      	b.n	80074fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fb4f 	bl	8007b96 <USBD_CtlError>
      break;
 80074f8:	e000      	b.n	80074fc <USBD_StdEPReq+0x330>
      break;
 80074fa:	bf00      	nop
  }

  return ret;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	885b      	ldrh	r3, [r3, #2]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	2b06      	cmp	r3, #6
 800752a:	f200 8128 	bhi.w	800777e <USBD_GetDescriptor+0x276>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <USBD_GetDescriptor+0x2c>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007551 	.word	0x08007551
 8007538:	08007569 	.word	0x08007569
 800753c:	080075a9 	.word	0x080075a9
 8007540:	0800777f 	.word	0x0800777f
 8007544:	0800777f 	.word	0x0800777f
 8007548:	0800771f 	.word	0x0800771f
 800754c:	0800774b 	.word	0x0800774b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	7c12      	ldrb	r2, [r2, #16]
 800755c:	f107 0108 	add.w	r1, r7, #8
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	60f8      	str	r0, [r7, #12]
      break;
 8007566:	e112      	b.n	800778e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	7c1b      	ldrb	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10d      	bne.n	800758c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	f107 0208 	add.w	r2, r7, #8
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	2202      	movs	r2, #2
 8007588:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800758a:	e100      	b.n	800778e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	f107 0208 	add.w	r2, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3301      	adds	r3, #1
 80075a2:	2202      	movs	r2, #2
 80075a4:	701a      	strb	r2, [r3, #0]
      break;
 80075a6:	e0f2      	b.n	800778e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	885b      	ldrh	r3, [r3, #2]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b05      	cmp	r3, #5
 80075b0:	f200 80ac 	bhi.w	800770c <USBD_GetDescriptor+0x204>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USBD_GetDescriptor+0xb4>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075d5 	.word	0x080075d5
 80075c0:	08007609 	.word	0x08007609
 80075c4:	0800763d 	.word	0x0800763d
 80075c8:	08007671 	.word	0x08007671
 80075cc:	080076a5 	.word	0x080076a5
 80075d0:	080076d9 	.word	0x080076d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f6:	e091      	b.n	800771c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 facb 	bl	8007b96 <USBD_CtlError>
            err++;
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	3301      	adds	r3, #1
 8007604:	72fb      	strb	r3, [r7, #11]
          break;
 8007606:	e089      	b.n	800771c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762a:	e077      	b.n	800771c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fab1 	bl	8007b96 <USBD_CtlError>
            err++;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	3301      	adds	r3, #1
 8007638:	72fb      	strb	r3, [r7, #11]
          break;
 800763a:	e06f      	b.n	800771c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765e:	e05d      	b.n	800771c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa97 	bl	8007b96 <USBD_CtlError>
            err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
          break;
 800766e:	e055      	b.n	800771c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7c12      	ldrb	r2, [r2, #16]
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007692:	e043      	b.n	800771c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa7d 	bl	8007b96 <USBD_CtlError>
            err++;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	3301      	adds	r3, #1
 80076a0:	72fb      	strb	r3, [r7, #11]
          break;
 80076a2:	e03b      	b.n	800771c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7c12      	ldrb	r2, [r2, #16]
 80076bc:	f107 0108 	add.w	r1, r7, #8
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
 80076c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c6:	e029      	b.n	800771c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa63 	bl	8007b96 <USBD_CtlError>
            err++;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	3301      	adds	r3, #1
 80076d4:	72fb      	strb	r3, [r7, #11]
          break;
 80076d6:	e021      	b.n	800771c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	7c12      	ldrb	r2, [r2, #16]
 80076f0:	f107 0108 	add.w	r1, r7, #8
 80076f4:	4610      	mov	r0, r2
 80076f6:	4798      	blx	r3
 80076f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076fa:	e00f      	b.n	800771c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa49 	bl	8007b96 <USBD_CtlError>
            err++;
 8007704:	7afb      	ldrb	r3, [r7, #11]
 8007706:	3301      	adds	r3, #1
 8007708:	72fb      	strb	r3, [r7, #11]
          break;
 800770a:	e007      	b.n	800771c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa41 	bl	8007b96 <USBD_CtlError>
          err++;
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	3301      	adds	r3, #1
 8007718:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800771a:	bf00      	nop
      }
      break;
 800771c:	e037      	b.n	800778e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	7c1b      	ldrb	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772e:	f107 0208 	add.w	r2, r7, #8
 8007732:	4610      	mov	r0, r2
 8007734:	4798      	blx	r3
 8007736:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007738:	e029      	b.n	800778e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fa2a 	bl	8007b96 <USBD_CtlError>
        err++;
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	3301      	adds	r3, #1
 8007746:	72fb      	strb	r3, [r7, #11]
      break;
 8007748:	e021      	b.n	800778e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7c1b      	ldrb	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10d      	bne.n	800776e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f107 0208 	add.w	r2, r7, #8
 800775e:	4610      	mov	r0, r2
 8007760:	4798      	blx	r3
 8007762:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	2207      	movs	r2, #7
 800776a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800776c:	e00f      	b.n	800778e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa10 	bl	8007b96 <USBD_CtlError>
        err++;
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	3301      	adds	r3, #1
 800777a:	72fb      	strb	r3, [r7, #11]
      break;
 800777c:	e007      	b.n	800778e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fa08 	bl	8007b96 <USBD_CtlError>
      err++;
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	3301      	adds	r3, #1
 800778a:	72fb      	strb	r3, [r7, #11]
      break;
 800778c:	bf00      	nop
  }

  if (err != 0U)
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11e      	bne.n	80077d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	88db      	ldrh	r3, [r3, #6]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d016      	beq.n	80077ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800779c:	893b      	ldrh	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00e      	beq.n	80077c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	88da      	ldrh	r2, [r3, #6]
 80077a6:	893b      	ldrh	r3, [r7, #8]
 80077a8:	4293      	cmp	r3, r2
 80077aa:	bf28      	it	cs
 80077ac:	4613      	movcs	r3, r2
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077b2:	893b      	ldrh	r3, [r7, #8]
 80077b4:	461a      	mov	r2, r3
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa5d 	bl	8007c78 <USBD_CtlSendData>
 80077be:	e009      	b.n	80077d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9e7 	bl	8007b96 <USBD_CtlError>
 80077c8:	e004      	b.n	80077d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 faae 	bl	8007d2c <USBD_CtlSendStatus>
 80077d0:	e000      	b.n	80077d4 <USBD_GetDescriptor+0x2cc>
    return;
 80077d2:	bf00      	nop
  }
}
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop

080077dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	889b      	ldrh	r3, [r3, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d131      	bne.n	8007852 <USBD_SetAddress+0x76>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	88db      	ldrh	r3, [r3, #6]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d12d      	bne.n	8007852 <USBD_SetAddress+0x76>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	885b      	ldrh	r3, [r3, #2]
 80077fa:	2b7f      	cmp	r3, #127	; 0x7f
 80077fc:	d829      	bhi.n	8007852 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007808:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b03      	cmp	r3, #3
 8007814:	d104      	bne.n	8007820 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9bc 	bl	8007b96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781e:	e01d      	b.n	800785c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	7bfa      	ldrb	r2, [r7, #15]
 8007824:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fea5 	bl	800857c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa7a 	bl	8007d2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007846:	e009      	b.n	800785c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007850:	e004      	b.n	800785c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f99e 	bl	8007b96 <USBD_CtlError>
  }
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	885b      	ldrh	r3, [r3, #2]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	4b4e      	ldr	r3, [pc, #312]	; (80079b4 <USBD_SetConfig+0x150>)
 800787a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800787c:	4b4d      	ldr	r3, [pc, #308]	; (80079b4 <USBD_SetConfig+0x150>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d905      	bls.n	8007890 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f985 	bl	8007b96 <USBD_CtlError>
    return USBD_FAIL;
 800788c:	2303      	movs	r3, #3
 800788e:	e08c      	b.n	80079aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d002      	beq.n	80078a2 <USBD_SetConfig+0x3e>
 800789c:	2b03      	cmp	r3, #3
 800789e:	d029      	beq.n	80078f4 <USBD_SetConfig+0x90>
 80078a0:	e075      	b.n	800798e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078a2:	4b44      	ldr	r3, [pc, #272]	; (80079b4 <USBD_SetConfig+0x150>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d020      	beq.n	80078ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80078aa:	4b42      	ldr	r3, [pc, #264]	; (80079b4 <USBD_SetConfig+0x150>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078b4:	4b3f      	ldr	r3, [pc, #252]	; (80079b4 <USBD_SetConfig+0x150>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fe ffe1 	bl	8006882 <USBD_SetClassConfig>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d008      	beq.n	80078dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f962 	bl	8007b96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078da:	e065      	b.n	80079a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fa25 	bl	8007d2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2203      	movs	r2, #3
 80078e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078ea:	e05d      	b.n	80079a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa1d 	bl	8007d2c <USBD_CtlSendStatus>
      break;
 80078f2:	e059      	b.n	80079a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078f4:	4b2f      	ldr	r3, [pc, #188]	; (80079b4 <USBD_SetConfig+0x150>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d112      	bne.n	8007922 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007904:	4b2b      	ldr	r3, [pc, #172]	; (80079b4 <USBD_SetConfig+0x150>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800790e:	4b29      	ldr	r3, [pc, #164]	; (80079b4 <USBD_SetConfig+0x150>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fe ffd0 	bl	80068ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa06 	bl	8007d2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007920:	e042      	b.n	80079a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <USBD_SetConfig+0x150>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d02a      	beq.n	8007986 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fe ffbe 	bl	80068ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800793e:	4b1d      	ldr	r3, [pc, #116]	; (80079b4 <USBD_SetConfig+0x150>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007948:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <USBD_SetConfig+0x150>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fe ff97 	bl	8006882 <USBD_SetClassConfig>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00f      	beq.n	800797e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f918 	bl	8007b96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fe ffa3 	bl	80068ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800797c:	e014      	b.n	80079a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f9d4 	bl	8007d2c <USBD_CtlSendStatus>
      break;
 8007984:	e010      	b.n	80079a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f9d0 	bl	8007d2c <USBD_CtlSendStatus>
      break;
 800798c:	e00c      	b.n	80079a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f900 	bl	8007b96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <USBD_SetConfig+0x150>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fe ff8c 	bl	80068ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079a2:	2303      	movs	r3, #3
 80079a4:	73fb      	strb	r3, [r7, #15]
      break;
 80079a6:	bf00      	nop
  }

  return ret;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000284 	.word	0x20000284

080079b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d004      	beq.n	80079d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f8e2 	bl	8007b96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079d2:	e023      	b.n	8007a1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	dc02      	bgt.n	80079e6 <USBD_GetConfig+0x2e>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dc03      	bgt.n	80079ec <USBD_GetConfig+0x34>
 80079e4:	e015      	b.n	8007a12 <USBD_GetConfig+0x5a>
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d00b      	beq.n	8007a02 <USBD_GetConfig+0x4a>
 80079ea:	e012      	b.n	8007a12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3308      	adds	r3, #8
 80079f6:	2201      	movs	r2, #1
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f93c 	bl	8007c78 <USBD_CtlSendData>
        break;
 8007a00:	e00c      	b.n	8007a1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2201      	movs	r2, #1
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f934 	bl	8007c78 <USBD_CtlSendData>
        break;
 8007a10:	e004      	b.n	8007a1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f8be 	bl	8007b96 <USBD_CtlError>
        break;
 8007a1a:	bf00      	nop
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d81e      	bhi.n	8007a7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	88db      	ldrh	r3, [r3, #6]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d004      	beq.n	8007a4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f8a5 	bl	8007b96 <USBD_CtlError>
        break;
 8007a4c:	e01a      	b.n	8007a84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f043 0202 	orr.w	r2, r3, #2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	2202      	movs	r2, #2
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f900 	bl	8007c78 <USBD_CtlSendData>
      break;
 8007a78:	e004      	b.n	8007a84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f88a 	bl	8007b96 <USBD_CtlError>
      break;
 8007a82:	bf00      	nop
  }
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	885b      	ldrh	r3, [r3, #2]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d107      	bne.n	8007aae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f940 	bl	8007d2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007aac:	e013      	b.n	8007ad6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d10b      	bne.n	8007ace <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	889b      	ldrh	r3, [r3, #4]
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f930 	bl	8007d2c <USBD_CtlSendStatus>
}
 8007acc:	e003      	b.n	8007ad6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f860 	bl	8007b96 <USBD_CtlError>
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d80b      	bhi.n	8007b0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d10c      	bne.n	8007b18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f910 	bl	8007d2c <USBD_CtlSendStatus>
      }
      break;
 8007b0c:	e004      	b.n	8007b18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f840 	bl	8007b96 <USBD_CtlError>
      break;
 8007b16:	e000      	b.n	8007b1a <USBD_ClrFeature+0x3c>
      break;
 8007b18:	bf00      	nop
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	781a      	ldrb	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f7ff fa41 	bl	8006fd4 <SWAPBYTE>
 8007b52:	4603      	mov	r3, r0
 8007b54:	461a      	mov	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3301      	adds	r3, #1
 8007b64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff fa34 	bl	8006fd4 <SWAPBYTE>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	461a      	mov	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fa27 	bl	8006fd4 <SWAPBYTE>
 8007b86:	4603      	mov	r3, r0
 8007b88:	461a      	mov	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	80da      	strh	r2, [r3, #6]
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ba0:	2180      	movs	r1, #128	; 0x80
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fc80 	bl	80084a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ba8:	2100      	movs	r1, #0
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fc7c 	bl	80084a8 <USBD_LL_StallEP>
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d036      	beq.n	8007c3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007bd2:	6938      	ldr	r0, [r7, #16]
 8007bd4:	f000 f836 	bl	8007c44 <USBD_GetLen>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	3301      	adds	r3, #1
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	4413      	add	r3, r2
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7812      	ldrb	r2, [r2, #0]
 8007bf0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	2203      	movs	r2, #3
 8007c00:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	3301      	adds	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c08:	e013      	b.n	8007c32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	4413      	add	r3, r2
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	613b      	str	r3, [r7, #16]
    idx++;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	4413      	add	r3, r2
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e7      	bne.n	8007c0a <USBD_GetString+0x52>
 8007c3a:	e000      	b.n	8007c3e <USBD_GetString+0x86>
    return;
 8007c3c:	bf00      	nop
  }
}
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c54:	e005      	b.n	8007c62 <USBD_GetLen+0x1e>
  {
    len++;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f5      	bne.n	8007c56 <USBD_GetLen+0x12>
  }

  return len;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fc8b 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fc7a 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2203      	movs	r2, #3
 8007ce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fc7e 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fc6d 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2204      	movs	r2, #4
 8007d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc39 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2205      	movs	r2, #5
 8007d5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d62:	2300      	movs	r3, #0
 8007d64:	2200      	movs	r2, #0
 8007d66:	2100      	movs	r1, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fc47 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4918      	ldr	r1, [pc, #96]	; (8007de0 <MX_USB_DEVICE_Init+0x68>)
 8007d80:	4818      	ldr	r0, [pc, #96]	; (8007de4 <MX_USB_DEVICE_Init+0x6c>)
 8007d82:	f7fe fd01 	bl	8006788 <USBD_Init>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d8c:	f7f8 ff58 	bl	8000c40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007d90:	4915      	ldr	r1, [pc, #84]	; (8007de8 <MX_USB_DEVICE_Init+0x70>)
 8007d92:	4814      	ldr	r0, [pc, #80]	; (8007de4 <MX_USB_DEVICE_Init+0x6c>)
 8007d94:	f7fe fd28 	bl	80067e8 <USBD_RegisterClass>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d9e:	f7f8 ff4f 	bl	8000c40 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007da2:	4912      	ldr	r1, [pc, #72]	; (8007dec <MX_USB_DEVICE_Init+0x74>)
 8007da4:	480f      	ldr	r0, [pc, #60]	; (8007de4 <MX_USB_DEVICE_Init+0x6c>)
 8007da6:	f7fe fcd5 	bl	8006754 <USBD_CUSTOM_HID_RegisterInterface>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007db0:	f7f8 ff46 	bl	8000c40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007db4:	480b      	ldr	r0, [pc, #44]	; (8007de4 <MX_USB_DEVICE_Init+0x6c>)
 8007db6:	f7fe fd4d 	bl	8006854 <USBD_Start>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dc0:	f7f8 ff3e 	bl	8000c40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  USBD_LL_OpenEP(&hUsbDeviceFS, 0x82, USBD_EP_TYPE_BULK, 64);
 8007dc4:	2340      	movs	r3, #64	; 0x40
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	2182      	movs	r1, #130	; 0x82
 8007dca:	4806      	ldr	r0, [pc, #24]	; (8007de4 <MX_USB_DEVICE_Init+0x6c>)
 8007dcc:	f000 fb27 	bl	800841e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(&hUsbDeviceFS, 0x02, USBD_EP_TYPE_BULK, 64);
 8007dd0:	2340      	movs	r3, #64	; 0x40
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4803      	ldr	r0, [pc, #12]	; (8007de4 <MX_USB_DEVICE_Init+0x6c>)
 8007dd8:	f000 fb21 	bl	800841e <USBD_LL_OpenEP>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ddc:	bf00      	nop
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	200000c0 	.word	0x200000c0
 8007de4:	20000288 	.word	0x20000288
 8007de8:	20000010 	.word	0x20000010
 8007dec:	200000b0 	.word	0x200000b0

08007df0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007df4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007e04:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	460a      	mov	r2, r1
 8007e1a:	71fb      	strb	r3, [r7, #7]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007e20:	4806      	ldr	r0, [pc, #24]	; (8007e3c <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007e22:	f7fe fc35 	bl	8006690 <USBD_CUSTOM_HID_ReceivePacket>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e30:	e000      	b.n	8007e34 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8007e32:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20000288 	.word	0x20000288

08007e40 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8007e4c:	887b      	ldrh	r3, [r7, #2]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	4804      	ldr	r0, [pc, #16]	; (8007e64 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8007e54:	f7fe fae6 	bl	8006424 <USBD_CUSTOM_HID_SendReport>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	b25b      	sxtb	r3, r3
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000288 	.word	0x20000288

08007e68 <send_report>:

/* USER CODE END 7 */

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int8_t send_report(uint8_t* report, uint16_t len)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	807b      	strh	r3, [r7, #2]
	return USBD_CUSTOM_HID_SendReport_FS(report, len);
 8007e74:	887b      	ldrh	r3, [r7, #2]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff ffe1 	bl	8007e40 <USBD_CUSTOM_HID_SendReport_FS>
 8007e7e:	4603      	mov	r3, r0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2212      	movs	r2, #18
 8007e98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	200000dc 	.word	0x200000dc

08007eac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2204      	movs	r2, #4
 8007ebc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ebe:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	200000f0 	.word	0x200000f0

08007ed0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4907      	ldr	r1, [pc, #28]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ee6:	4808      	ldr	r0, [pc, #32]	; (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee8:	f7ff fe66 	bl	8007bb8 <USBD_GetString>
 8007eec:	e004      	b.n	8007ef8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4904      	ldr	r1, [pc, #16]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ef2:	4805      	ldr	r0, [pc, #20]	; (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ef4:	f7ff fe60 	bl	8007bb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ef8:	4b02      	ldr	r3, [pc, #8]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000564 	.word	0x20000564
 8007f08:	0800971c 	.word	0x0800971c

08007f0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	4904      	ldr	r1, [pc, #16]	; (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f1c:	4804      	ldr	r0, [pc, #16]	; (8007f30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f1e:	f7ff fe4b 	bl	8007bb8 <USBD_GetString>
  return USBD_StrDesc;
 8007f22:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000564 	.word	0x20000564
 8007f30:	0800972c 	.word	0x0800972c

08007f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	221a      	movs	r2, #26
 8007f44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f46:	f000 f843 	bl	8007fd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f4a:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	200000f4 	.word	0x200000f4

08007f58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4907      	ldr	r1, [pc, #28]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f6e:	4808      	ldr	r0, [pc, #32]	; (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f70:	f7ff fe22 	bl	8007bb8 <USBD_GetString>
 8007f74:	e004      	b.n	8007f80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f7a:	4805      	ldr	r0, [pc, #20]	; (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f7c:	f7ff fe1c 	bl	8007bb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000564 	.word	0x20000564
 8007f90:	08009734 	.word	0x08009734

08007f94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4907      	ldr	r1, [pc, #28]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007faa:	4808      	ldr	r0, [pc, #32]	; (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fac:	f7ff fe04 	bl	8007bb8 <USBD_GetString>
 8007fb0:	e004      	b.n	8007fbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4904      	ldr	r1, [pc, #16]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fb6:	4805      	ldr	r0, [pc, #20]	; (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fb8:	f7ff fdfe 	bl	8007bb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fbc:	4b02      	ldr	r3, [pc, #8]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000564 	.word	0x20000564
 8007fcc:	08009748 	.word	0x08009748

08007fd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <Get_SerialNum+0x44>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <Get_SerialNum+0x48>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <Get_SerialNum+0x4c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4909      	ldr	r1, [pc, #36]	; (8008020 <Get_SerialNum+0x50>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f814 	bl	8008028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008000:	2204      	movs	r2, #4
 8008002:	4908      	ldr	r1, [pc, #32]	; (8008024 <Get_SerialNum+0x54>)
 8008004:	68b8      	ldr	r0, [r7, #8]
 8008006:	f000 f80f 	bl	8008028 <IntToUnicode>
  }
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	1fff7a10 	.word	0x1fff7a10
 8008018:	1fff7a14 	.word	0x1fff7a14
 800801c:	1fff7a18 	.word	0x1fff7a18
 8008020:	200000f6 	.word	0x200000f6
 8008024:	20000106 	.word	0x20000106

08008028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
 800803e:	e027      	b.n	8008090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0f1b      	lsrs	r3, r3, #28
 8008044:	2b09      	cmp	r3, #9
 8008046:	d80b      	bhi.n	8008060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	0f1b      	lsrs	r3, r3, #28
 800804c:	b2da      	uxtb	r2, r3
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4619      	mov	r1, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	440b      	add	r3, r1
 8008058:	3230      	adds	r2, #48	; 0x30
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e00a      	b.n	8008076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0f1b      	lsrs	r3, r3, #28
 8008064:	b2da      	uxtb	r2, r3
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	4619      	mov	r1, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	440b      	add	r3, r1
 8008070:	3237      	adds	r2, #55	; 0x37
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	3301      	adds	r3, #1
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	3301      	adds	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
 8008090:	7dfa      	ldrb	r2, [r7, #23]
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	429a      	cmp	r2, r3
 8008096:	d3d3      	bcc.n	8008040 <IntToUnicode+0x18>
  }
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	; 0x28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080b0:	f107 0314 	add.w	r3, r7, #20
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	60da      	str	r2, [r3, #12]
 80080be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080c8:	d147      	bne.n	800815a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	4b25      	ldr	r3, [pc, #148]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	4a24      	ldr	r2, [pc, #144]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 80080d4:	f043 0301 	orr.w	r3, r3, #1
 80080d8:	6313      	str	r3, [r2, #48]	; 0x30
 80080da:	4b22      	ldr	r3, [pc, #136]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80080e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f4:	f107 0314 	add.w	r3, r7, #20
 80080f8:	4619      	mov	r1, r3
 80080fa:	481b      	ldr	r0, [pc, #108]	; (8008168 <HAL_PCD_MspInit+0xc0>)
 80080fc:	f7f9 faf0 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008100:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008106:	2302      	movs	r3, #2
 8008108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800810a:	2300      	movs	r3, #0
 800810c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800810e:	2303      	movs	r3, #3
 8008110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008112:	230a      	movs	r3, #10
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008116:	f107 0314 	add.w	r3, r7, #20
 800811a:	4619      	mov	r1, r3
 800811c:	4812      	ldr	r0, [pc, #72]	; (8008168 <HAL_PCD_MspInit+0xc0>)
 800811e:	f7f9 fadf 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008122:	4b10      	ldr	r3, [pc, #64]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 8008124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008126:	4a0f      	ldr	r2, [pc, #60]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 8008128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812c:	6353      	str	r3, [r2, #52]	; 0x34
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	4a0b      	ldr	r2, [pc, #44]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 8008138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800813c:	6453      	str	r3, [r2, #68]	; 0x44
 800813e:	4b09      	ldr	r3, [pc, #36]	; (8008164 <HAL_PCD_MspInit+0xbc>)
 8008140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	2043      	movs	r0, #67	; 0x43
 8008150:	f7f9 f9fd 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008154:	2043      	movs	r0, #67	; 0x43
 8008156:	f7f9 fa16 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800815a:	bf00      	nop
 800815c:	3728      	adds	r7, #40	; 0x28
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800
 8008168:	40020000 	.word	0x40020000

0800816c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7fe fbb3 	bl	80068ee <USBD_LL_SetupStage>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	4619      	mov	r1, r3
 80081ba:	f7fe fbed 	bl	8006998 <USBD_LL_DataOutStage>
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4613      	mov	r3, r2
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	3320      	adds	r3, #32
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	4619      	mov	r1, r3
 80081ee:	f7fe fc86 	bl	8006afe <USBD_LL_DataInStage>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fdc0 	bl	8006d8e <USBD_LL_SOF>
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800821e:	2301      	movs	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	79db      	ldrb	r3, [r3, #7]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e008      	b.n	8008242 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	79db      	ldrb	r3, [r3, #7]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d102      	bne.n	800823e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008238:	2301      	movs	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	e001      	b.n	8008242 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800823e:	f7f8 fcff 	bl	8000c40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fd5a 	bl	8006d06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fd02 	bl	8006c62 <USBD_LL_Reset>
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fd55 	bl	8006d26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7adb      	ldrb	r3, [r3, #11]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	4a03      	ldr	r2, [pc, #12]	; (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 80082a2:	f043 0306 	orr.w	r3, r3, #6
 80082a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed00 	.word	0xe000ed00

080082b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fd4b 	bl	8006d5e <USBD_LL_Resume>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fda3 	bl	8006e32 <USBD_LL_IsoOUTIncomplete>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fd5f 	bl	8006dce <USBD_LL_IsoINIncomplete>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fdb5 	bl	8006e96 <USBD_LL_DevConnected>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fdb2 	bl	8006eac <USBD_LL_DevDisconnected>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d13c      	bne.n	80083da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008360:	4a20      	ldr	r2, [pc, #128]	; (80083e4 <USBD_LL_Init+0x94>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <USBD_LL_Init+0x94>)
 800836c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008370:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <USBD_LL_Init+0x94>)
 8008372:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008376:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008378:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <USBD_LL_Init+0x94>)
 800837a:	2204      	movs	r2, #4
 800837c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800837e:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <USBD_LL_Init+0x94>)
 8008380:	2202      	movs	r2, #2
 8008382:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008384:	4b17      	ldr	r3, [pc, #92]	; (80083e4 <USBD_LL_Init+0x94>)
 8008386:	2200      	movs	r2, #0
 8008388:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800838a:	4b16      	ldr	r3, [pc, #88]	; (80083e4 <USBD_LL_Init+0x94>)
 800838c:	2202      	movs	r2, #2
 800838e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008390:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <USBD_LL_Init+0x94>)
 8008392:	2200      	movs	r2, #0
 8008394:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008396:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <USBD_LL_Init+0x94>)
 8008398:	2200      	movs	r2, #0
 800839a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800839c:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <USBD_LL_Init+0x94>)
 800839e:	2200      	movs	r2, #0
 80083a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80083a2:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <USBD_LL_Init+0x94>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <USBD_LL_Init+0x94>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083ae:	480d      	ldr	r0, [pc, #52]	; (80083e4 <USBD_LL_Init+0x94>)
 80083b0:	f7f9 fb65 	bl	8001a7e <HAL_PCD_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083ba:	f7f8 fc41 	bl	8000c40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083be:	2180      	movs	r1, #128	; 0x80
 80083c0:	4808      	ldr	r0, [pc, #32]	; (80083e4 <USBD_LL_Init+0x94>)
 80083c2:	f7fa fd78 	bl	8002eb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083c6:	2240      	movs	r2, #64	; 0x40
 80083c8:	2100      	movs	r1, #0
 80083ca:	4806      	ldr	r0, [pc, #24]	; (80083e4 <USBD_LL_Init+0x94>)
 80083cc:	f7fa fd2c 	bl	8002e28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083d0:	2280      	movs	r2, #128	; 0x80
 80083d2:	2101      	movs	r1, #1
 80083d4:	4803      	ldr	r0, [pc, #12]	; (80083e4 <USBD_LL_Init+0x94>)
 80083d6:	f7fa fd27 	bl	8002e28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000764 	.word	0x20000764

080083e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083fe:	4618      	mov	r0, r3
 8008400:	f7f9 fc4c 	bl	8001c9c <HAL_PCD_Start>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f930 	bl	8008670 <USBD_Get_USB_Status>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008414:	7bbb      	ldrb	r3, [r7, #14]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	461a      	mov	r2, r3
 800842c:	4603      	mov	r3, r0
 800842e:	70fb      	strb	r3, [r7, #3]
 8008430:	460b      	mov	r3, r1
 8008432:	70bb      	strb	r3, [r7, #2]
 8008434:	4613      	mov	r3, r2
 8008436:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008446:	78bb      	ldrb	r3, [r7, #2]
 8008448:	883a      	ldrh	r2, [r7, #0]
 800844a:	78f9      	ldrb	r1, [r7, #3]
 800844c:	f7fa f920 	bl	8002690 <HAL_PCD_EP_Open>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f90a 	bl	8008670 <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008460:	7bbb      	ldrb	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7fa f969 	bl	8002760 <HAL_PCD_EP_Close>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 f8eb 	bl	8008670 <USBD_Get_USB_Status>
 800849a:	4603      	mov	r3, r0
 800849c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849e:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fa fa09 	bl	80028de <HAL_PCD_EP_SetStall>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f8cc 	bl	8008670 <USBD_Get_USB_Status>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f7fa fa4d 	bl	80029a4 <HAL_PCD_EP_ClrStall>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f8ad 	bl	8008670 <USBD_Get_USB_Status>
 8008516:	4603      	mov	r3, r0
 8008518:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800851a:	7bbb      	ldrb	r3, [r7, #14]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008536:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0b      	bge.n	8008558 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	4613      	mov	r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	3316      	adds	r3, #22
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	e00b      	b.n	8008570 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800856e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	4611      	mov	r1, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7fa f854 	bl	8002648 <HAL_PCD_SetAddress>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f862 	bl	8008670 <USBD_Get_USB_Status>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
 80085c6:	460b      	mov	r3, r1
 80085c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085d8:	7af9      	ldrb	r1, [r7, #11]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	f7fa f944 	bl	800286a <HAL_PCD_EP_Transmit>
 80085e2:	4603      	mov	r3, r0
 80085e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f841 	bl	8008670 <USBD_Get_USB_Status>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	460b      	mov	r3, r1
 800860a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800861a:	7af9      	ldrb	r1, [r7, #11]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	f7fa f8e8 	bl	80027f4 <HAL_PCD_EP_Receive>
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008628:	7dfb      	ldrb	r3, [r7, #23]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f820 	bl	8008670 <USBD_Get_USB_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008634:	7dbb      	ldrb	r3, [r7, #22]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008648:	4b03      	ldr	r3, [pc, #12]	; (8008658 <USBD_static_malloc+0x18>)
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	20000c48 	.word	0x20000c48

0800865c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d817      	bhi.n	80086b4 <USBD_Get_USB_Status+0x44>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <USBD_Get_USB_Status+0x1c>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086a3 	.word	0x080086a3
 8008694:	080086a9 	.word	0x080086a9
 8008698:	080086af 	.word	0x080086af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
    break;
 80086a0:	e00b      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086a2:	2303      	movs	r3, #3
 80086a4:	73fb      	strb	r3, [r7, #15]
    break;
 80086a6:	e008      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	e005      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086ae:	2303      	movs	r3, #3
 80086b0:	73fb      	strb	r3, [r7, #15]
    break;
 80086b2:	e002      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
    break;
 80086b8:	bf00      	nop
  }
  return usb_status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <std>:
 80086c8:	2300      	movs	r3, #0
 80086ca:	b510      	push	{r4, lr}
 80086cc:	4604      	mov	r4, r0
 80086ce:	e9c0 3300 	strd	r3, r3, [r0]
 80086d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086d6:	6083      	str	r3, [r0, #8]
 80086d8:	8181      	strh	r1, [r0, #12]
 80086da:	6643      	str	r3, [r0, #100]	; 0x64
 80086dc:	81c2      	strh	r2, [r0, #14]
 80086de:	6183      	str	r3, [r0, #24]
 80086e0:	4619      	mov	r1, r3
 80086e2:	2208      	movs	r2, #8
 80086e4:	305c      	adds	r0, #92	; 0x5c
 80086e6:	f000 f9f7 	bl	8008ad8 <memset>
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <std+0x58>)
 80086ec:	6263      	str	r3, [r4, #36]	; 0x24
 80086ee:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <std+0x5c>)
 80086f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086f2:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <std+0x60>)
 80086f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086f6:	4b0d      	ldr	r3, [pc, #52]	; (800872c <std+0x64>)
 80086f8:	6323      	str	r3, [r4, #48]	; 0x30
 80086fa:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <std+0x68>)
 80086fc:	6224      	str	r4, [r4, #32]
 80086fe:	429c      	cmp	r4, r3
 8008700:	d006      	beq.n	8008710 <std+0x48>
 8008702:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008706:	4294      	cmp	r4, r2
 8008708:	d002      	beq.n	8008710 <std+0x48>
 800870a:	33d0      	adds	r3, #208	; 0xd0
 800870c:	429c      	cmp	r4, r3
 800870e:	d105      	bne.n	800871c <std+0x54>
 8008710:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008718:	f000 ba56 	b.w	8008bc8 <__retarget_lock_init_recursive>
 800871c:	bd10      	pop	{r4, pc}
 800871e:	bf00      	nop
 8008720:	08008929 	.word	0x08008929
 8008724:	0800894b 	.word	0x0800894b
 8008728:	08008983 	.word	0x08008983
 800872c:	080089a7 	.word	0x080089a7
 8008730:	20000ca0 	.word	0x20000ca0

08008734 <stdio_exit_handler>:
 8008734:	4a02      	ldr	r2, [pc, #8]	; (8008740 <stdio_exit_handler+0xc>)
 8008736:	4903      	ldr	r1, [pc, #12]	; (8008744 <stdio_exit_handler+0x10>)
 8008738:	4803      	ldr	r0, [pc, #12]	; (8008748 <stdio_exit_handler+0x14>)
 800873a:	f000 b869 	b.w	8008810 <_fwalk_sglue>
 800873e:	bf00      	nop
 8008740:	20000110 	.word	0x20000110
 8008744:	08009475 	.word	0x08009475
 8008748:	2000011c 	.word	0x2000011c

0800874c <cleanup_stdio>:
 800874c:	6841      	ldr	r1, [r0, #4]
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <cleanup_stdio+0x34>)
 8008750:	4299      	cmp	r1, r3
 8008752:	b510      	push	{r4, lr}
 8008754:	4604      	mov	r4, r0
 8008756:	d001      	beq.n	800875c <cleanup_stdio+0x10>
 8008758:	f000 fe8c 	bl	8009474 <_fflush_r>
 800875c:	68a1      	ldr	r1, [r4, #8]
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <cleanup_stdio+0x38>)
 8008760:	4299      	cmp	r1, r3
 8008762:	d002      	beq.n	800876a <cleanup_stdio+0x1e>
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fe85 	bl	8009474 <_fflush_r>
 800876a:	68e1      	ldr	r1, [r4, #12]
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <cleanup_stdio+0x3c>)
 800876e:	4299      	cmp	r1, r3
 8008770:	d004      	beq.n	800877c <cleanup_stdio+0x30>
 8008772:	4620      	mov	r0, r4
 8008774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008778:	f000 be7c 	b.w	8009474 <_fflush_r>
 800877c:	bd10      	pop	{r4, pc}
 800877e:	bf00      	nop
 8008780:	20000ca0 	.word	0x20000ca0
 8008784:	20000d08 	.word	0x20000d08
 8008788:	20000d70 	.word	0x20000d70

0800878c <global_stdio_init.part.0>:
 800878c:	b510      	push	{r4, lr}
 800878e:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <global_stdio_init.part.0+0x30>)
 8008790:	4c0b      	ldr	r4, [pc, #44]	; (80087c0 <global_stdio_init.part.0+0x34>)
 8008792:	4a0c      	ldr	r2, [pc, #48]	; (80087c4 <global_stdio_init.part.0+0x38>)
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	4620      	mov	r0, r4
 8008798:	2200      	movs	r2, #0
 800879a:	2104      	movs	r1, #4
 800879c:	f7ff ff94 	bl	80086c8 <std>
 80087a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087a4:	2201      	movs	r2, #1
 80087a6:	2109      	movs	r1, #9
 80087a8:	f7ff ff8e 	bl	80086c8 <std>
 80087ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087b0:	2202      	movs	r2, #2
 80087b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b6:	2112      	movs	r1, #18
 80087b8:	f7ff bf86 	b.w	80086c8 <std>
 80087bc:	20000dd8 	.word	0x20000dd8
 80087c0:	20000ca0 	.word	0x20000ca0
 80087c4:	08008735 	.word	0x08008735

080087c8 <__sfp_lock_acquire>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__sfp_lock_acquire+0x8>)
 80087ca:	f000 b9fe 	b.w	8008bca <__retarget_lock_acquire_recursive>
 80087ce:	bf00      	nop
 80087d0:	20000de1 	.word	0x20000de1

080087d4 <__sfp_lock_release>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__sfp_lock_release+0x8>)
 80087d6:	f000 b9f9 	b.w	8008bcc <__retarget_lock_release_recursive>
 80087da:	bf00      	nop
 80087dc:	20000de1 	.word	0x20000de1

080087e0 <__sinit>:
 80087e0:	b510      	push	{r4, lr}
 80087e2:	4604      	mov	r4, r0
 80087e4:	f7ff fff0 	bl	80087c8 <__sfp_lock_acquire>
 80087e8:	6a23      	ldr	r3, [r4, #32]
 80087ea:	b11b      	cbz	r3, 80087f4 <__sinit+0x14>
 80087ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f0:	f7ff bff0 	b.w	80087d4 <__sfp_lock_release>
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <__sinit+0x28>)
 80087f6:	6223      	str	r3, [r4, #32]
 80087f8:	4b04      	ldr	r3, [pc, #16]	; (800880c <__sinit+0x2c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1f5      	bne.n	80087ec <__sinit+0xc>
 8008800:	f7ff ffc4 	bl	800878c <global_stdio_init.part.0>
 8008804:	e7f2      	b.n	80087ec <__sinit+0xc>
 8008806:	bf00      	nop
 8008808:	0800874d 	.word	0x0800874d
 800880c:	20000dd8 	.word	0x20000dd8

08008810 <_fwalk_sglue>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4607      	mov	r7, r0
 8008816:	4688      	mov	r8, r1
 8008818:	4614      	mov	r4, r2
 800881a:	2600      	movs	r6, #0
 800881c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008820:	f1b9 0901 	subs.w	r9, r9, #1
 8008824:	d505      	bpl.n	8008832 <_fwalk_sglue+0x22>
 8008826:	6824      	ldr	r4, [r4, #0]
 8008828:	2c00      	cmp	r4, #0
 800882a:	d1f7      	bne.n	800881c <_fwalk_sglue+0xc>
 800882c:	4630      	mov	r0, r6
 800882e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d907      	bls.n	8008848 <_fwalk_sglue+0x38>
 8008838:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800883c:	3301      	adds	r3, #1
 800883e:	d003      	beq.n	8008848 <_fwalk_sglue+0x38>
 8008840:	4629      	mov	r1, r5
 8008842:	4638      	mov	r0, r7
 8008844:	47c0      	blx	r8
 8008846:	4306      	orrs	r6, r0
 8008848:	3568      	adds	r5, #104	; 0x68
 800884a:	e7e9      	b.n	8008820 <_fwalk_sglue+0x10>

0800884c <iprintf>:
 800884c:	b40f      	push	{r0, r1, r2, r3}
 800884e:	b507      	push	{r0, r1, r2, lr}
 8008850:	4906      	ldr	r1, [pc, #24]	; (800886c <iprintf+0x20>)
 8008852:	ab04      	add	r3, sp, #16
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	f853 2b04 	ldr.w	r2, [r3], #4
 800885a:	6881      	ldr	r1, [r0, #8]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	f000 fad9 	bl	8008e14 <_vfiprintf_r>
 8008862:	b003      	add	sp, #12
 8008864:	f85d eb04 	ldr.w	lr, [sp], #4
 8008868:	b004      	add	sp, #16
 800886a:	4770      	bx	lr
 800886c:	20000168 	.word	0x20000168

08008870 <_puts_r>:
 8008870:	6a03      	ldr	r3, [r0, #32]
 8008872:	b570      	push	{r4, r5, r6, lr}
 8008874:	6884      	ldr	r4, [r0, #8]
 8008876:	4605      	mov	r5, r0
 8008878:	460e      	mov	r6, r1
 800887a:	b90b      	cbnz	r3, 8008880 <_puts_r+0x10>
 800887c:	f7ff ffb0 	bl	80087e0 <__sinit>
 8008880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008882:	07db      	lsls	r3, r3, #31
 8008884:	d405      	bmi.n	8008892 <_puts_r+0x22>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	0598      	lsls	r0, r3, #22
 800888a:	d402      	bmi.n	8008892 <_puts_r+0x22>
 800888c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888e:	f000 f99c 	bl	8008bca <__retarget_lock_acquire_recursive>
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	0719      	lsls	r1, r3, #28
 8008896:	d513      	bpl.n	80088c0 <_puts_r+0x50>
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	b18b      	cbz	r3, 80088c0 <_puts_r+0x50>
 800889c:	3e01      	subs	r6, #1
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088a4:	3b01      	subs	r3, #1
 80088a6:	60a3      	str	r3, [r4, #8]
 80088a8:	b9e9      	cbnz	r1, 80088e6 <_puts_r+0x76>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	da2e      	bge.n	800890c <_puts_r+0x9c>
 80088ae:	4622      	mov	r2, r4
 80088b0:	210a      	movs	r1, #10
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 f87b 	bl	80089ae <__swbuf_r>
 80088b8:	3001      	adds	r0, #1
 80088ba:	d007      	beq.n	80088cc <_puts_r+0x5c>
 80088bc:	250a      	movs	r5, #10
 80088be:	e007      	b.n	80088d0 <_puts_r+0x60>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f8b0 	bl	8008a28 <__swsetup_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0e7      	beq.n	800889c <_puts_r+0x2c>
 80088cc:	f04f 35ff 	mov.w	r5, #4294967295
 80088d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088d2:	07da      	lsls	r2, r3, #31
 80088d4:	d405      	bmi.n	80088e2 <_puts_r+0x72>
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	059b      	lsls	r3, r3, #22
 80088da:	d402      	bmi.n	80088e2 <_puts_r+0x72>
 80088dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088de:	f000 f975 	bl	8008bcc <__retarget_lock_release_recursive>
 80088e2:	4628      	mov	r0, r5
 80088e4:	bd70      	pop	{r4, r5, r6, pc}
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	da04      	bge.n	80088f4 <_puts_r+0x84>
 80088ea:	69a2      	ldr	r2, [r4, #24]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	dc06      	bgt.n	80088fe <_puts_r+0x8e>
 80088f0:	290a      	cmp	r1, #10
 80088f2:	d004      	beq.n	80088fe <_puts_r+0x8e>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	6022      	str	r2, [r4, #0]
 80088fa:	7019      	strb	r1, [r3, #0]
 80088fc:	e7cf      	b.n	800889e <_puts_r+0x2e>
 80088fe:	4622      	mov	r2, r4
 8008900:	4628      	mov	r0, r5
 8008902:	f000 f854 	bl	80089ae <__swbuf_r>
 8008906:	3001      	adds	r0, #1
 8008908:	d1c9      	bne.n	800889e <_puts_r+0x2e>
 800890a:	e7df      	b.n	80088cc <_puts_r+0x5c>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	250a      	movs	r5, #10
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	6022      	str	r2, [r4, #0]
 8008914:	701d      	strb	r5, [r3, #0]
 8008916:	e7db      	b.n	80088d0 <_puts_r+0x60>

08008918 <puts>:
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <puts+0xc>)
 800891a:	4601      	mov	r1, r0
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f7ff bfa7 	b.w	8008870 <_puts_r>
 8008922:	bf00      	nop
 8008924:	20000168 	.word	0x20000168

08008928 <__sread>:
 8008928:	b510      	push	{r4, lr}
 800892a:	460c      	mov	r4, r1
 800892c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008930:	f000 f8fc 	bl	8008b2c <_read_r>
 8008934:	2800      	cmp	r0, #0
 8008936:	bfab      	itete	ge
 8008938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800893a:	89a3      	ldrhlt	r3, [r4, #12]
 800893c:	181b      	addge	r3, r3, r0
 800893e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008942:	bfac      	ite	ge
 8008944:	6563      	strge	r3, [r4, #84]	; 0x54
 8008946:	81a3      	strhlt	r3, [r4, #12]
 8008948:	bd10      	pop	{r4, pc}

0800894a <__swrite>:
 800894a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894e:	461f      	mov	r7, r3
 8008950:	898b      	ldrh	r3, [r1, #12]
 8008952:	05db      	lsls	r3, r3, #23
 8008954:	4605      	mov	r5, r0
 8008956:	460c      	mov	r4, r1
 8008958:	4616      	mov	r6, r2
 800895a:	d505      	bpl.n	8008968 <__swrite+0x1e>
 800895c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008960:	2302      	movs	r3, #2
 8008962:	2200      	movs	r2, #0
 8008964:	f000 f8d0 	bl	8008b08 <_lseek_r>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	4628      	mov	r0, r5
 800897a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	f000 b8e7 	b.w	8008b50 <_write_r>

08008982 <__sseek>:
 8008982:	b510      	push	{r4, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898a:	f000 f8bd 	bl	8008b08 <_lseek_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	bf15      	itete	ne
 8008994:	6560      	strne	r0, [r4, #84]	; 0x54
 8008996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800899a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800899e:	81a3      	strheq	r3, [r4, #12]
 80089a0:	bf18      	it	ne
 80089a2:	81a3      	strhne	r3, [r4, #12]
 80089a4:	bd10      	pop	{r4, pc}

080089a6 <__sclose>:
 80089a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089aa:	f000 b89d 	b.w	8008ae8 <_close_r>

080089ae <__swbuf_r>:
 80089ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b0:	460e      	mov	r6, r1
 80089b2:	4614      	mov	r4, r2
 80089b4:	4605      	mov	r5, r0
 80089b6:	b118      	cbz	r0, 80089c0 <__swbuf_r+0x12>
 80089b8:	6a03      	ldr	r3, [r0, #32]
 80089ba:	b90b      	cbnz	r3, 80089c0 <__swbuf_r+0x12>
 80089bc:	f7ff ff10 	bl	80087e0 <__sinit>
 80089c0:	69a3      	ldr	r3, [r4, #24]
 80089c2:	60a3      	str	r3, [r4, #8]
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	071a      	lsls	r2, r3, #28
 80089c8:	d525      	bpl.n	8008a16 <__swbuf_r+0x68>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	b31b      	cbz	r3, 8008a16 <__swbuf_r+0x68>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	6922      	ldr	r2, [r4, #16]
 80089d2:	1a98      	subs	r0, r3, r2
 80089d4:	6963      	ldr	r3, [r4, #20]
 80089d6:	b2f6      	uxtb	r6, r6
 80089d8:	4283      	cmp	r3, r0
 80089da:	4637      	mov	r7, r6
 80089dc:	dc04      	bgt.n	80089e8 <__swbuf_r+0x3a>
 80089de:	4621      	mov	r1, r4
 80089e0:	4628      	mov	r0, r5
 80089e2:	f000 fd47 	bl	8009474 <_fflush_r>
 80089e6:	b9e0      	cbnz	r0, 8008a22 <__swbuf_r+0x74>
 80089e8:	68a3      	ldr	r3, [r4, #8]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	6022      	str	r2, [r4, #0]
 80089f4:	701e      	strb	r6, [r3, #0]
 80089f6:	6962      	ldr	r2, [r4, #20]
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d004      	beq.n	8008a08 <__swbuf_r+0x5a>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d506      	bpl.n	8008a12 <__swbuf_r+0x64>
 8008a04:	2e0a      	cmp	r6, #10
 8008a06:	d104      	bne.n	8008a12 <__swbuf_r+0x64>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f000 fd32 	bl	8009474 <_fflush_r>
 8008a10:	b938      	cbnz	r0, 8008a22 <__swbuf_r+0x74>
 8008a12:	4638      	mov	r0, r7
 8008a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f000 f805 	bl	8008a28 <__swsetup_r>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d0d5      	beq.n	80089ce <__swbuf_r+0x20>
 8008a22:	f04f 37ff 	mov.w	r7, #4294967295
 8008a26:	e7f4      	b.n	8008a12 <__swbuf_r+0x64>

08008a28 <__swsetup_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ad4 <__swsetup_r+0xac>)
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	460c      	mov	r4, r1
 8008a32:	b118      	cbz	r0, 8008a3c <__swsetup_r+0x14>
 8008a34:	6a03      	ldr	r3, [r0, #32]
 8008a36:	b90b      	cbnz	r3, 8008a3c <__swsetup_r+0x14>
 8008a38:	f7ff fed2 	bl	80087e0 <__sinit>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a42:	0718      	lsls	r0, r3, #28
 8008a44:	d422      	bmi.n	8008a8c <__swsetup_r+0x64>
 8008a46:	06d9      	lsls	r1, r3, #27
 8008a48:	d407      	bmi.n	8008a5a <__swsetup_r+0x32>
 8008a4a:	2309      	movs	r3, #9
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	e034      	b.n	8008ac4 <__swsetup_r+0x9c>
 8008a5a:	0758      	lsls	r0, r3, #29
 8008a5c:	d512      	bpl.n	8008a84 <__swsetup_r+0x5c>
 8008a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a60:	b141      	cbz	r1, 8008a74 <__swsetup_r+0x4c>
 8008a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a66:	4299      	cmp	r1, r3
 8008a68:	d002      	beq.n	8008a70 <__swsetup_r+0x48>
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f8b0 	bl	8008bd0 <_free_r>
 8008a70:	2300      	movs	r3, #0
 8008a72:	6363      	str	r3, [r4, #52]	; 0x34
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6063      	str	r3, [r4, #4]
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f043 0308 	orr.w	r3, r3, #8
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	b94b      	cbnz	r3, 8008aa4 <__swsetup_r+0x7c>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a9a:	d003      	beq.n	8008aa4 <__swsetup_r+0x7c>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 fd36 	bl	8009510 <__smakebuf_r>
 8008aa4:	89a0      	ldrh	r0, [r4, #12]
 8008aa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aaa:	f010 0301 	ands.w	r3, r0, #1
 8008aae:	d00a      	beq.n	8008ac6 <__swsetup_r+0x9e>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60a3      	str	r3, [r4, #8]
 8008ab4:	6963      	ldr	r3, [r4, #20]
 8008ab6:	425b      	negs	r3, r3
 8008ab8:	61a3      	str	r3, [r4, #24]
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	b943      	cbnz	r3, 8008ad0 <__swsetup_r+0xa8>
 8008abe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ac2:	d1c4      	bne.n	8008a4e <__swsetup_r+0x26>
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	0781      	lsls	r1, r0, #30
 8008ac8:	bf58      	it	pl
 8008aca:	6963      	ldrpl	r3, [r4, #20]
 8008acc:	60a3      	str	r3, [r4, #8]
 8008ace:	e7f4      	b.n	8008aba <__swsetup_r+0x92>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e7f7      	b.n	8008ac4 <__swsetup_r+0x9c>
 8008ad4:	20000168 	.word	0x20000168

08008ad8 <memset>:
 8008ad8:	4402      	add	r2, r0
 8008ada:	4603      	mov	r3, r0
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d100      	bne.n	8008ae2 <memset+0xa>
 8008ae0:	4770      	bx	lr
 8008ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae6:	e7f9      	b.n	8008adc <memset+0x4>

08008ae8 <_close_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d06      	ldr	r5, [pc, #24]	; (8008b04 <_close_r+0x1c>)
 8008aec:	2300      	movs	r3, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	f7f8 f9f5 	bl	8000ee2 <_close>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_close_r+0x1a>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_close_r+0x1a>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20000ddc 	.word	0x20000ddc

08008b08 <_lseek_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	; (8008b28 <_lseek_r+0x20>)
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	602a      	str	r2, [r5, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7f8 fa0a 	bl	8000f30 <_lseek>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_lseek_r+0x1e>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_lseek_r+0x1e>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20000ddc 	.word	0x20000ddc

08008b2c <_read_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d07      	ldr	r5, [pc, #28]	; (8008b4c <_read_r+0x20>)
 8008b30:	4604      	mov	r4, r0
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	2200      	movs	r2, #0
 8008b38:	602a      	str	r2, [r5, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f7f8 f9b4 	bl	8000ea8 <_read>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_read_r+0x1e>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_read_r+0x1e>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000ddc 	.word	0x20000ddc

08008b50 <_write_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d07      	ldr	r5, [pc, #28]	; (8008b70 <_write_r+0x20>)
 8008b54:	4604      	mov	r4, r0
 8008b56:	4608      	mov	r0, r1
 8008b58:	4611      	mov	r1, r2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	602a      	str	r2, [r5, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f7f8 f820 	bl	8000ba4 <_write>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d102      	bne.n	8008b6e <_write_r+0x1e>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	b103      	cbz	r3, 8008b6e <_write_r+0x1e>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	20000ddc 	.word	0x20000ddc

08008b74 <__errno>:
 8008b74:	4b01      	ldr	r3, [pc, #4]	; (8008b7c <__errno+0x8>)
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000168 	.word	0x20000168

08008b80 <__libc_init_array>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	4d0d      	ldr	r5, [pc, #52]	; (8008bb8 <__libc_init_array+0x38>)
 8008b84:	4c0d      	ldr	r4, [pc, #52]	; (8008bbc <__libc_init_array+0x3c>)
 8008b86:	1b64      	subs	r4, r4, r5
 8008b88:	10a4      	asrs	r4, r4, #2
 8008b8a:	2600      	movs	r6, #0
 8008b8c:	42a6      	cmp	r6, r4
 8008b8e:	d109      	bne.n	8008ba4 <__libc_init_array+0x24>
 8008b90:	4d0b      	ldr	r5, [pc, #44]	; (8008bc0 <__libc_init_array+0x40>)
 8008b92:	4c0c      	ldr	r4, [pc, #48]	; (8008bc4 <__libc_init_array+0x44>)
 8008b94:	f000 fd2a 	bl	80095ec <_init>
 8008b98:	1b64      	subs	r4, r4, r5
 8008b9a:	10a4      	asrs	r4, r4, #2
 8008b9c:	2600      	movs	r6, #0
 8008b9e:	42a6      	cmp	r6, r4
 8008ba0:	d105      	bne.n	8008bae <__libc_init_array+0x2e>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba8:	4798      	blx	r3
 8008baa:	3601      	adds	r6, #1
 8008bac:	e7ee      	b.n	8008b8c <__libc_init_array+0xc>
 8008bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb2:	4798      	blx	r3
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	e7f2      	b.n	8008b9e <__libc_init_array+0x1e>
 8008bb8:	080097c4 	.word	0x080097c4
 8008bbc:	080097c4 	.word	0x080097c4
 8008bc0:	080097c4 	.word	0x080097c4
 8008bc4:	080097c8 	.word	0x080097c8

08008bc8 <__retarget_lock_init_recursive>:
 8008bc8:	4770      	bx	lr

08008bca <__retarget_lock_acquire_recursive>:
 8008bca:	4770      	bx	lr

08008bcc <__retarget_lock_release_recursive>:
 8008bcc:	4770      	bx	lr
	...

08008bd0 <_free_r>:
 8008bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bd2:	2900      	cmp	r1, #0
 8008bd4:	d044      	beq.n	8008c60 <_free_r+0x90>
 8008bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bda:	9001      	str	r0, [sp, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f1a1 0404 	sub.w	r4, r1, #4
 8008be2:	bfb8      	it	lt
 8008be4:	18e4      	addlt	r4, r4, r3
 8008be6:	f000 f8df 	bl	8008da8 <__malloc_lock>
 8008bea:	4a1e      	ldr	r2, [pc, #120]	; (8008c64 <_free_r+0x94>)
 8008bec:	9801      	ldr	r0, [sp, #4]
 8008bee:	6813      	ldr	r3, [r2, #0]
 8008bf0:	b933      	cbnz	r3, 8008c00 <_free_r+0x30>
 8008bf2:	6063      	str	r3, [r4, #4]
 8008bf4:	6014      	str	r4, [r2, #0]
 8008bf6:	b003      	add	sp, #12
 8008bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bfc:	f000 b8da 	b.w	8008db4 <__malloc_unlock>
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d908      	bls.n	8008c16 <_free_r+0x46>
 8008c04:	6825      	ldr	r5, [r4, #0]
 8008c06:	1961      	adds	r1, r4, r5
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf01      	itttt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	1949      	addeq	r1, r1, r5
 8008c12:	6021      	streq	r1, [r4, #0]
 8008c14:	e7ed      	b.n	8008bf2 <_free_r+0x22>
 8008c16:	461a      	mov	r2, r3
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	b10b      	cbz	r3, 8008c20 <_free_r+0x50>
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d9fa      	bls.n	8008c16 <_free_r+0x46>
 8008c20:	6811      	ldr	r1, [r2, #0]
 8008c22:	1855      	adds	r5, r2, r1
 8008c24:	42a5      	cmp	r5, r4
 8008c26:	d10b      	bne.n	8008c40 <_free_r+0x70>
 8008c28:	6824      	ldr	r4, [r4, #0]
 8008c2a:	4421      	add	r1, r4
 8008c2c:	1854      	adds	r4, r2, r1
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	6011      	str	r1, [r2, #0]
 8008c32:	d1e0      	bne.n	8008bf6 <_free_r+0x26>
 8008c34:	681c      	ldr	r4, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	6053      	str	r3, [r2, #4]
 8008c3a:	440c      	add	r4, r1
 8008c3c:	6014      	str	r4, [r2, #0]
 8008c3e:	e7da      	b.n	8008bf6 <_free_r+0x26>
 8008c40:	d902      	bls.n	8008c48 <_free_r+0x78>
 8008c42:	230c      	movs	r3, #12
 8008c44:	6003      	str	r3, [r0, #0]
 8008c46:	e7d6      	b.n	8008bf6 <_free_r+0x26>
 8008c48:	6825      	ldr	r5, [r4, #0]
 8008c4a:	1961      	adds	r1, r4, r5
 8008c4c:	428b      	cmp	r3, r1
 8008c4e:	bf04      	itt	eq
 8008c50:	6819      	ldreq	r1, [r3, #0]
 8008c52:	685b      	ldreq	r3, [r3, #4]
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	bf04      	itt	eq
 8008c58:	1949      	addeq	r1, r1, r5
 8008c5a:	6021      	streq	r1, [r4, #0]
 8008c5c:	6054      	str	r4, [r2, #4]
 8008c5e:	e7ca      	b.n	8008bf6 <_free_r+0x26>
 8008c60:	b003      	add	sp, #12
 8008c62:	bd30      	pop	{r4, r5, pc}
 8008c64:	20000de4 	.word	0x20000de4

08008c68 <sbrk_aligned>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4e0e      	ldr	r6, [pc, #56]	; (8008ca4 <sbrk_aligned+0x3c>)
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	6831      	ldr	r1, [r6, #0]
 8008c70:	4605      	mov	r5, r0
 8008c72:	b911      	cbnz	r1, 8008c7a <sbrk_aligned+0x12>
 8008c74:	f000 fcaa 	bl	80095cc <_sbrk_r>
 8008c78:	6030      	str	r0, [r6, #0]
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f000 fca5 	bl	80095cc <_sbrk_r>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	d00a      	beq.n	8008c9c <sbrk_aligned+0x34>
 8008c86:	1cc4      	adds	r4, r0, #3
 8008c88:	f024 0403 	bic.w	r4, r4, #3
 8008c8c:	42a0      	cmp	r0, r4
 8008c8e:	d007      	beq.n	8008ca0 <sbrk_aligned+0x38>
 8008c90:	1a21      	subs	r1, r4, r0
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 fc9a 	bl	80095cc <_sbrk_r>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d101      	bne.n	8008ca0 <sbrk_aligned+0x38>
 8008c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	20000de8 	.word	0x20000de8

08008ca8 <_malloc_r>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	1ccd      	adds	r5, r1, #3
 8008cae:	f025 0503 	bic.w	r5, r5, #3
 8008cb2:	3508      	adds	r5, #8
 8008cb4:	2d0c      	cmp	r5, #12
 8008cb6:	bf38      	it	cc
 8008cb8:	250c      	movcc	r5, #12
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	db01      	blt.n	8008cc4 <_malloc_r+0x1c>
 8008cc0:	42a9      	cmp	r1, r5
 8008cc2:	d905      	bls.n	8008cd0 <_malloc_r+0x28>
 8008cc4:	230c      	movs	r3, #12
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	2600      	movs	r6, #0
 8008cca:	4630      	mov	r0, r6
 8008ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008da4 <_malloc_r+0xfc>
 8008cd4:	f000 f868 	bl	8008da8 <__malloc_lock>
 8008cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cdc:	461c      	mov	r4, r3
 8008cde:	bb5c      	cbnz	r4, 8008d38 <_malloc_r+0x90>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f7ff ffc0 	bl	8008c68 <sbrk_aligned>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	4604      	mov	r4, r0
 8008cec:	d155      	bne.n	8008d9a <_malloc_r+0xf2>
 8008cee:	f8d8 4000 	ldr.w	r4, [r8]
 8008cf2:	4626      	mov	r6, r4
 8008cf4:	2e00      	cmp	r6, #0
 8008cf6:	d145      	bne.n	8008d84 <_malloc_r+0xdc>
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	d048      	beq.n	8008d8e <_malloc_r+0xe6>
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4638      	mov	r0, r7
 8008d02:	eb04 0903 	add.w	r9, r4, r3
 8008d06:	f000 fc61 	bl	80095cc <_sbrk_r>
 8008d0a:	4581      	cmp	r9, r0
 8008d0c:	d13f      	bne.n	8008d8e <_malloc_r+0xe6>
 8008d0e:	6821      	ldr	r1, [r4, #0]
 8008d10:	1a6d      	subs	r5, r5, r1
 8008d12:	4629      	mov	r1, r5
 8008d14:	4638      	mov	r0, r7
 8008d16:	f7ff ffa7 	bl	8008c68 <sbrk_aligned>
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d037      	beq.n	8008d8e <_malloc_r+0xe6>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	442b      	add	r3, r5
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	f8d8 3000 	ldr.w	r3, [r8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d038      	beq.n	8008d9e <_malloc_r+0xf6>
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	42a2      	cmp	r2, r4
 8008d30:	d12b      	bne.n	8008d8a <_malloc_r+0xe2>
 8008d32:	2200      	movs	r2, #0
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	e00f      	b.n	8008d58 <_malloc_r+0xb0>
 8008d38:	6822      	ldr	r2, [r4, #0]
 8008d3a:	1b52      	subs	r2, r2, r5
 8008d3c:	d41f      	bmi.n	8008d7e <_malloc_r+0xd6>
 8008d3e:	2a0b      	cmp	r2, #11
 8008d40:	d917      	bls.n	8008d72 <_malloc_r+0xca>
 8008d42:	1961      	adds	r1, r4, r5
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	6025      	str	r5, [r4, #0]
 8008d48:	bf18      	it	ne
 8008d4a:	6059      	strne	r1, [r3, #4]
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	bf08      	it	eq
 8008d50:	f8c8 1000 	streq.w	r1, [r8]
 8008d54:	5162      	str	r2, [r4, r5]
 8008d56:	604b      	str	r3, [r1, #4]
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f104 060b 	add.w	r6, r4, #11
 8008d5e:	f000 f829 	bl	8008db4 <__malloc_unlock>
 8008d62:	f026 0607 	bic.w	r6, r6, #7
 8008d66:	1d23      	adds	r3, r4, #4
 8008d68:	1af2      	subs	r2, r6, r3
 8008d6a:	d0ae      	beq.n	8008cca <_malloc_r+0x22>
 8008d6c:	1b9b      	subs	r3, r3, r6
 8008d6e:	50a3      	str	r3, [r4, r2]
 8008d70:	e7ab      	b.n	8008cca <_malloc_r+0x22>
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	6862      	ldr	r2, [r4, #4]
 8008d76:	d1dd      	bne.n	8008d34 <_malloc_r+0x8c>
 8008d78:	f8c8 2000 	str.w	r2, [r8]
 8008d7c:	e7ec      	b.n	8008d58 <_malloc_r+0xb0>
 8008d7e:	4623      	mov	r3, r4
 8008d80:	6864      	ldr	r4, [r4, #4]
 8008d82:	e7ac      	b.n	8008cde <_malloc_r+0x36>
 8008d84:	4634      	mov	r4, r6
 8008d86:	6876      	ldr	r6, [r6, #4]
 8008d88:	e7b4      	b.n	8008cf4 <_malloc_r+0x4c>
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7cc      	b.n	8008d28 <_malloc_r+0x80>
 8008d8e:	230c      	movs	r3, #12
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	4638      	mov	r0, r7
 8008d94:	f000 f80e 	bl	8008db4 <__malloc_unlock>
 8008d98:	e797      	b.n	8008cca <_malloc_r+0x22>
 8008d9a:	6025      	str	r5, [r4, #0]
 8008d9c:	e7dc      	b.n	8008d58 <_malloc_r+0xb0>
 8008d9e:	605b      	str	r3, [r3, #4]
 8008da0:	deff      	udf	#255	; 0xff
 8008da2:	bf00      	nop
 8008da4:	20000de4 	.word	0x20000de4

08008da8 <__malloc_lock>:
 8008da8:	4801      	ldr	r0, [pc, #4]	; (8008db0 <__malloc_lock+0x8>)
 8008daa:	f7ff bf0e 	b.w	8008bca <__retarget_lock_acquire_recursive>
 8008dae:	bf00      	nop
 8008db0:	20000de0 	.word	0x20000de0

08008db4 <__malloc_unlock>:
 8008db4:	4801      	ldr	r0, [pc, #4]	; (8008dbc <__malloc_unlock+0x8>)
 8008db6:	f7ff bf09 	b.w	8008bcc <__retarget_lock_release_recursive>
 8008dba:	bf00      	nop
 8008dbc:	20000de0 	.word	0x20000de0

08008dc0 <__sfputc_r>:
 8008dc0:	6893      	ldr	r3, [r2, #8]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	b410      	push	{r4}
 8008dc8:	6093      	str	r3, [r2, #8]
 8008dca:	da08      	bge.n	8008dde <__sfputc_r+0x1e>
 8008dcc:	6994      	ldr	r4, [r2, #24]
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	db01      	blt.n	8008dd6 <__sfputc_r+0x16>
 8008dd2:	290a      	cmp	r1, #10
 8008dd4:	d103      	bne.n	8008dde <__sfputc_r+0x1e>
 8008dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dda:	f7ff bde8 	b.w	80089ae <__swbuf_r>
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	1c58      	adds	r0, r3, #1
 8008de2:	6010      	str	r0, [r2, #0]
 8008de4:	7019      	strb	r1, [r3, #0]
 8008de6:	4608      	mov	r0, r1
 8008de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <__sfputs_r>:
 8008dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df0:	4606      	mov	r6, r0
 8008df2:	460f      	mov	r7, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	18d5      	adds	r5, r2, r3
 8008df8:	42ac      	cmp	r4, r5
 8008dfa:	d101      	bne.n	8008e00 <__sfputs_r+0x12>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e007      	b.n	8008e10 <__sfputs_r+0x22>
 8008e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e04:	463a      	mov	r2, r7
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7ff ffda 	bl	8008dc0 <__sfputc_r>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d1f3      	bne.n	8008df8 <__sfputs_r+0xa>
 8008e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e14 <_vfiprintf_r>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	460d      	mov	r5, r1
 8008e1a:	b09d      	sub	sp, #116	; 0x74
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	4698      	mov	r8, r3
 8008e20:	4606      	mov	r6, r0
 8008e22:	b118      	cbz	r0, 8008e2c <_vfiprintf_r+0x18>
 8008e24:	6a03      	ldr	r3, [r0, #32]
 8008e26:	b90b      	cbnz	r3, 8008e2c <_vfiprintf_r+0x18>
 8008e28:	f7ff fcda 	bl	80087e0 <__sinit>
 8008e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e2e:	07d9      	lsls	r1, r3, #31
 8008e30:	d405      	bmi.n	8008e3e <_vfiprintf_r+0x2a>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	059a      	lsls	r2, r3, #22
 8008e36:	d402      	bmi.n	8008e3e <_vfiprintf_r+0x2a>
 8008e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e3a:	f7ff fec6 	bl	8008bca <__retarget_lock_acquire_recursive>
 8008e3e:	89ab      	ldrh	r3, [r5, #12]
 8008e40:	071b      	lsls	r3, r3, #28
 8008e42:	d501      	bpl.n	8008e48 <_vfiprintf_r+0x34>
 8008e44:	692b      	ldr	r3, [r5, #16]
 8008e46:	b99b      	cbnz	r3, 8008e70 <_vfiprintf_r+0x5c>
 8008e48:	4629      	mov	r1, r5
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f7ff fdec 	bl	8008a28 <__swsetup_r>
 8008e50:	b170      	cbz	r0, 8008e70 <_vfiprintf_r+0x5c>
 8008e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e54:	07dc      	lsls	r4, r3, #31
 8008e56:	d504      	bpl.n	8008e62 <_vfiprintf_r+0x4e>
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	b01d      	add	sp, #116	; 0x74
 8008e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	0598      	lsls	r0, r3, #22
 8008e66:	d4f7      	bmi.n	8008e58 <_vfiprintf_r+0x44>
 8008e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e6a:	f7ff feaf 	bl	8008bcc <__retarget_lock_release_recursive>
 8008e6e:	e7f3      	b.n	8008e58 <_vfiprintf_r+0x44>
 8008e70:	2300      	movs	r3, #0
 8008e72:	9309      	str	r3, [sp, #36]	; 0x24
 8008e74:	2320      	movs	r3, #32
 8008e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e7e:	2330      	movs	r3, #48	; 0x30
 8008e80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009034 <_vfiprintf_r+0x220>
 8008e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e88:	f04f 0901 	mov.w	r9, #1
 8008e8c:	4623      	mov	r3, r4
 8008e8e:	469a      	mov	sl, r3
 8008e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e94:	b10a      	cbz	r2, 8008e9a <_vfiprintf_r+0x86>
 8008e96:	2a25      	cmp	r2, #37	; 0x25
 8008e98:	d1f9      	bne.n	8008e8e <_vfiprintf_r+0x7a>
 8008e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e9e:	d00b      	beq.n	8008eb8 <_vfiprintf_r+0xa4>
 8008ea0:	465b      	mov	r3, fp
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ffa1 	bl	8008dee <__sfputs_r>
 8008eac:	3001      	adds	r0, #1
 8008eae:	f000 80a9 	beq.w	8009004 <_vfiprintf_r+0x1f0>
 8008eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb4:	445a      	add	r2, fp
 8008eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 80a1 	beq.w	8009004 <_vfiprintf_r+0x1f0>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ecc:	f10a 0a01 	add.w	sl, sl, #1
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	9307      	str	r3, [sp, #28]
 8008ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eda:	4654      	mov	r4, sl
 8008edc:	2205      	movs	r2, #5
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	4854      	ldr	r0, [pc, #336]	; (8009034 <_vfiprintf_r+0x220>)
 8008ee4:	f7f7 f974 	bl	80001d0 <memchr>
 8008ee8:	9a04      	ldr	r2, [sp, #16]
 8008eea:	b9d8      	cbnz	r0, 8008f24 <_vfiprintf_r+0x110>
 8008eec:	06d1      	lsls	r1, r2, #27
 8008eee:	bf44      	itt	mi
 8008ef0:	2320      	movmi	r3, #32
 8008ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef6:	0713      	lsls	r3, r2, #28
 8008ef8:	bf44      	itt	mi
 8008efa:	232b      	movmi	r3, #43	; 0x2b
 8008efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f00:	f89a 3000 	ldrb.w	r3, [sl]
 8008f04:	2b2a      	cmp	r3, #42	; 0x2a
 8008f06:	d015      	beq.n	8008f34 <_vfiprintf_r+0x120>
 8008f08:	9a07      	ldr	r2, [sp, #28]
 8008f0a:	4654      	mov	r4, sl
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f04f 0c0a 	mov.w	ip, #10
 8008f12:	4621      	mov	r1, r4
 8008f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f18:	3b30      	subs	r3, #48	; 0x30
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d94d      	bls.n	8008fba <_vfiprintf_r+0x1a6>
 8008f1e:	b1b0      	cbz	r0, 8008f4e <_vfiprintf_r+0x13a>
 8008f20:	9207      	str	r2, [sp, #28]
 8008f22:	e014      	b.n	8008f4e <_vfiprintf_r+0x13a>
 8008f24:	eba0 0308 	sub.w	r3, r0, r8
 8008f28:	fa09 f303 	lsl.w	r3, r9, r3
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	46a2      	mov	sl, r4
 8008f32:	e7d2      	b.n	8008eda <_vfiprintf_r+0xc6>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	1d19      	adds	r1, r3, #4
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	9103      	str	r1, [sp, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bfbb      	ittet	lt
 8008f40:	425b      	neglt	r3, r3
 8008f42:	f042 0202 	orrlt.w	r2, r2, #2
 8008f46:	9307      	strge	r3, [sp, #28]
 8008f48:	9307      	strlt	r3, [sp, #28]
 8008f4a:	bfb8      	it	lt
 8008f4c:	9204      	strlt	r2, [sp, #16]
 8008f4e:	7823      	ldrb	r3, [r4, #0]
 8008f50:	2b2e      	cmp	r3, #46	; 0x2e
 8008f52:	d10c      	bne.n	8008f6e <_vfiprintf_r+0x15a>
 8008f54:	7863      	ldrb	r3, [r4, #1]
 8008f56:	2b2a      	cmp	r3, #42	; 0x2a
 8008f58:	d134      	bne.n	8008fc4 <_vfiprintf_r+0x1b0>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	1d1a      	adds	r2, r3, #4
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	9203      	str	r2, [sp, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	bfb8      	it	lt
 8008f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f6a:	3402      	adds	r4, #2
 8008f6c:	9305      	str	r3, [sp, #20]
 8008f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009044 <_vfiprintf_r+0x230>
 8008f72:	7821      	ldrb	r1, [r4, #0]
 8008f74:	2203      	movs	r2, #3
 8008f76:	4650      	mov	r0, sl
 8008f78:	f7f7 f92a 	bl	80001d0 <memchr>
 8008f7c:	b138      	cbz	r0, 8008f8e <_vfiprintf_r+0x17a>
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	eba0 000a 	sub.w	r0, r0, sl
 8008f84:	2240      	movs	r2, #64	; 0x40
 8008f86:	4082      	lsls	r2, r0
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	3401      	adds	r4, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f92:	4829      	ldr	r0, [pc, #164]	; (8009038 <_vfiprintf_r+0x224>)
 8008f94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f98:	2206      	movs	r2, #6
 8008f9a:	f7f7 f919 	bl	80001d0 <memchr>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d03f      	beq.n	8009022 <_vfiprintf_r+0x20e>
 8008fa2:	4b26      	ldr	r3, [pc, #152]	; (800903c <_vfiprintf_r+0x228>)
 8008fa4:	bb1b      	cbnz	r3, 8008fee <_vfiprintf_r+0x1da>
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	3307      	adds	r3, #7
 8008faa:	f023 0307 	bic.w	r3, r3, #7
 8008fae:	3308      	adds	r3, #8
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb4:	443b      	add	r3, r7
 8008fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb8:	e768      	b.n	8008e8c <_vfiprintf_r+0x78>
 8008fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	e7a6      	b.n	8008f12 <_vfiprintf_r+0xfe>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	9305      	str	r3, [sp, #20]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f04f 0c0a 	mov.w	ip, #10
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd6:	3a30      	subs	r2, #48	; 0x30
 8008fd8:	2a09      	cmp	r2, #9
 8008fda:	d903      	bls.n	8008fe4 <_vfiprintf_r+0x1d0>
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0c6      	beq.n	8008f6e <_vfiprintf_r+0x15a>
 8008fe0:	9105      	str	r1, [sp, #20]
 8008fe2:	e7c4      	b.n	8008f6e <_vfiprintf_r+0x15a>
 8008fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fe8:	4604      	mov	r4, r0
 8008fea:	2301      	movs	r3, #1
 8008fec:	e7f0      	b.n	8008fd0 <_vfiprintf_r+0x1bc>
 8008fee:	ab03      	add	r3, sp, #12
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	4b12      	ldr	r3, [pc, #72]	; (8009040 <_vfiprintf_r+0x22c>)
 8008ff6:	a904      	add	r1, sp, #16
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f3af 8000 	nop.w
 8008ffe:	4607      	mov	r7, r0
 8009000:	1c78      	adds	r0, r7, #1
 8009002:	d1d6      	bne.n	8008fb2 <_vfiprintf_r+0x19e>
 8009004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	d405      	bmi.n	8009016 <_vfiprintf_r+0x202>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d402      	bmi.n	8009016 <_vfiprintf_r+0x202>
 8009010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009012:	f7ff fddb 	bl	8008bcc <__retarget_lock_release_recursive>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	065b      	lsls	r3, r3, #25
 800901a:	f53f af1d 	bmi.w	8008e58 <_vfiprintf_r+0x44>
 800901e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009020:	e71c      	b.n	8008e5c <_vfiprintf_r+0x48>
 8009022:	ab03      	add	r3, sp, #12
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	462a      	mov	r2, r5
 8009028:	4b05      	ldr	r3, [pc, #20]	; (8009040 <_vfiprintf_r+0x22c>)
 800902a:	a904      	add	r1, sp, #16
 800902c:	4630      	mov	r0, r6
 800902e:	f000 f879 	bl	8009124 <_printf_i>
 8009032:	e7e4      	b.n	8008ffe <_vfiprintf_r+0x1ea>
 8009034:	08009788 	.word	0x08009788
 8009038:	08009792 	.word	0x08009792
 800903c:	00000000 	.word	0x00000000
 8009040:	08008def 	.word	0x08008def
 8009044:	0800978e 	.word	0x0800978e

08009048 <_printf_common>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	4616      	mov	r6, r2
 800904e:	4699      	mov	r9, r3
 8009050:	688a      	ldr	r2, [r1, #8]
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009058:	4293      	cmp	r3, r2
 800905a:	bfb8      	it	lt
 800905c:	4613      	movlt	r3, r2
 800905e:	6033      	str	r3, [r6, #0]
 8009060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009064:	4607      	mov	r7, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b10a      	cbz	r2, 800906e <_printf_common+0x26>
 800906a:	3301      	adds	r3, #1
 800906c:	6033      	str	r3, [r6, #0]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	0699      	lsls	r1, r3, #26
 8009072:	bf42      	ittt	mi
 8009074:	6833      	ldrmi	r3, [r6, #0]
 8009076:	3302      	addmi	r3, #2
 8009078:	6033      	strmi	r3, [r6, #0]
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	f015 0506 	ands.w	r5, r5, #6
 8009080:	d106      	bne.n	8009090 <_printf_common+0x48>
 8009082:	f104 0a19 	add.w	sl, r4, #25
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	6832      	ldr	r2, [r6, #0]
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	42ab      	cmp	r3, r5
 800908e:	dc26      	bgt.n	80090de <_printf_common+0x96>
 8009090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009094:	1e13      	subs	r3, r2, #0
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	bf18      	it	ne
 800909a:	2301      	movne	r3, #1
 800909c:	0692      	lsls	r2, r2, #26
 800909e:	d42b      	bmi.n	80090f8 <_printf_common+0xb0>
 80090a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090a4:	4649      	mov	r1, r9
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c0      	blx	r8
 80090aa:	3001      	adds	r0, #1
 80090ac:	d01e      	beq.n	80090ec <_printf_common+0xa4>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	f003 0306 	and.w	r3, r3, #6
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	bf02      	ittt	eq
 80090ba:	68e5      	ldreq	r5, [r4, #12]
 80090bc:	6833      	ldreq	r3, [r6, #0]
 80090be:	1aed      	subeq	r5, r5, r3
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	bf0c      	ite	eq
 80090c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c8:	2500      	movne	r5, #0
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bfc4      	itt	gt
 80090ce:	1a9b      	subgt	r3, r3, r2
 80090d0:	18ed      	addgt	r5, r5, r3
 80090d2:	2600      	movs	r6, #0
 80090d4:	341a      	adds	r4, #26
 80090d6:	42b5      	cmp	r5, r6
 80090d8:	d11a      	bne.n	8009110 <_printf_common+0xc8>
 80090da:	2000      	movs	r0, #0
 80090dc:	e008      	b.n	80090f0 <_printf_common+0xa8>
 80090de:	2301      	movs	r3, #1
 80090e0:	4652      	mov	r2, sl
 80090e2:	4649      	mov	r1, r9
 80090e4:	4638      	mov	r0, r7
 80090e6:	47c0      	blx	r8
 80090e8:	3001      	adds	r0, #1
 80090ea:	d103      	bne.n	80090f4 <_printf_common+0xac>
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	3501      	adds	r5, #1
 80090f6:	e7c6      	b.n	8009086 <_printf_common+0x3e>
 80090f8:	18e1      	adds	r1, r4, r3
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	2030      	movs	r0, #48	; 0x30
 80090fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009102:	4422      	add	r2, r4
 8009104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800910c:	3302      	adds	r3, #2
 800910e:	e7c7      	b.n	80090a0 <_printf_common+0x58>
 8009110:	2301      	movs	r3, #1
 8009112:	4622      	mov	r2, r4
 8009114:	4649      	mov	r1, r9
 8009116:	4638      	mov	r0, r7
 8009118:	47c0      	blx	r8
 800911a:	3001      	adds	r0, #1
 800911c:	d0e6      	beq.n	80090ec <_printf_common+0xa4>
 800911e:	3601      	adds	r6, #1
 8009120:	e7d9      	b.n	80090d6 <_printf_common+0x8e>
	...

08009124 <_printf_i>:
 8009124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	7e0f      	ldrb	r7, [r1, #24]
 800912a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800912c:	2f78      	cmp	r7, #120	; 0x78
 800912e:	4691      	mov	r9, r2
 8009130:	4680      	mov	r8, r0
 8009132:	460c      	mov	r4, r1
 8009134:	469a      	mov	sl, r3
 8009136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800913a:	d807      	bhi.n	800914c <_printf_i+0x28>
 800913c:	2f62      	cmp	r7, #98	; 0x62
 800913e:	d80a      	bhi.n	8009156 <_printf_i+0x32>
 8009140:	2f00      	cmp	r7, #0
 8009142:	f000 80d4 	beq.w	80092ee <_printf_i+0x1ca>
 8009146:	2f58      	cmp	r7, #88	; 0x58
 8009148:	f000 80c0 	beq.w	80092cc <_printf_i+0x1a8>
 800914c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009154:	e03a      	b.n	80091cc <_printf_i+0xa8>
 8009156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800915a:	2b15      	cmp	r3, #21
 800915c:	d8f6      	bhi.n	800914c <_printf_i+0x28>
 800915e:	a101      	add	r1, pc, #4	; (adr r1, 8009164 <_printf_i+0x40>)
 8009160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091d1 	.word	0x080091d1
 800916c:	0800914d 	.word	0x0800914d
 8009170:	0800914d 	.word	0x0800914d
 8009174:	0800914d 	.word	0x0800914d
 8009178:	0800914d 	.word	0x0800914d
 800917c:	080091d1 	.word	0x080091d1
 8009180:	0800914d 	.word	0x0800914d
 8009184:	0800914d 	.word	0x0800914d
 8009188:	0800914d 	.word	0x0800914d
 800918c:	0800914d 	.word	0x0800914d
 8009190:	080092d5 	.word	0x080092d5
 8009194:	080091fd 	.word	0x080091fd
 8009198:	0800928f 	.word	0x0800928f
 800919c:	0800914d 	.word	0x0800914d
 80091a0:	0800914d 	.word	0x0800914d
 80091a4:	080092f7 	.word	0x080092f7
 80091a8:	0800914d 	.word	0x0800914d
 80091ac:	080091fd 	.word	0x080091fd
 80091b0:	0800914d 	.word	0x0800914d
 80091b4:	0800914d 	.word	0x0800914d
 80091b8:	08009297 	.word	0x08009297
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	1d1a      	adds	r2, r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	602a      	str	r2, [r5, #0]
 80091c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091cc:	2301      	movs	r3, #1
 80091ce:	e09f      	b.n	8009310 <_printf_i+0x1ec>
 80091d0:	6820      	ldr	r0, [r4, #0]
 80091d2:	682b      	ldr	r3, [r5, #0]
 80091d4:	0607      	lsls	r7, r0, #24
 80091d6:	f103 0104 	add.w	r1, r3, #4
 80091da:	6029      	str	r1, [r5, #0]
 80091dc:	d501      	bpl.n	80091e2 <_printf_i+0xbe>
 80091de:	681e      	ldr	r6, [r3, #0]
 80091e0:	e003      	b.n	80091ea <_printf_i+0xc6>
 80091e2:	0646      	lsls	r6, r0, #25
 80091e4:	d5fb      	bpl.n	80091de <_printf_i+0xba>
 80091e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	da03      	bge.n	80091f6 <_printf_i+0xd2>
 80091ee:	232d      	movs	r3, #45	; 0x2d
 80091f0:	4276      	negs	r6, r6
 80091f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f6:	485a      	ldr	r0, [pc, #360]	; (8009360 <_printf_i+0x23c>)
 80091f8:	230a      	movs	r3, #10
 80091fa:	e012      	b.n	8009222 <_printf_i+0xfe>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	1d19      	adds	r1, r3, #4
 8009202:	6029      	str	r1, [r5, #0]
 8009204:	0605      	lsls	r5, r0, #24
 8009206:	d501      	bpl.n	800920c <_printf_i+0xe8>
 8009208:	681e      	ldr	r6, [r3, #0]
 800920a:	e002      	b.n	8009212 <_printf_i+0xee>
 800920c:	0641      	lsls	r1, r0, #25
 800920e:	d5fb      	bpl.n	8009208 <_printf_i+0xe4>
 8009210:	881e      	ldrh	r6, [r3, #0]
 8009212:	4853      	ldr	r0, [pc, #332]	; (8009360 <_printf_i+0x23c>)
 8009214:	2f6f      	cmp	r7, #111	; 0x6f
 8009216:	bf0c      	ite	eq
 8009218:	2308      	moveq	r3, #8
 800921a:	230a      	movne	r3, #10
 800921c:	2100      	movs	r1, #0
 800921e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009222:	6865      	ldr	r5, [r4, #4]
 8009224:	60a5      	str	r5, [r4, #8]
 8009226:	2d00      	cmp	r5, #0
 8009228:	bfa2      	ittt	ge
 800922a:	6821      	ldrge	r1, [r4, #0]
 800922c:	f021 0104 	bicge.w	r1, r1, #4
 8009230:	6021      	strge	r1, [r4, #0]
 8009232:	b90e      	cbnz	r6, 8009238 <_printf_i+0x114>
 8009234:	2d00      	cmp	r5, #0
 8009236:	d04b      	beq.n	80092d0 <_printf_i+0x1ac>
 8009238:	4615      	mov	r5, r2
 800923a:	fbb6 f1f3 	udiv	r1, r6, r3
 800923e:	fb03 6711 	mls	r7, r3, r1, r6
 8009242:	5dc7      	ldrb	r7, [r0, r7]
 8009244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009248:	4637      	mov	r7, r6
 800924a:	42bb      	cmp	r3, r7
 800924c:	460e      	mov	r6, r1
 800924e:	d9f4      	bls.n	800923a <_printf_i+0x116>
 8009250:	2b08      	cmp	r3, #8
 8009252:	d10b      	bne.n	800926c <_printf_i+0x148>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	07de      	lsls	r6, r3, #31
 8009258:	d508      	bpl.n	800926c <_printf_i+0x148>
 800925a:	6923      	ldr	r3, [r4, #16]
 800925c:	6861      	ldr	r1, [r4, #4]
 800925e:	4299      	cmp	r1, r3
 8009260:	bfde      	ittt	le
 8009262:	2330      	movle	r3, #48	; 0x30
 8009264:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009268:	f105 35ff 	addle.w	r5, r5, #4294967295
 800926c:	1b52      	subs	r2, r2, r5
 800926e:	6122      	str	r2, [r4, #16]
 8009270:	f8cd a000 	str.w	sl, [sp]
 8009274:	464b      	mov	r3, r9
 8009276:	aa03      	add	r2, sp, #12
 8009278:	4621      	mov	r1, r4
 800927a:	4640      	mov	r0, r8
 800927c:	f7ff fee4 	bl	8009048 <_printf_common>
 8009280:	3001      	adds	r0, #1
 8009282:	d14a      	bne.n	800931a <_printf_i+0x1f6>
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	b004      	add	sp, #16
 800928a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	f043 0320 	orr.w	r3, r3, #32
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	4833      	ldr	r0, [pc, #204]	; (8009364 <_printf_i+0x240>)
 8009298:	2778      	movs	r7, #120	; 0x78
 800929a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	6829      	ldr	r1, [r5, #0]
 80092a2:	061f      	lsls	r7, r3, #24
 80092a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80092a8:	d402      	bmi.n	80092b0 <_printf_i+0x18c>
 80092aa:	065f      	lsls	r7, r3, #25
 80092ac:	bf48      	it	mi
 80092ae:	b2b6      	uxthmi	r6, r6
 80092b0:	07df      	lsls	r7, r3, #31
 80092b2:	bf48      	it	mi
 80092b4:	f043 0320 	orrmi.w	r3, r3, #32
 80092b8:	6029      	str	r1, [r5, #0]
 80092ba:	bf48      	it	mi
 80092bc:	6023      	strmi	r3, [r4, #0]
 80092be:	b91e      	cbnz	r6, 80092c8 <_printf_i+0x1a4>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	f023 0320 	bic.w	r3, r3, #32
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	2310      	movs	r3, #16
 80092ca:	e7a7      	b.n	800921c <_printf_i+0xf8>
 80092cc:	4824      	ldr	r0, [pc, #144]	; (8009360 <_printf_i+0x23c>)
 80092ce:	e7e4      	b.n	800929a <_printf_i+0x176>
 80092d0:	4615      	mov	r5, r2
 80092d2:	e7bd      	b.n	8009250 <_printf_i+0x12c>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	6826      	ldr	r6, [r4, #0]
 80092d8:	6961      	ldr	r1, [r4, #20]
 80092da:	1d18      	adds	r0, r3, #4
 80092dc:	6028      	str	r0, [r5, #0]
 80092de:	0635      	lsls	r5, r6, #24
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	d501      	bpl.n	80092e8 <_printf_i+0x1c4>
 80092e4:	6019      	str	r1, [r3, #0]
 80092e6:	e002      	b.n	80092ee <_printf_i+0x1ca>
 80092e8:	0670      	lsls	r0, r6, #25
 80092ea:	d5fb      	bpl.n	80092e4 <_printf_i+0x1c0>
 80092ec:	8019      	strh	r1, [r3, #0]
 80092ee:	2300      	movs	r3, #0
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	4615      	mov	r5, r2
 80092f4:	e7bc      	b.n	8009270 <_printf_i+0x14c>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	1d1a      	adds	r2, r3, #4
 80092fa:	602a      	str	r2, [r5, #0]
 80092fc:	681d      	ldr	r5, [r3, #0]
 80092fe:	6862      	ldr	r2, [r4, #4]
 8009300:	2100      	movs	r1, #0
 8009302:	4628      	mov	r0, r5
 8009304:	f7f6 ff64 	bl	80001d0 <memchr>
 8009308:	b108      	cbz	r0, 800930e <_printf_i+0x1ea>
 800930a:	1b40      	subs	r0, r0, r5
 800930c:	6060      	str	r0, [r4, #4]
 800930e:	6863      	ldr	r3, [r4, #4]
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	2300      	movs	r3, #0
 8009314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009318:	e7aa      	b.n	8009270 <_printf_i+0x14c>
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	462a      	mov	r2, r5
 800931e:	4649      	mov	r1, r9
 8009320:	4640      	mov	r0, r8
 8009322:	47d0      	blx	sl
 8009324:	3001      	adds	r0, #1
 8009326:	d0ad      	beq.n	8009284 <_printf_i+0x160>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	079b      	lsls	r3, r3, #30
 800932c:	d413      	bmi.n	8009356 <_printf_i+0x232>
 800932e:	68e0      	ldr	r0, [r4, #12]
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	4298      	cmp	r0, r3
 8009334:	bfb8      	it	lt
 8009336:	4618      	movlt	r0, r3
 8009338:	e7a6      	b.n	8009288 <_printf_i+0x164>
 800933a:	2301      	movs	r3, #1
 800933c:	4632      	mov	r2, r6
 800933e:	4649      	mov	r1, r9
 8009340:	4640      	mov	r0, r8
 8009342:	47d0      	blx	sl
 8009344:	3001      	adds	r0, #1
 8009346:	d09d      	beq.n	8009284 <_printf_i+0x160>
 8009348:	3501      	adds	r5, #1
 800934a:	68e3      	ldr	r3, [r4, #12]
 800934c:	9903      	ldr	r1, [sp, #12]
 800934e:	1a5b      	subs	r3, r3, r1
 8009350:	42ab      	cmp	r3, r5
 8009352:	dcf2      	bgt.n	800933a <_printf_i+0x216>
 8009354:	e7eb      	b.n	800932e <_printf_i+0x20a>
 8009356:	2500      	movs	r5, #0
 8009358:	f104 0619 	add.w	r6, r4, #25
 800935c:	e7f5      	b.n	800934a <_printf_i+0x226>
 800935e:	bf00      	nop
 8009360:	08009799 	.word	0x08009799
 8009364:	080097aa 	.word	0x080097aa

08009368 <__sflush_r>:
 8009368:	898a      	ldrh	r2, [r1, #12]
 800936a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936e:	4605      	mov	r5, r0
 8009370:	0710      	lsls	r0, r2, #28
 8009372:	460c      	mov	r4, r1
 8009374:	d458      	bmi.n	8009428 <__sflush_r+0xc0>
 8009376:	684b      	ldr	r3, [r1, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc05      	bgt.n	8009388 <__sflush_r+0x20>
 800937c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	dc02      	bgt.n	8009388 <__sflush_r+0x20>
 8009382:	2000      	movs	r0, #0
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800938a:	2e00      	cmp	r6, #0
 800938c:	d0f9      	beq.n	8009382 <__sflush_r+0x1a>
 800938e:	2300      	movs	r3, #0
 8009390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009394:	682f      	ldr	r7, [r5, #0]
 8009396:	6a21      	ldr	r1, [r4, #32]
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	d032      	beq.n	8009402 <__sflush_r+0x9a>
 800939c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	075a      	lsls	r2, r3, #29
 80093a2:	d505      	bpl.n	80093b0 <__sflush_r+0x48>
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	1ac0      	subs	r0, r0, r3
 80093a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093aa:	b10b      	cbz	r3, 80093b0 <__sflush_r+0x48>
 80093ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093ae:	1ac0      	subs	r0, r0, r3
 80093b0:	2300      	movs	r3, #0
 80093b2:	4602      	mov	r2, r0
 80093b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093b6:	6a21      	ldr	r1, [r4, #32]
 80093b8:	4628      	mov	r0, r5
 80093ba:	47b0      	blx	r6
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	d106      	bne.n	80093d0 <__sflush_r+0x68>
 80093c2:	6829      	ldr	r1, [r5, #0]
 80093c4:	291d      	cmp	r1, #29
 80093c6:	d82b      	bhi.n	8009420 <__sflush_r+0xb8>
 80093c8:	4a29      	ldr	r2, [pc, #164]	; (8009470 <__sflush_r+0x108>)
 80093ca:	410a      	asrs	r2, r1
 80093cc:	07d6      	lsls	r6, r2, #31
 80093ce:	d427      	bmi.n	8009420 <__sflush_r+0xb8>
 80093d0:	2200      	movs	r2, #0
 80093d2:	6062      	str	r2, [r4, #4]
 80093d4:	04d9      	lsls	r1, r3, #19
 80093d6:	6922      	ldr	r2, [r4, #16]
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	d504      	bpl.n	80093e6 <__sflush_r+0x7e>
 80093dc:	1c42      	adds	r2, r0, #1
 80093de:	d101      	bne.n	80093e4 <__sflush_r+0x7c>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b903      	cbnz	r3, 80093e6 <__sflush_r+0x7e>
 80093e4:	6560      	str	r0, [r4, #84]	; 0x54
 80093e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e8:	602f      	str	r7, [r5, #0]
 80093ea:	2900      	cmp	r1, #0
 80093ec:	d0c9      	beq.n	8009382 <__sflush_r+0x1a>
 80093ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093f2:	4299      	cmp	r1, r3
 80093f4:	d002      	beq.n	80093fc <__sflush_r+0x94>
 80093f6:	4628      	mov	r0, r5
 80093f8:	f7ff fbea 	bl	8008bd0 <_free_r>
 80093fc:	2000      	movs	r0, #0
 80093fe:	6360      	str	r0, [r4, #52]	; 0x34
 8009400:	e7c0      	b.n	8009384 <__sflush_r+0x1c>
 8009402:	2301      	movs	r3, #1
 8009404:	4628      	mov	r0, r5
 8009406:	47b0      	blx	r6
 8009408:	1c41      	adds	r1, r0, #1
 800940a:	d1c8      	bne.n	800939e <__sflush_r+0x36>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0c5      	beq.n	800939e <__sflush_r+0x36>
 8009412:	2b1d      	cmp	r3, #29
 8009414:	d001      	beq.n	800941a <__sflush_r+0xb2>
 8009416:	2b16      	cmp	r3, #22
 8009418:	d101      	bne.n	800941e <__sflush_r+0xb6>
 800941a:	602f      	str	r7, [r5, #0]
 800941c:	e7b1      	b.n	8009382 <__sflush_r+0x1a>
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	e7ad      	b.n	8009384 <__sflush_r+0x1c>
 8009428:	690f      	ldr	r7, [r1, #16]
 800942a:	2f00      	cmp	r7, #0
 800942c:	d0a9      	beq.n	8009382 <__sflush_r+0x1a>
 800942e:	0793      	lsls	r3, r2, #30
 8009430:	680e      	ldr	r6, [r1, #0]
 8009432:	bf08      	it	eq
 8009434:	694b      	ldreq	r3, [r1, #20]
 8009436:	600f      	str	r7, [r1, #0]
 8009438:	bf18      	it	ne
 800943a:	2300      	movne	r3, #0
 800943c:	eba6 0807 	sub.w	r8, r6, r7
 8009440:	608b      	str	r3, [r1, #8]
 8009442:	f1b8 0f00 	cmp.w	r8, #0
 8009446:	dd9c      	ble.n	8009382 <__sflush_r+0x1a>
 8009448:	6a21      	ldr	r1, [r4, #32]
 800944a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800944c:	4643      	mov	r3, r8
 800944e:	463a      	mov	r2, r7
 8009450:	4628      	mov	r0, r5
 8009452:	47b0      	blx	r6
 8009454:	2800      	cmp	r0, #0
 8009456:	dc06      	bgt.n	8009466 <__sflush_r+0xfe>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	e78e      	b.n	8009384 <__sflush_r+0x1c>
 8009466:	4407      	add	r7, r0
 8009468:	eba8 0800 	sub.w	r8, r8, r0
 800946c:	e7e9      	b.n	8009442 <__sflush_r+0xda>
 800946e:	bf00      	nop
 8009470:	dfbffffe 	.word	0xdfbffffe

08009474 <_fflush_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	690b      	ldr	r3, [r1, #16]
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b913      	cbnz	r3, 8009484 <_fflush_r+0x10>
 800947e:	2500      	movs	r5, #0
 8009480:	4628      	mov	r0, r5
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	b118      	cbz	r0, 800948e <_fflush_r+0x1a>
 8009486:	6a03      	ldr	r3, [r0, #32]
 8009488:	b90b      	cbnz	r3, 800948e <_fflush_r+0x1a>
 800948a:	f7ff f9a9 	bl	80087e0 <__sinit>
 800948e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f3      	beq.n	800947e <_fflush_r+0xa>
 8009496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009498:	07d0      	lsls	r0, r2, #31
 800949a:	d404      	bmi.n	80094a6 <_fflush_r+0x32>
 800949c:	0599      	lsls	r1, r3, #22
 800949e:	d402      	bmi.n	80094a6 <_fflush_r+0x32>
 80094a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094a2:	f7ff fb92 	bl	8008bca <__retarget_lock_acquire_recursive>
 80094a6:	4628      	mov	r0, r5
 80094a8:	4621      	mov	r1, r4
 80094aa:	f7ff ff5d 	bl	8009368 <__sflush_r>
 80094ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094b0:	07da      	lsls	r2, r3, #31
 80094b2:	4605      	mov	r5, r0
 80094b4:	d4e4      	bmi.n	8009480 <_fflush_r+0xc>
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	059b      	lsls	r3, r3, #22
 80094ba:	d4e1      	bmi.n	8009480 <_fflush_r+0xc>
 80094bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094be:	f7ff fb85 	bl	8008bcc <__retarget_lock_release_recursive>
 80094c2:	e7dd      	b.n	8009480 <_fflush_r+0xc>

080094c4 <__swhatbuf_r>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	460c      	mov	r4, r1
 80094c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094cc:	2900      	cmp	r1, #0
 80094ce:	b096      	sub	sp, #88	; 0x58
 80094d0:	4615      	mov	r5, r2
 80094d2:	461e      	mov	r6, r3
 80094d4:	da0d      	bge.n	80094f2 <__swhatbuf_r+0x2e>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094dc:	f04f 0100 	mov.w	r1, #0
 80094e0:	bf0c      	ite	eq
 80094e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094e6:	2340      	movne	r3, #64	; 0x40
 80094e8:	2000      	movs	r0, #0
 80094ea:	6031      	str	r1, [r6, #0]
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	b016      	add	sp, #88	; 0x58
 80094f0:	bd70      	pop	{r4, r5, r6, pc}
 80094f2:	466a      	mov	r2, sp
 80094f4:	f000 f848 	bl	8009588 <_fstat_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	dbec      	blt.n	80094d6 <__swhatbuf_r+0x12>
 80094fc:	9901      	ldr	r1, [sp, #4]
 80094fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009502:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009506:	4259      	negs	r1, r3
 8009508:	4159      	adcs	r1, r3
 800950a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800950e:	e7eb      	b.n	80094e8 <__swhatbuf_r+0x24>

08009510 <__smakebuf_r>:
 8009510:	898b      	ldrh	r3, [r1, #12]
 8009512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009514:	079d      	lsls	r5, r3, #30
 8009516:	4606      	mov	r6, r0
 8009518:	460c      	mov	r4, r1
 800951a:	d507      	bpl.n	800952c <__smakebuf_r+0x1c>
 800951c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	6123      	str	r3, [r4, #16]
 8009524:	2301      	movs	r3, #1
 8009526:	6163      	str	r3, [r4, #20]
 8009528:	b002      	add	sp, #8
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	ab01      	add	r3, sp, #4
 800952e:	466a      	mov	r2, sp
 8009530:	f7ff ffc8 	bl	80094c4 <__swhatbuf_r>
 8009534:	9900      	ldr	r1, [sp, #0]
 8009536:	4605      	mov	r5, r0
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff fbb5 	bl	8008ca8 <_malloc_r>
 800953e:	b948      	cbnz	r0, 8009554 <__smakebuf_r+0x44>
 8009540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009544:	059a      	lsls	r2, r3, #22
 8009546:	d4ef      	bmi.n	8009528 <__smakebuf_r+0x18>
 8009548:	f023 0303 	bic.w	r3, r3, #3
 800954c:	f043 0302 	orr.w	r3, r3, #2
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	e7e3      	b.n	800951c <__smakebuf_r+0xc>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	6020      	str	r0, [r4, #0]
 8009558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	6163      	str	r3, [r4, #20]
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	6120      	str	r0, [r4, #16]
 8009566:	b15b      	cbz	r3, 8009580 <__smakebuf_r+0x70>
 8009568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f81d 	bl	80095ac <_isatty_r>
 8009572:	b128      	cbz	r0, 8009580 <__smakebuf_r+0x70>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	f043 0301 	orr.w	r3, r3, #1
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	431d      	orrs	r5, r3
 8009584:	81a5      	strh	r5, [r4, #12]
 8009586:	e7cf      	b.n	8009528 <__smakebuf_r+0x18>

08009588 <_fstat_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_fstat_r+0x20>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	f7f7 fcb0 	bl	8000efa <_fstat>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d102      	bne.n	80095a4 <_fstat_r+0x1c>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	b103      	cbz	r3, 80095a4 <_fstat_r+0x1c>
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	20000ddc 	.word	0x20000ddc

080095ac <_isatty_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d06      	ldr	r5, [pc, #24]	; (80095c8 <_isatty_r+0x1c>)
 80095b0:	2300      	movs	r3, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	f7f7 fcaf 	bl	8000f1a <_isatty>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_isatty_r+0x1a>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_isatty_r+0x1a>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	20000ddc 	.word	0x20000ddc

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d06      	ldr	r5, [pc, #24]	; (80095e8 <_sbrk_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f7 fcb8 	bl	8000f4c <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000ddc 	.word	0x20000ddc

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
